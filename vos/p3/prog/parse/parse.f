	INCLUDE 'VICMAIN_FOR'
	SUBROUTINE MAIN44
C
C	This program splits an image into component fragments, as would
C	be appropriate for separating out individual sensors of a pushbroom
C	or whiskbroom system. In the REVERSE method of operation, the
C	image is re-assembled from its components.
C
C	Original release:  May 25, 2000     Ron Alley
C
	IMPLICIT NONE
C
	INTEGER BUF(40000),BUF2(20000),INP(50),IOUT(50),IBANDS(50)
	INTEGER ISENSORS(50),INST(200)
	INTEGER I,ICNT,IDEF,ISTAT,NINP,NOUT,NL,NS,NB,NBANDSOUT,NSENSORS
	INTEGER NSENSORSOUT,NBPP,NL_OUT,NS_OUT,NB_OUT,NHIST,NUM
	LOGICAL XVPTST,QVERT,QBY_SENSOR,QREVERSE
	CHARACTER*80 MSG
	CHARACTER*10 TASK(200)
C								   open input(s)
	CALL XVPCNT('INP',NINP)
	DO I=1,NINP
	    CALL XVUNIT(INP(I),'INP',I,ISTAT,' ')
	    CALL XVOPEN(INP(I),ISTAT,'OPEN_ACT','SA','IO_ACT','SA',' ')
	END DO
	CALL XVGET(INP(1),ISTAT,'NL',NL,'NS',NS,'NB',NB,
     +		   'PIX_SIZE',NBPP,' ')
C								  get parameters
	CALL XVPARM('COUNT',NSENSORS,ICNT,IDEF,1)
	QVERT = XVPTST('VERTICAL')
	QBY_SENSOR = XVPTST('BY_SENSOR')
	QREVERSE = XVPTST('REVERSE')
	CALL XVPARM('BANDS',IBANDS,NBANDSOUT,IDEF,50)
	IF (NBANDSOUT .EQ. 0) THEN
	    DO I=1,NB
		IBANDS(I) = I
	    END DO
	    NBANDSOUT = NB
	END IF
	CALL XVPARM('SENSORS',ISENSORS,NSENSORSOUT,IDEF,50)
	IF (NSENSORSOUT .EQ. 0) THEN
	    DO I=1,NSENSORS
		ISENSORS(I) = I
	    END DO
	    NSENSORSOUT = NSENSORS
	END IF
	CALL XVPCNT('OUT',NOUT)
C						check parameters for consistency
	IF (NBANDSOUT .GT. NB) THEN
	    CALL XVMESSAGE('Too many output bands specified',' ')
	    CALL ABEND
	ENDIF
	IF (NSENSORSOUT .GT. NSENSORS) THEN
	    CALL XVMESSAGE('Too many output sensors specified',' ')
	    CALL ABEND
	ENDIF
	IF (QREVERSE) THEN
	    IF (NOUT .GT. 1) THEN
		CALL XVMESSAGE(
     +		 'Only one output file is permitted in REVERSE method.',' ')
		CALL ABEND
	    ENDIF
	    IF (QBY_SENSOR) THEN
		IF (NINP .NE. NSENSORS) THEN
		    CALL XVMESSAGE(
     +		    'Number of inputs must equal the number of sensors',' ')
		    CALL ABEND
		ENDIF
	    ELSE
		IF (NB .NE. NSENSORS) THEN
		    CALL XVMESSAGE(
     +		'Number of input bands must equal number of sensors',' ')
		    CALL ABEND
		ENDIF
	    END IF
	ELSE
	    IF (NINP .GT. 1) THEN
		CALL XVMESSAGE(
     +		 'Only one input file is permitted in FORWARD method.',' ')
		CALL ABEND
	    ENDIF
	    IF (QBY_SENSOR) THEN
		IF (NOUT .NE. NSENSORSOUT) THEN
		    CALL XVMESSAGE(
     +		   'Number of outputs must equal the number of sensors',' ')
		    CALL ABEND
		ENDIF
	    ELSE
		IF (NOUT .NE. NBANDSOUT) THEN
		    CALL XVMESSAGE(
     +		     'Number of outputs must equal the number of bands',' ')
		    CALL ABEND
		ENDIF
	    END IF
	END IF
C								  open output(s)
	IF (QREVERSE) THEN
	    IF (QBY_SENSOR) THEN
		NB_OUT = NB
	    ELSE
		NB_OUT = NINP
	    END IF
	ELSE
	    IF (QBY_SENSOR) THEN
		NB_OUT = NBANDSOUT
	    ELSE
		NB_OUT = NSENSORSOUT
	    END IF
	END IF
C
	IF (QVERT) THEN
	    NL_OUT = NL
	    IF (QREVERSE) THEN
		NS_OUT = NS * NSENSORS
	    ELSE
		NS_OUT = NS / NSENSORS
	    END IF
	ELSE
	    NS_OUT = NS
	    IF (QREVERSE) THEN
		NL_OUT = NL * NSENSORS
	    ELSE
		NL_OUT = NL / NSENSORS
	    END IF
	END IF
	DO I=1,NOUT
	    CALL XVUNIT(IOUT(I),'OUT',I,ISTAT,' ')
	    CALL XVOPEN(IOUT(I),ISTAT,'OPEN_ACT','SA','IO_ACT','SA',
     +			'OP','WRITE','U_NL',NL_OUT,'U_NS',NS_OUT,
     +			'U_NB',NB_OUT,'U_ORG','BSQ',' ')
	END DO
C					    add/delete annotation in VICAR label
	IF (QREVERSE) THEN
	    NHIST = 200
	    CALL XLHINFO(IOUT(1),TASK,INST,NHIST,ISTAT,' ')
	    NUM = INST(NHIST)
	    DO I=1,NUM
		CALL XLDEL(IOUT(1),'HISTORY','PARSE_NOTE1',ISTAT,
     +			   'ERR_ACT','','INSTANCE',I,
     +			   'HIST','PARSE',' ')
		CALL XLDEL(IOUT(1),'HISTORY','PARSE_NOTE2',ISTAT,
     +			   'ERR_ACT','','INSTANCE',I,
     +			   'HIST','PARSE',' ')
	    END DO
	ELSE
	    IF (QBY_SENSOR) THEN
		DO I=1,NOUT
		    WRITE (MSG,530) ISENSORS(I)
  530		    FORMAT('Sensor',I4,' of a parsed image')
		    CALL XLADD(IOUT(I),'HISTORY','PARSE_NOTE1',MSG,
     +			       ISTAT,'FORMAT','STRING',' ')
		END DO
	    ELSE
		DO I=1,NOUT
		    WRITE (MSG,540) IBANDS(I)
  540		    FORMAT('Band',I4,' of a parsed image')
		    CALL XLADD(IOUT(I),'HISTORY','PARSE_NOTE1',MSG,
     +			       ISTAT,'FORMAT','STRING',' ')
		    MSG = 'Each band represents a different sensor'
		    CALL XLADD(IOUT(I),'HISTORY','PARSE_NOTE2',MSG,
     +			       ISTAT,'FORMAT','STRING',' ')
		END DO
	    END IF
	END IF
C						call appropriate parsing routine
	IF (QREVERSE) THEN
	    IF (QBY_SENSOR) THEN
		IF (QVERT) THEN
		    CALL REV_SEN_VERT(INP,IOUT,BUF,BUF2,NL,NS,NB,
     +				      NSENSORS,NBPP)
		ELSE
		    CALL REV_SEN_HOR(INP,IOUT,BUF,NL,NB,NSENSORS)
		END IF
	    ELSE
		IF (QVERT) THEN
		    CALL REV_BND_VERT(INP,IOUT,BUF,BUF2,NL,NS,NINP,
     +				      NSENSORS,NBPP)
		ELSE
		    CALL REV_BND_HOR(INP,IOUT,BUF,NL,NINP,NSENSORS)
		END IF
	    END IF
	ELSE
	    IF (QBY_SENSOR) THEN
		IF (QVERT) THEN
		    CALL FWD_SEN_VERT(INP,IOUT,BUF,BUF2,IBANDS,ISENSORS,
     +				    NBANDSOUT,NSENSORSOUT,NL_OUT,NS_OUT,
     +				    NSENSORS,NBPP)
		ELSE
		    CALL FWD_SEN_HOR(INP,IOUT,BUF,IBANDS,ISENSORS,
     +				  NBANDSOUT,NSENSORSOUT,NL_OUT,NSENSORS)
		END IF
	    ELSE
		IF (QVERT) THEN
		    CALL FWD_BND_VERT(INP,IOUT,BUF,BUF2,IBANDS,ISENSORS,
     +				    NBANDSOUT,NSENSORSOUT,NL_OUT,NS_OUT,
     +				    NSENSORS,NBPP)
		ELSE
		    CALL FWD_BND_HOR(INP,IOUT,BUF,IBANDS,ISENSORS,
     +				  NBANDSOUT,NSENSORSOUT,NL_OUT,NSENSORS)
		END IF
	    END IF
	END IF
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE FWD_BND_HOR(INP,IOUT,BUF,IBANDS,ISENSORS,NBANDSOUT,
     +			       NSENSORSOUT,NL_OUT,NSENSORS)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),BUF(*),IBANDS(*),ISENSORS(*),NBANDSOUT
	INTEGER NSENSORSOUT,NL_OUT,NSENSORS
	INTEGER IBAND,JBAND,ILINE,ISENSOR,JSENSOR,LINE_IN,ISTAT
C
	DO IBAND=1,NBANDSOUT
	    JBAND = IBANDS(IBAND)
	    DO ISENSOR=1,NSENSORSOUT
		JSENSOR = ISENSORS(ISENSOR)
		DO ILINE=1,NL_OUT
		    LINE_IN = NSENSORS*(ILINE-1) + JSENSOR
		    CALL XVREAD(INP(1),BUF,ISTAT,'BAND',JBAND,'LINE',
     +				LINE_IN,' ')
		    CALL XVWRIT(IOUT(IBAND),BUF,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE FWD_BND_VERT(INP,IOUT,BUF,BUF2,IBANDS,ISENSORS,
     +				NBANDSOUT,NSENSORSOUT,NL_OUT,NS_OUT,
     +				NSENSORS,NBPP)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),IBANDS(*),ISENSORS(*),NBANDSOUT
	INTEGER NSENSORSOUT,NL_OUT,NS_OUT,NSENSORS,NBPP
	INTEGER IBAND,JBAND,ILINE,ISENSOR,JSENSOR,ISTAT,LOC
	BYTE BUF(*),BUF2(*)
C
	DO IBAND=1,NBANDSOUT
	    JBAND = IBANDS(IBAND)
	    DO ISENSOR=1,NSENSORSOUT
		JSENSOR = ISENSORS(ISENSOR)
		LOC = NBPP*(JSENSOR-1) + 1
		DO ILINE=1,NL_OUT
		    CALL XVREAD(INP(1),BUF,ISTAT,'BAND',JBAND,
     +				'LINE',ILINE,' ')
		    CALL MVE(NBPP,NS_OUT,BUF(LOC),BUF2,NSENSORS,1)
		    CALL XVWRIT(IOUT(IBAND),BUF2,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE FWD_SEN_HOR(INP,IOUT,BUF,IBANDS,ISENSORS,NBANDSOUT,
     +			       NSENSORSOUT,NL_OUT,NSENSORS)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),BUF(*),IBANDS(*),ISENSORS(*),NBANDSOUT
	INTEGER NSENSORSOUT,NL_OUT,NSENSORS
	INTEGER IBAND,JBAND,ILINE,ISENSOR,JSENSOR,LINE_IN,ISTAT
C
	DO IBAND=1,NBANDSOUT
	    JBAND = IBANDS(IBAND)
	    DO ISENSOR=1,NSENSORSOUT
		JSENSOR = ISENSORS(ISENSOR)
		DO ILINE=1,NL_OUT
		    LINE_IN = NSENSORS*(ILINE-1) + JSENSOR
		    CALL XVREAD(INP(1),BUF,ISTAT,'BAND',JBAND,'LINE',
     +				LINE_IN,' ')
		    CALL XVWRIT(IOUT(ISENSOR),BUF,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE FWD_SEN_VERT(INP,IOUT,BUF,BUF2,IBANDS,ISENSORS,
     +				NBANDSOUT,NSENSORSOUT,NL_OUT,NS_OUT,
     +				NSENSORS,NBPP)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),IBANDS(*),ISENSORS(*),NBANDSOUT
	INTEGER NSENSORSOUT,NL_OUT,NS_OUT,NSENSORS,NBPP
	INTEGER LOC(50),IBAND,JBAND,ILINE,ISENSOR,JSENSOR,ISTAT
	BYTE BUF(*),BUF2(*)
C						 set up pointers for each sensor
	DO ISENSOR=1,NSENSORSOUT
	    JSENSOR = ISENSORS(ISENSOR)
	    LOC(ISENSOR) = NBPP*(JSENSOR-1) + 1
	END DO
C
	DO IBAND=1,NBANDSOUT
	    JBAND = IBANDS(IBAND)
	    DO ILINE=1,NL_OUT
		CALL XVREAD(INP(1),BUF,ISTAT,'BAND',JBAND,'LINE',ILINE,
     +			    ' ')
		DO ISENSOR=1,NSENSORSOUT
		    CALL MVE(NBPP,NS_OUT,BUF(LOC(ISENSOR)),BUF2,
     +			     NSENSORS,1)
		    CALL XVWRIT(IOUT(ISENSOR),BUF2,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE REV_BND_HOR(INP,IOUT,BUF,NL,NINP,NSENSORS)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),BUF(*),NL,NINP,NSENSORS
	INTEGER INFILE,ILINE,ISENSOR,ISTAT
C
	DO INFILE=1,NINP
	    DO ILINE=1,NL
		DO ISENSOR=1,NSENSORS
		    CALL XVREAD(INP(INFILE),BUF,ISTAT,'BAND',ISENSOR,
     +				'LINE',ILINE,' ')
		    CALL XVWRIT(IOUT(1),BUF,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE REV_BND_VERT(INP,IOUT,BUF,BUF2,NL,NS,NINP,NSENSORS,
     +			        NBPP)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),NL,NS,NINP,NSENSORS,NBPP
	INTEGER LOC(50),INFILE,ILINE,ISENSOR,ISTAT
	BYTE BUF(*),BUF2(*)
C						 set up pointers for each sensor
	DO ISENSOR=1,NSENSORS
	    LOC(ISENSOR) = NBPP*(ISENSOR-1) + 1
	END DO
C
	DO INFILE=1,NINP
	    DO ILINE=1,NL
		DO ISENSOR=1,NSENSORS
		    CALL XVREAD(INP(INFILE),BUF2,ISTAT,'BAND',ISENSOR,
     +				'LINE',ILINE,' ')
		    CALL MVE(NBPP,NS,BUF2,BUF(LOC(ISENSOR)),1,NSENSORS)
		END DO
		CALL XVWRIT(IOUT(1),BUF,ISTAT,' ')
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE REV_SEN_HOR(INP,IOUT,BUF,NL,NB,NSENSORS)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),BUF(*),NL,NB,NSENSORS
	INTEGER IBAND,ILINE,ISENSOR,ISTAT
C
	DO IBAND=1,NB
	    DO ILINE=1,NL
		DO ISENSOR=1,NSENSORS
		    CALL XVREAD(INP(ISENSOR),BUF,ISTAT,'BAND',IBAND,
     +				'LINE',ILINE,' ')
		    CALL XVWRIT(IOUT(1),BUF,ISTAT,' ')
		END DO
	    END DO
	END DO
C
	RETURN
	END
C*******************************************************************************
	SUBROUTINE REV_SEN_VERT(INP,IOUT,BUF,BUF2,NL,NS,NB,NSENSORS,
     +			        NBPP)
C
	IMPLICIT NONE
C
	INTEGER INP(*),IOUT(*),NL,NS,NB,NSENSORS,NBPP
	INTEGER LOC(50),IBAND,ILINE,ISENSOR,ISTAT
	BYTE BUF(*),BUF2(*)
C						 set up pointers for each sensor
	DO ISENSOR=1,NSENSORS
	    LOC(ISENSOR) = NBPP*(ISENSOR-1) + 1
	END DO
C
	DO IBAND=1,NB
	    DO ILINE=1,NL
		DO ISENSOR=1,NSENSORS
		    CALL XVREAD(INP(ISENSOR),BUF2,ISTAT,'BAND',IBAND,
     +				'LINE',ILINE,' ')
		    CALL MVE(NBPP,NS,BUF2,BUF(LOC(ISENSOR)),1,NSENSORS)
		END DO
		CALL XVWRIT(IOUT(1),BUF,ISTAT,' ')
	    END DO
	END DO
C
	RETURN
	END

	INCLUDE 'VICMAIN_FOR'
	SUBROUTINE MAIN44
C
	CHARACTER*8 FMT
	LOGICAL XVPTST
	EXTERNAL GEOM,GEOMNOIN
C								open inputs
	CALL XVUNIT(IGRIDUNIT,'INP',1,ISTAT,' ')
	CALL XVOPEN(IGRIDUNIT,ISTAT,'OPEN_ACT','SA','IO_ACT','SA',
     +		    'U_FORMAT','REAL',' ')
	CALL XVUNIT(INUNIT,'INP',2,ISTAT,' ')
	CALL XVOPEN(INUNIT,ISTAT,'OPEN_ACT','SA','IO_ACT','SA',
     +		    'U_FORMAT','REAL',' ')
	CALL XVGET(INUNIT,ISTAT,'FORMAT',FMT,'NL',NLRAW,'NS',NSRAW,' ')
C						    		get size field
	CALL XVSIZE(ISL,ISS,NL,NS,NLIN,NSIN)
	IF (ISL+NL-1 .GT. NLIN .OR. ISS+NS-1 .GT. NSIN) THEN
	    CALL XVMESSAGE(
     +	     'Area requested extended beyond the rectification dataset',
     +		' ')
	    CALL ABEND
	ENDIF
	CALL XVGET(INUNIT,ISTAT,'NB',NB,' ')
C								open output
	CALL XVUNIT(IOUTUNIT,'OUT',1,ISTAT,' ')
	CALL XVOPEN(IOUTUNIT,ISTAT,'OPEN_ACT','SA','IO_ACT','SA',
     +		  'U_NL',NL,'U_NS',NS,'U_NB',NB,'U_ORG','BSQ',
     +		  'OP','WRITE','O_FORMAT',FMT,'U_FORMAT','REAL', ' ')
C
C					compute buffer sizes & call STACKA to 
C					allocate buffers.  STACKA will call
C					GEOM or GEOMNOIN to perform the 
C					transformation.
	LEN1 = 4*NL*NS
	LEN2 = LEN1
	LEN3 = 4*NS
	IF (XVPTST('NOINTERP')) THEN
	    LEN4 = 4*NLRAW*NSRAW
	    CALL STACKA(15,GEOMNOIN,4,LEN1,LEN2,LEN3,LEN4,ISL,ISS,NL,NS,
     +			NB,NLRAW,NSRAW,INUNIT,IGRIDUNIT,IOUTUNIT)
	ELSE
	    LEN4 = 4*(NLRAW+2)*(NSRAW+2)
	    CALL STACKA(15,GEOM,4,LEN1,LEN2,LEN3,LEN4,ISL,ISS,NL,NS,
     +			NB,NLRAW,NSRAW,FMT,INUNIT,IGRIDUNIT,IOUTUNIT)
	END IF
	RETURN
	END
C******************************************************************************
	SUBROUTINE GEOMNOIN(GRIDLINE,LEN1,GRIDSAMP,LEN2,OUTIMG,LEN3,
     +			    RAWIMG,LEN4,ISL,ISS,NL,NS,NB,NLRAW,NSRAW,
     +			    INUNIT,IGRIDUNIT,IOUTUNIT)
C
C		Routine for geometric transformation when no interpolation
C		(nearest neighbor) is requested.
C
	REAL GRIDLINE(NS,NL),GRIDSAMP(NS,NL),OUTIMG(NS)
	REAL RAWIMG(NSRAW,NLRAW)
C							read in transform grid
	LOC = 1
	IEL = ISL+NL-1
	DO LINE=ISL,IEL
	    CALL XVREAD(IGRIDUNIT,GRIDLINE(1,LOC),ISTAT,'LINE',LINE,
     +			'SAMP',ISS,'NSAMPS',NS,'BAND',1,' ')
	    CALL XVREAD(IGRIDUNIT,GRIDSAMP(1,LOC),ISTAT,'LINE',LINE,
     +			'SAMP',ISS,'NSAMPS',NS,'BAND',2,' ')
	    LOC = LOC + 1
	END DO
C
	DO IBAND=1,NB
C							read in entire raw image
	    DO LINE=1,NLRAW
		CALL XVREAD(INUNIT,RAWIMG(1,LINE),ISTAT,'LINE',LINE,
     +			    'SAMP',1,'NSAMPS',NSRAW,'BAND',IBAND,' ')
	    END DO
C
	    DO LINE=1,NL
		DO ISAMP=1,NS
		    LINELOC = NINT(GRIDLINE(ISAMP,LINE))
		    ISAMPLOC = NINT(GRIDSAMP(ISAMP,LINE))
		    IF (LINELOC.LT.1 .OR. LINELOC.GT.NLRAW .OR. 
     +			    ISAMPLOC.LT.1 .OR. ISAMPLOC.GT.NSRAW) THEN
			OUTIMG(ISAMP) = 0.0
		    ELSE
			OUTIMG(ISAMP) = RAWIMG(ISAMPLOC,LINELOC)
		    END IF
		END DO
		CALL XVWRIT(IOUTUNIT,OUTIMG,ISTAT,' ')
	    END DO
	END DO
	RETURN
	END
C******************************************************************************
	SUBROUTINE GEOM(GRIDLINE,LEN1,GRIDSAMP,LEN2,OUTIMG,LEN3,
     +			    RAWIMG,LEN4,ISL,ISS,NL,NS,NB,NLRAW,NSRAW,
     +			    FMT,INUNIT,IGRIDUNIT,IOUTUNIT)
C
C		Routine for geometric transformation when bilinear
C		interpolation is requested.
C
	REAL GRIDLINE(NS,NL),GRIDSAMP(NS,NL),OUTIMG(NS)
	REAL RAWIMG(NSRAW+2,NLRAW+2)
	CHARACTER*8 FMT
C							read in transform grid
	LOC = 1
	IEL = ISL+NL-1
	DO LINE=ISL,IEL
	    CALL XVREAD(IGRIDUNIT,GRIDLINE(1,LOC),ISTAT,'LINE',LINE,
     +			'SAMP',ISS,'NSAMPS',NS,'BAND',1,' ')
	    CALL XVREAD(IGRIDUNIT,GRIDSAMP(1,LOC),ISTAT,'LINE',LINE,
     +			'SAMP',ISS,'NSAMPS',NS,'BAND',2,' ')
	    LOC = LOC + 1
	END DO
C
	DO IBAND=1,NB
C							read in entire raw image
C						       repeating all edge pixels
	    DO LINE=1,NLRAW
		CALL XVREAD(INUNIT,RAWIMG(2,LINE+1),ISTAT,'LINE',LINE,
     +			    'SAMP',1,'NSAMPS',NSRAW,'BAND',IBAND,' ')
		RAWIMG(1,LINE+1) = RAWIMG(2,LINE+1)
		RAWIMG(NSRAW+2,LINE+1) = RAWIMG(NSRAW+1,LINE+1)
	    END DO
	    CALL MVE(7,NSRAW+2,RAWIMG(1,2),RAWIMG(1,1),1,1)
	    CALL MVE(7,NSRAW+2,RAWIMG(1,NLRAW+1),RAWIMG(1,NLRAW+2),1,1)
C
	    IF (FMT .EQ. 'REAL    ') THEN
		DO LINE=1,NL
		    DO ISAMP=1,NS
			LINELOC = INT(GRIDLINE(ISAMP,LINE)) + 1
			ISAMPLOC = INT(GRIDSAMP(ISAMP,LINE)) + 1
		        IF (LINELOC.LT.1 .OR. LINELOC.GT.NLRAW+1 .OR. 
     +			    ISAMPLOC.LT.1 .OR. ISAMPLOC.GT.NSRAW+1) THEN
			    OUTIMG(ISAMP) = 0.0
			ELSE
			    XBAR = ISAMPLOC - GRIDSAMP(ISAMP,LINE)
			    YBAR = LINELOC - GRIDLINE(ISAMP,LINE)
			    X = 1.0-XBAR
			    Y = 1.0-YBAR
			    DN = XBAR*YBAR*RAWIMG(ISAMPLOC,LINELOC) +
     +				 X*YBAR*RAWIMG(ISAMPLOC+1,LINELOC) +
     +				 XBAR*Y*RAWIMG(ISAMPLOC,LINELOC+1) +
     +				 X*Y*RAWIMG(ISAMPLOC+1,LINELOC+1)
			    OUTIMG(ISAMP) = DN
     
			END IF
		    END DO
		    CALL XVWRIT(IOUTUNIT,OUTIMG,ISTAT,' ')
		END DO
	    ELSE
		DO LINE=1,NL
		    DO ISAMP=1,NS
			LINELOC = INT(GRIDLINE(ISAMP,LINE)) + 1
			ISAMPLOC = INT(GRIDSAMP(ISAMP,LINE)) + 1
		        IF (LINELOC.LT.1 .OR. LINELOC.GT.NLRAW+1 .OR. 
     +			    ISAMPLOC.LT.1 .OR. ISAMPLOC.GT.NSRAW+1) THEN
			    OUTIMG(ISAMP) = 0.0
			ELSE
			    XBAR = ISAMPLOC - GRIDSAMP(ISAMP,LINE)
			    YBAR = LINELOC - GRIDLINE(ISAMP,LINE)
			    X = 1.0-XBAR
			    Y = 1.0-YBAR
			    DN = XBAR*YBAR*RAWIMG(ISAMPLOC,LINELOC) +
     +				 X*YBAR*RAWIMG(ISAMPLOC+1,LINELOC) +
     +				 XBAR*Y*RAWIMG(ISAMPLOC,LINELOC+1) +
     +				 X*Y*RAWIMG(ISAMPLOC+1,LINELOC+1)
			    OUTIMG(ISAMP) = NINT(DN)
			END IF
		    END DO
		    CALL XVWRIT(IOUTUNIT,OUTIMG,ISTAT,' ')
		END DO
	    END IF
	END DO
	RETURN
	END

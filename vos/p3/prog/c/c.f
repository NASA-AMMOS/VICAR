C
C	C -- PROGRAM TO CONVERT BETWEEN DIFFERENT STORAGE FORMATS FOR
C	     IMAGES AND TO PERFORM LINEAR TRANSFORMATIONS ON THEM
C
C  ORIGINAL WRITTEN BY J. J. LORRE
C  5/83 - 6/83	... TRANSLATED FROM PL/1 TO FORTRAN BY DAN STANFILL
C  84-12-17  ...LWK... PARTIAL (I/O ONLY) VICAR2 CONVERSION TO FIX LABEL
C			PROCESSING
C  85-1-26   ...LWK... CONVERT PARAMS TO VICAR2 & FIX BUGS
C  85-2-18   ...LWK... ENABLE 'COMPLEX' TYPE, REMOVE 'FORMAT' PARAMETER,
C			CHECK FOR OVERFLOW IN REAL TO INTEGER CONVERSION
C  89-9-21   ...REA... FIX ERROR IN ROUNDING
C  90-5-23   ...REA... PUT STRETCH IN VICAR LABEL
C  91-4-12   ...REA... MERGE ASU AND PLDSJ1 VERSIONS FOR UNIX
C  00-2-7    ...REA... INCREASE BUFFER SIZES
C
	PROGRAM C
	INCLUDE 'VICMAIN_FOR'
	SUBROUTINE MAIN44
C
	COMPLEX CIN(20000),COUT(20000)
	REAL*8 DIN(20000),DOUT(20000)
	REAL RIN(40000),ROUT(40000),SLOFF(2),RANG(2,2)
	INTEGER*4 IN(40000),IOUT(40000)
	INTEGER*2 HIN(80000),HOUT(80000)
	CHARACTER*80 MSG
	CHARACTER*7 IFMT, OFMT, UFMT
C
	EQUIVALENCE (CIN,DIN,RIN,IN,HIN), (COUT,DOUT,ROUT,IOUT,HOUT)
	EQUIVALENCE (SLOFF(1),GAIN), (SLOFF(2),OFF)
C
	CALL XVMESSAGE(' C VERSION 5',' ')
C
	CALL XVUNIT(INUNIT,'INP',1,ISTAT,0)
	CALL XVOPEN(INUNIT,ISTAT,'OPEN_ACT','SA','IO_ACT','SA',0)
	CALL XVGET(INUNIT,ISTAT,'PIX_SIZE',NBPP,'FORMAT',IFMT,0)
	CALL XVSIZE(ISL,ISS,NL,NS,NLIN,NSIN)
C
	IF (IFMT .EQ. 'WORD') IFMT = 'HALF'
	IF (IFMT .EQ. 'REAL' .AND. NBPP .EQ. 8) IFMT = 'DOUB'
C
	IF (IFMT.EQ.'BYTE') THEN
	    CALL XVCLOSE(INUNIT,ISTAT,0)
	    CALL XVOPEN(INUNIT,ISTAT,'OPEN_ACT','SA','IO_ACT','SA',
     .	 		'U_FORMAT','HALF',0)
	END IF
C							 OUTPUT FORMAT PARAMETER
	CALL XVPARM('OFORM',OFMT,I,IDEF,0)
	IF (IDEF.EQ.1) THEN
	    IF (IFMT.EQ.'BYTE') THEN
		OFMT = 'HALF'
	    ELSE
		OFMT = 'BYTE'
	    END IF
	END IF
C								  OPEN OUTPUT
	UFMT = OFMT
	IF (OFMT .EQ. 'BYTE') UFMT = 'HALF'
	CALL XVUNIT(IOUTUNIT,'OUT',1,ISTAT,0)
	CALL XVOPEN(IOUTUNIT,ISTAT,'OP','WRITE','U_NL',NL, 'U_NS',NS,
     .             'O_FORMAT', OFMT, 'U_FORMAT', UFMT,
     .		   'OPEN_ACT', 'SA', 'IO_ACT', 'SA', 0)
C								  SLOPE/OFFSET
	CALL XVPARM( 'SO', SLOFF, I, IDEF, 0)
	IF (IDEF.EQ.1) THEN
	    CALL XVPARM( 'IRANGE', RANG(1,1), I ,IRDEF, 0)
	    CALL XVPARM( 'ORANGE', RANG(1,2), I ,ORDEF, 0)
	    IF (IRDEF.NE.ORDEF) THEN
		CALL XVMESSAGE(
     +          ' ** SPECIFY BOTH IRANGE/ORANGE, OR NEITHER **',' ')
		CALL ABEND
	    ENDIF
	    IF (IRDEF.EQ.0) THEN
		GAIN = (RANG(1,2)-RANG(2,2))/(RANG(1,1)-RANG(2,1))
		OFF  = RANG(1,2)-GAIN*RANG(1,1)
	    END IF
	END IF
C
	WRITE (MSG,100) GAIN,OFF
  100	FORMAT(' DNout =',F12.5,'*IN',SP,F12.5,S)
	CALL XVMESSAGE(MSG,' ')
	MSG = MSG(9:35)
	CALL XLADD(IOUTUNIT,'HISTORY','DNOUT',MSG,STAT,'FORMAT',
     +		   'STRING',0)
C						  FINAL IN/OUT FORMAT MESSAGE 
	WRITE (MSG,200) IFMT(1:4)
  200	FORMAT(' Input Format = ',A4)
	CALL XVMESSAGE(MSG,' ')
	WRITE (MSG,300) OFMT(1:4)
  300	FORMAT(' Output Format = ',A4)
	CALL XVMESSAGE(MSG,' ')
C
	IF (OFMT .EQ. 'BYTE') THEN
	    MINDN = 0
	    MAXDN = 255
	ELSE IF (OFMT .EQ. 'HALF') THEN
	    MINDN = -32768
	    MAXDN = 32767
	END IF
C								  MAIN LINE LOOP
C							      byte or half input
	IF (IFMT.EQ.'BYTE' .OR. IFMT.EQ.'HALF') THEN
	    IF (OFMT.EQ.'BYTE' .OR. OFMT.EQ.'HALF') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,HIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			HOUT(I) = MIN(MAXDN, MAX(MINDN, 
     +				      NINT(GAIN*HIN(I)+OFF)))
		    END DO
		    CALL XVWRIT(IOUTUNIT,HOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'FULL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,HIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			IOUT(I) = NINT(GAIN*HIN(I)+OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,IOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'REAL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,HIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			ROUT(I) = GAIN*HIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,ROUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'DOUB') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,HIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			DOUT(I) = GAIN*HIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,DOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'COMPLEX') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,HIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			COUT(I) = CMPLX(GAIN*HIN(I) + OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,COUT,ISTAT,0)
		END DO
	    END IF
C								      full input
	ELSE IF (IFMT.EQ.'FULL') THEN
	    IF (OFMT.EQ.'BYTE' .OR. OFMT.EQ.'HALF') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,IN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			HOUT(I) = MIN(MAXDN, MAX(MINDN, 
     +				      NINT(GAIN*IN(I)+OFF)))
		    END DO
		    CALL XVWRIT(IOUTUNIT,HOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'FULL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,IN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			IOUT(I) = NINT(GAIN*IN(I)+OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,IOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'REAL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,IN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			ROUT(I) = GAIN*IN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,ROUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'DOUB') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,IN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			DOUT(I) = GAIN*IN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,DOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'COMPLEX') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,IN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			COUT(I) = CMPLX(GAIN*IN(I) + OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,COUT,ISTAT,0)
		END DO
	    END IF
C								      real input
	ELSE IF (IFMT.EQ.'REAL') THEN
	    IF (OFMT.EQ.'BYTE' .OR. OFMT.EQ.'HALF') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,RIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			HOUT(I) = MIN(MAXDN, MAX(MINDN, 
     +				      NINT(GAIN*RIN(I)+OFF)))
		    END DO
		    CALL XVWRIT(IOUTUNIT,HOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'FULL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,RIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			IOUT(I) = NINT(GAIN*RIN(I)+OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,IOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'REAL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,RIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			ROUT(I) = GAIN*RIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,ROUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'DOUB') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,RIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			DOUT(I) = GAIN*RIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,DOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'COMPLEX') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,RIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			COUT(I) = CMPLX(GAIN*RIN(I) + OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,COUT,ISTAT,0)
		END DO
	    END IF
C								real*8 input
	ELSE IF (IFMT.EQ.'DOUB') THEN
	    IF (OFMT.EQ.'BYTE' .OR. OFMT.EQ.'HALF') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,DIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			HOUT(I) = MIN(MAXDN, MAX(MINDN, 
     +				      NINT(GAIN*DIN(I)+OFF)))
		    END DO
		    CALL XVWRIT(IOUTUNIT,HOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'FULL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,DIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			IOUT(I) = NINT(GAIN*DIN(I)+OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,IOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'REAL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,DIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			ROUT(I) = GAIN*DIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,ROUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'DOUB') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,DIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			DOUT(I) = GAIN*DIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,DOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'COMPLEX') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,DIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			COUT(I) = CMPLX(GAIN*DIN(I) + OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,COUT,ISTAT,0)
		END DO
	    END IF
C								complex input
	ELSE IF (IFMT.EQ.'COMPLEX') THEN
	    IF (OFMT.EQ.'BYTE' .OR. OFMT.EQ.'HALF') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,CIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			HOUT(I) = MIN(MAXDN, MAX(MINDN, 
     +				      NINT(GAIN*ABS(CIN(I))+OFF)))
		    END DO
		    CALL XVWRIT(IOUTUNIT,HOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'FULL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,CIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			IOUT(I) = NINT(GAIN*ABS(CIN(I))+OFF)
		    END DO
		    CALL XVWRIT(IOUTUNIT,IOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'REAL') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,CIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			ROUT(I) = GAIN*ABS(CIN(I)) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,ROUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'DOUB') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,CIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			DOUT(I) = GAIN*ABS(CIN(I)) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,DOUT,ISTAT,0)
		END DO
	    ELSE IF (OFMT .EQ. 'COMPLEX') THEN
		DO LINE=ISL,ISL+NL-1
		    CALL XVREAD(INUNIT,CIN,ISTAT,'LINE',LINE,
     +				'SAMP',ISS,'NSAMPS',NS,0)
		    DO I=1,NS
			COUT(I) = GAIN*CIN(I) + OFF
		    END DO
		    CALL XVWRIT(IOUTUNIT,COUT,ISTAT,0)
		END DO
	    END IF
        END IF
C
	CALL XVMESSAGE(' CONVERSION COMPLETE',' ')
	CALL XVCLOSE( IUN, STAT, 0)
	CALL XVCLOSE( OUN, STAT, 0)
	RETURN
	END

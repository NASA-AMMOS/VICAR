procedure
refgbl $echo
refgbl $autousage
body
let $autousage="none"
let _onfail="continue"
let $echo="yes"
! Prepare test file
gen rtgtest1 15 15 ival=0 linc=0 sinc=0
! Note this test heavily uses the program ADL.  As of 13 July 1994,
! ADL has not yet been ported.
adl rtgtest1 rtgtest2 add=(3,2,10,10,10, 3,8,3,11,6, 1,14,2,14,10)
adl rtgtest2 rtgtest3 add=(1,2,3,8,7, 2,7,5,7,12, 2,6,3,3,6)
adl rtgtest3 rtgtest4 add=(-1,7,6,7,6, -3,7,10,7,10)
!
! Display test file
!
list rtgtest4
! Make another copy of test file with EVERY element just offset by +1
f2 inp=rtgtest4 out=rtgtest5 function="IN1+1"
!
! Run RASTOGRAF  with 2 dimensions, then list the resulting IBIS file
! uses size parameter to look only at segments in upper left quadrant
! Not including DIM should make it default to 2.  Not including BACK
! should default it to 0.
rastograf rtgtest4 testgraf size=(1,1,7,7)
ibis-list testgraf gr1dim=2 nr=15
let $echo="no"
write "You should have seen:"
write "Rows: 1:15"
write " ------------- --------------"
write " C:1           C:2          "
write " ------------- --------------"
write " 2             3             "
write " 4             5             "
write " 5             5             "
write " 7             7             "
write " 7             5             "
write " 0             0             "
write " 3             6             "
write " 3             6             "
write " 0             0             "
write " 4             4             "
write " "
write " 5             4             "
write " 6             3             "
write " 0             0             "
write " 0             0             "
write " 0             0             "
write ""
let $echo="yes"
!
! Run RASTOGRAF with 3 dimensions, then list the resulting IBIS file
! This time, I will specify the window to contain all of my line
! segments using the sl/ss nl/ns parameters.  Also, I am testing the
! BACK(ground) parameter by using a non-zero value.
rastograf rtgtest5 testgraf sl=2 ss=1 nl=11 ns=13 dim=3 back=1
ibis-list testgraf gr1dim=3 nr=25
let $echo="no"
write "You should have seen:"
write "Rows: 1:25"
write " ------------- ------------- --------------"
write " C:1           C:2           C:3          "
write " ------------- ------------- --------------"
write " 1             3             2             "
write " 2             4             2             "
write " 3             4             2             "
write " 5             6             2             "
write " 0             0             0             "
write " 1             10            4             "
write " 5             10            4             "
write " 0             0             0             "
write " 2             6             3             "
write " 5             3             3             "
write " "
write " 0             0             0             "
write " 6             5             3             "
write " 6             12            3             "
write " 0             0             0             "
write " 7             3             4             "
write " 10            6             4             "
write " 0             0             0             "
write " 7             7             2             "
write " 7             7             2             "
write " 0             0             0             "
write " "
write " 7             10            4             "
write " 9             10            4             "
write " 0             0             0             "
write " 0             0             0             "
write " 0             0             0             "

!
end-proc

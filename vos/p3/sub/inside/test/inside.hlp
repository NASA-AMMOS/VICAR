1  INSIDE

    To determine whether a specified point lies within 
    or on a specified polygon.

    INSIDE is a LOGICAL FUNCTION, not a subroutine.  It
    returns the value TRUE if the specified point lies inside or on the
    boundary of the polygon.  It returns FALSE otherwise.


  FORTRAN Calling Sequence:      IF  ( INSIDE(POINT,CORNER,N) ) ...
  C Calling Sequence:            if  ( zinside(point,corner,n) ) ...


2  ARGUMENTS

     POINT     is a REAL*4 array (2 elements) containing x and y for
               the point of interest.

     CORNER    is a REAL*4 array, dimensioned (2,N)
               (or (2,M) where M is some number >= N.
               CORNER(1,I) is the x coordinate of the I-th vertex of
               a polygon.
               CORNER(2,I) is the y coordinate.
               For zinside the declaration should be
               float [n][2], or float [M][2] where M is some number >= n.
             

     N         is an INTEGER*4 variable or constant containing the
               number of vertices of the polygon.
               (n is passed by value for zinside.)
2  HISTORY

     Original Programmers: John Kreznar & Denis A. Elliott, about 1977
     Current Cognizant Programmer: Gary Yagi
     Source Language: Fortran

 Revision History
  92-12-29 ...SP.... Made portable.  Added zinside for calls from C.
  03-03-21 ...REA... Rewritten to fix bug and remove restriction of
                     25 vertices.
  03-03-30 ...GMY... Implemented Brian Carcich algorithm

2  OPERATION

     INSIDE generates a semi-infinite ray (parallel to the X axis) from 
     the point of interest toward infinity in the +x direction.  The point is
     inside if this ray intersects an odd number of edges of the polygon, 
     and is outside if it intersects an even number.

     A special case occurs when the ray passes through a vertex.  The original
     code treated this by adding a small offset to the given point to make it
     "improbable" that this case would occur.  The current code treats this
     case correctly and is based on an algorithm submitted by Brian Carcich of
     Cornell University.

process help=*
PARM INP TYPE=STRING COUNT=(1:3)
PARM OUT TYPE=STRING COUNT=(1:3)
PARM UVW TYPE=STRING COUNT=(0:3) DEFAULT=--

PARM UVW_VECTOR TYPE=REAL COUNT=(0:3) DEFAULT=(0,0,-1)
PARM UVW_COORD TYPE=STRING COUNT=(0:1) DEFAULT="FIXED"

PARM NAVTABLE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM INNER_RADIUS TYPE=REAL COUNT=1 DEFAULT=0.06
PARM OUTER_RADIUS TYPE=REAL COUNT=1 DEFAULT=0.075
PARM PATCH_RADIUS TYPE=REAL COUNT=(0:1) DEFAULT=--

PARM ROUGH_RING TYPE=REAL COUNT=1 DEFAULT=0.015
PARM ROUGH_OVERALL TYPE=REAL COUNT=1 DEFAULT=0.04
PARM BAD_ROUGH TYPE=REAL COUNT=1 DEFAULT=1.0

PARM FILTER_SCALE TYPE=REAL COUNT=1 DEFAULT=1.0
PARM MAX_WINDOW TYPE=INTEGER COUNT=1 DEFAULT=150
PARM MIN_POINTS TYPE=INTEGER COUNT=1 DEFAULT=6
PARM X_CENTER TYPE=REAL COUNT=1 DEFAULT=2.0
PARM Y_CENTER TYPE=REAL COUNT=1 DEFAULT=-0.4
PARM BOX_RADIUS TYPE=REAL COUNT=1 DEFAULT=2.0
PARM DO_RING TYPE=KEYWORD VALID=(DO_RING,NO_RING) DEFAULT=DO_RING
PARM SPHERE_RADIUS TYPE=REAL COUNT=1 DEFAULT=0.0

PARM DO_CURVATURE TYPE=KEYWORD VALID=(DO_CURVATURE,NO_CURVATURE) DEFAULT=NO_CURVATURE
PARM BAD_CURVE TYPE=REAL COUNT=1 DEFAULT=1.0
PARM CONVEX_HIGH TYPE=REAL COUNT=(0:1) DEFAULT=0.035
PARM CONVEX_LOW TYPE=REAL COUNT=(0:1) DEFAULT=0.022
PARM CONCAVE_LOW TYPE=REAL COUNT=(0:1) DEFAULT=0.01
PARM CONCAVE_HIGH TYPE=REAL COUNT=(0:1) DEFAULT=0.02
    
PARM CONFIG_PATH STRING DEFAULT="$MARS_CONFIG_PATH"
PARM POINT_METHOD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM NOSITE TYPE=KEYWORD COUNT=(0:1) VALID=NOSITE DEFAULT=--

PARM DATA_SET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM DATA_SET_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM RELEASE_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCT_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_INST TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_TYPE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM RSF TYPE=STRING COUNT=0:100 DEFAULT=--
PARM DEBUG_RSF TYPE=KEYWORD COUNT=0:1 VALID=DEBUG_RSF DEFAULT=--
PARM COORD TYPE=KEYWORD VALID=("FIXED", "INSTRUMENT", "SITE", "ROVER", +
        "LOCAL_LEVEL", "RMECH") DEFAULT="ROVER"
PARM COORD_INDEX TYPE=INTEGER COUNT=0:10 DEFAULT=--
PARM FIXED_SITE TYPE=INTEGER COUNT=0:1 DEFAULT=--
PARM SOLUTION_ID TYPE=STRING COUNT=0:1 DEFAULT=--

PARM OMP_ON TYPE=KEYWORD VALID=(OMP_ON,OMP_OFF) DEFAULT=OMP_ON

END-PROC

.TITLE
VICAR program MSLROUGH.

.HELP
PURPOSE:

MSLROUGH computes a measure indicating the roughness of the surface for
each pixel, given XYZ and UVW (surface normal) images or an XYZ image and a 
single UVW surface normal vector as input.  If a single UVW vector is 
provided, then it is used at every point in the XYZ input image file.  This
roughness value is a floating-point number representing the maximum peak-to-
peak deviation from the plane perpendicular to the normal.

By requesting the program calculate curvature instead, the program calculates
two floating point numbers, an estimate of concavity and convexity. Concavity
is calculated by finding, in the filtered area for each point, the difference 
between the farthest point below the surface plane and the mean of all the 
distances to surface plane. Convexity is similarly calculated for the farthest
point above the surface plane.

This program is very similar to MARSROUGH, but the algorithm is tuned for
the specifics of the MSL arm.  It is not mission-specific per se; it could
be used for any data for which the algorithm applies. It is being used for 
M2020 as well.

The inputs for MSLROUGH are an XYZ image such as that created by the MARSXYZ
program, and a UVW image such as that created by MARSUVW.  These can each
be single 3-band files or three 1-band files; see MARSXYZ and MARSUVW for
details.  Alternatively, the input UVW can be a single surface normal vector,
the vector and its coordinate system are provided as input through the 
input parameters UVW_VECTOR and UVW_COORD respectively.  If the UVW surface
normal vector(s) are provided both as an input image and as an input single
vector, then the image takes precedence and the single vector is ignored.

The output of MSLROUGH when calculating roughness is a single 2- or 3-band 
file of type REAL, containing flags indicating whether the data met roughness 
criteria, as well as the actual roughness values (see below for details).  
As with XYZ images, the output image may contain holes (missing data), defined 
by MISSING_CONSTANT.

The output of MSLROUGH when calculating curvature is a single 3-band file of 
type REAL, containing flags indicating whether the data met curvature criteria,
as well as the two curvature values (see below for details). As with XYZ images, 
the output image may contain holes (missing data), defined by MISSING_CONSTANT.
Curvature is only calculated for the patch region. -do_ring is not valid when
calculating curvature.

There will likely be many more holes than in the input images, since the
roughness algorithm requires a patch around each pixel.

EXECUTION:

mslrough inp=data.xyz out=data.rough uvw=data.uvw
or
mslrough inp=data.xyz out=data.rough uvw_vector=\(<x>,<y>,<z>\) uvw_coord="<type>"
where:
data.xyz is an input 3-band image of type REAL with the X, Y and Z values
at that pixel in meters (the unit is actually irrelevant).
In the first case, data.uvw is an input 3-band image of type REAL with the 
U, V, and W components of the unit vector for each pixel.
In the second case, <x>, <y> and <z> are replaced with the numeric values
of the single surface normal vector components, and <type> is replaced with
the coordinate system name in which the UVW vector is given.

Any program producing 3D position could be used; marsxyz is simply an example.

To generate curvature instead of roughness:
mslrough inp=data.xyz out=data.rough uvw=data.uvw -do_curvature 

.PAGE
METHOD:

The actual algorithm and core code was developed by Matt Robinson (based on
earlier MER code from Chris Leger), both from Section 347.

The surface roughness algorithm attempts to quantify the suitability of a
surface for placement of the MSL Drill or Dust Removal Tool (DRT).

At each point in the image, the surface normal is used to define a reference
plane.  The XYZ values of pixels that meet the criteria (below) are gathered,
and the distance from them to the plane is computed.  Outliers are thrown
out (see FILTER_SCALE).  For the remainders, the minimum and maximum distances
from the plane are found.  Roughness is defined as the distance between this
min and max. 

Two roughnesses are computed.  The first is an overall measurement based on
the PATCH_RADIUS and considers all points within that radius of the central
pixel.  For MSL, this is used for the DRT, and the drill body.  The second
(used only if -DO_RING is set) is a ring between the INNER_RADIUS and
OUTER_RADIUS.  For MSL, this is used for the drill stabilizer bars. The parameters
allow for a gap between the patch and the ring:

     -------ring outer-------             
    / ++++++++++++++++++++++++\
   /++++----ring innner----++++\ 
  /+++/                     \+++\
 |+++|                       |+++|
 |+++|     -patch outer-     |+++|
 |+++|    / ........... \    |+++|
 |+++|   |.............. |   |+++|     


 However the patch can include or extend beyond the outer ring as it does in MSL: 

     ---ring outer/patch ---
   / ++++++++++++++++++++++++\
  /++++----ring innner----++++\ 
 /+++/.....................\+++\
|+++|.......................|+++|
|+++|.......................|+++|
|+++|.......................|+++|
|+++|.......................|+++|

In each case, the computed roughness is compared to a threshold, which
determines whether the point is "good" or not.

The points are additionally filtered by a XYZ-space window (X_CENTER, Y_CENTER,
BOX_RADIUS) which encloses the entire arm workspace, and a local pixel-space
window centered on each pixel (MAX_WINDOW).  If fewer than MIN_POINTS pixels
remain, roughness is not calculated for that pixel.

The algorithm for the curvature calculation was developed by Kris Wehage and 
Curtis Collins from section 347.

When used to computer curvature, the algorithm for point selection and filtering
are identical to roughness. Instead of calculating the peak to peak distance in
the area, concavity reports the distance between the farthest point below
the surface plane and the mean distance of the other points within the specified 
area. Concavity reports the distance between the farthest point above the surface
plane and the mean.

Concavity has two thresholds that are checked CONCAVE_HIGH, a more relaxed
threshold that is farther from the mean plane, and CONVCAVE_LOW, a more stringent
threshold closer to the mean plane. Convexity has two parameters CONVEX_HIGH and
CONVEX_LOW which identical purposes. The thresholds are arranged as:

 ---- curvature: convexity threshold high ----

 ---- curvature: convexity threshold low  ----

 +++++++++++ surface mean plane ++++++++++++

 ---- curvature: concavity threshold low  ----
 
 ---- curvature: concavity threshold high ----

.page
OUTPUT FORMAT:

The output when calculating roughness is a 2- or 3-band file in REAL format.
The output when calculating curvature is a 3-band file in REAL format.

The first band is the State.  This band consists of a set of flags, stored in
float format simply because files must be of a consistent data format.  The
possible values for roughness are:

0.0 = No solution
1.0 = Both ring and overall roughnesses exceed thresholds
2.0 = Overall roughness (only) exceeds its threshold
3.0 = Ring roughness (only) exceeds its threshold
4.0 = Roughnesses within threshold (good)

Note that if -NO_RING is specified, then the values 1.0 an 3.0 cannot occur.

The possible values for curvature are:

0.0 = No solution
1.0 = Both concavity and convexity exceed thresholds
2.0 = Convexity exceeds one or more threshold
3.0 = Concavity exceeds one or more threshold
4.0 = -- skipped --
5.0 = Curvature within high thresholds, exceeded one or more low threshold
6.0 = Curvature within all low (and high) thresholds (good)

For roughness products:

The second band is the actual Overall roughness measurement.  Unlike most
other products, 0.0 does NOT indicate a missing value.  Rather, the value
in BAD_ROUGH (default 1.0) is used.  This value shows up in MISSING_CONSTANT
in the label.

The third band contains the Ring roughness measurement, and is present only
if -DO_RING is specified.  It is otherwise similar to the second band.

The roughness will be expressed in units defined by the coordinate system
specified by the COORD and COORD_INDEX parameters.

For curvature products:

The second bad is the actual concavity measurement. The third band is the 
convexity measurement. Unlike most other products, 0.0 does NOT indicate a 
missing value.  Rather, the value in BAD_CURVE (default 1.0) is used. This
value shows up in MISSING_CONSTANT in the label.

The curvature will be expressed in units defined by the coordinate system
specified by the COORD and COORD_INDEX parameters.

.PAGE

HISTORY:
2011-11-21 Initial mslrough by B. Deen, based on code from Matt Robinson (347)
COGNIZANT PROGRAMMER: B. Deen
2020-05-25 updated by E.  Sarkissian to optionally use a single surface normal
vector UVW instead of many provided through an input image file.
2020-10-23 updated by B. Crocco to optionally calculate curvature using code from
Kris Wehage and Curtis Collins (347)

.LEVEL1
.VARI INP
Input XYZ image.
Must be 1 3-band file
or (x,y,z) triplet.

.VARI OUT
Output file.
Must be 1 filename

.VARI UVW
Input UVW image.
Must be 1 3-band file
or (u,v,w) triplet.

.VARI UVW_VECTOR
Input single UVW vector.
Must be 3D vector.

.VARI UVW_COORD
Coordinate system in
which UVW_VECTOR
is given.

.VARI NAVTABLE
Corrected navigation
filename.

.VARI INNER_RADIUS
Inner radius of ring.

.VARI OUTER_RADIUS
Outer Radius of ring.

.VARI PATCH_RADIUS
Radius of the
patch. Defaults to ring
outer radius.

.VARI ROUGH_RING
Maximum roughness
for ring.

.VARI ROUGH_OVERALL
Maximum roughness for 
patch.

.VARI SPHERE_RADIUS
An optional 3D radius to exclude
points from testing

.VARI BAD_ROUGH
Value that represents
missing or invalid
roughness.

.VARI FILTER_SCALE
Sigma multiplier for
outlier rejection filter.

.VARI MAX_WINDOW
Max window size (pixels).

.VARI MIN_POINTS
Min # of points in the
region needed to accept
roughness value.

.VARI X_CENTER
Center of bounding box (m).

.VARI Y_CENTER
Center of bounding box (m).

.VARI BOX_RADIUS
Half-width of bounding box
(in meters).

.VARI DO_RING
Specifies whether or not to
compute the ring roughness.

.VARI DO_CURVATURE
Specifies whether to
compute curvature not roughness.

.VARI BAD_CURVE
Value that represents
missing or invalid
curvature.

.VARI CONVEX_HIGH
Far threshold for allowed  
convex curvature 

.VARI CONVEX_LOW
Closer threshold for allowed  
convex curvature 

.VARI CONCAVE_LOW
Closer threshold for allowed  
concave curvature

.VARI CONCAVE_HIGH 
Far threshold for allowed  
concave curvature

.VARI CONFIG_PATH
Path used to find
configuration/calibration
files.

.VARI POINT_METHOD
Specifies a mission-
specific pointing
method to use

.VARI NOSITE
Disables coordinate
system sites.

.VARI RSF
Rover State File(s) to use.

.VARI DEBUG_RSF
Turns on debugging of RSF
parameter.

.VARI COORD
Coordinate system to use.

.VARI COORD_INDEX
Coordinate system index for
some COORD/mission combos.

.VARI FIXED_SITE
Which site is FIXED for
rover missions.

.VARI SOLUTION_ID
Solution ID to use for
COORD_INDEX

.VARI OMP_ON
Turns on or off parallel
processing (default: on)

.VARI DATA_SET_NAME
Specifies the full name given
to a data set or a data product.

.VARI DATA_SET_ID
Specifies a unique alphanumeric
identifier for a data set or data
product.

.VARI RELEASE_ID
Specifies the unique identifier
associated with the release to the
public of all or part of a data set.
The release number is associated with
the data set, not the mission.

.VARI PRODUCT_ID
Specifies a permanent, unique
identifier assigned to a data
product by its producer.

.VARI PRODUCER_ID
Specifies the unique identifier
of an entity associated with the
production a data set.

.VARI PRODUCER_INST
Specifies the full name of the
identity of an entity associated
with the production of a data set.

.VARI TARGET_NAME
Specifies a target.

.VARI TARGET_TYPE
Specifies the type of a named target.

.LEVEL2
.VARI INP
Input files contain the XYZ coordinates. If three filenames are given,
they all should be single band files each containing X, Y and Z values
in that order.  If only one filename is given, it should be a 3-band
file with bands in (X,Y,Z) order.

The input files are in REAL (float) format.

.VARI OUT
Output file containing the roughness values.

The file will be in 2 or 3 band REAL (float) format.  See "OUTPUT FORMAT"
in the main help for the file format.

.VARI UVW
Input files contain the UVW coordinates. If three filenames are given,
they all should be single band files each containing U, V and W values
in that order.  If only one filename is given, it should be a 3-band
file with bands in (U,V,W) order.

UVW coordinates provided through the image files take precedence over the
single UVW vector provided through UVW_VECTOR parameter

The input files are in REAL (float) format.

.VARI UVW_VECTOR
A single surface normal vector to be used at every XYZ point.  The image 
file(s) input through UVW parameter provide one UVW vector for each point of
the XYZ image file(s) input through INP parameter.  However, the caller can
use UVW_VECTOR parameter to provide as input only one UVW parameter to be
used at every point in the entire XYZ image.  UVW parameter takes precedence
over UVW_VECTOR parameter.

.VARI UVW_COORD
Coordinate system of the single UVW vector provided through  UVW_VECTOR
parameter.  This parameter is also ignored if UVW_VECTOR is ignore.

.VARI INNER_RADIUS
Inner radius (in XYZ space) of the ring, in meters.  Note that INNER_RADIUS
must be less than (or equal to) OUTER_RADIUS.  INNER_RADIUS is not used
if -NO_RING is specified (internally, it is set equal to OUTER_RADIUS).

Suggested value is 0.06 for MSL Drill, N/A for MSL DRT.

.VARI OUTER_RADIUS
Outer radius (in XYZ space) of the ring, in meters.  Also the radius of
the overall roughness circle.

Suggested value is 0.075 for MSL Drill, 0.035 for MSL DRT.

.VARI RING_OUTER_RADIUS
Outer radius (in XYZ space) of the ring, in meters.  Also the radius of
the overall roughness circle.

Suggested value is 0.075 for MSL Drill, 0.035 for MSL DRT.

.VARI ROUGH_RING
Upper limit on roughness values for the ring.  If a valid roughness exceeds
this value, it will change the flag in band 1 of the output.  Note that unlike
MARSROUGH, roughness values are not clipped; the ring roughness in band 3 (if
present) will show values greater than this threshold.

The parameter is ignored if -NO_RING is specified.

Suggested value is 0.015 for Drill, N/A for MSL DRT.

.VARI ROUGH_OVERALL
Upper limit on overall roughness values (across the entire OUTER_RADIUS
circle).  If a valid roughness exceeds this value, it will change the flag
in band 1 of the output.  Note that unlike MARSROUGH, roughness values are
not clipped; the overall roughness in band 2 will show values greater than
this threshold.

Suggested value is 0.04 for Drill, 0.005 for MSL DRT.

.VARI SPHERE_RADIUS
This setting is an optional test to rejects points that are nearby in pixels
but distant in meters (3D). The use case is to filter points that are within
the cylindrical projection but are in front or behind the point being tested
(happens often with near horizontal normals). This test is not ideal as it
will include points on the backsides of small peaks behind the point of 
interest and will ignore real hazards such as overhangs farther than the 
radius along the direction of the normal. A good setting might be a bit  
larger than the largest cylindrical radius provided (+ ~10% is what is 
used currently)

.VARI BAD_ROUGH
Value to use to indicate lack of roughness data.  Must be >= ROUGH_RING and
ROUGH_OVERALL.  This value is reflected in the MISSING_CONSTANT label item.

Suggested value is 1.0.

.VARI FILTER_SCALE
This parameter is used to control the outlier filter.  Points with a roughness
larger than filter*sigma where sigma is the standard deviation of all points
within outer_radius, will be discarded.  This helps to eliminate spikes
and noise hits in the XYZ data.

Suggested value is 1.0.

.VARI MAX_WINDOW
Conservative guess at maximum window size (in line/sample space) in which
points falling into the radius will be found.  This is used to prevent
infinite loops, and a zero or negative value will cause a default of
MIN(num_rows, num_cols)/8 to be used (which should be acceptable given the
spatial resolution of the stereo data relative to the radius).

Suggested value is 150 pixels, which allows full coverage of the ring at
1mm/pixel close-in hazcam resolution.

.VARI MIN_POINTS
Minimum number of points in the region required to compute a roughness.
Should be greater than or equal to MIN_POINTS used in the MARSUVW program.

Suggested value is 6 or higher.

.VARI X_CENTER
Center of bounding box (in XYZ space).  Points lying outside the box will not
have roughness computed for them.  This is used to limit computation to the
arm workspace.  The bounding box is measured in the coordinate system
specified by COORD (usually ROVER).

Suggested value is 2.0 for MSL.

.VARI BOX_RADIUS
Half-width of bounding box, in meters.  Points more than this distance away
from X/Y_CENTER in either X or Y will not be computed (note, it is an axis-
aligned square box, not a circle).

.VARI DO_RING
Turns on or off ring computation.  The default is to do both overall and
ring roughness, which is appropriate for the MSL Drill.  Specifying -NO_RING
turns off the ring, leaving only overall roughness.  This changes the output
from 3 to 2 bands, limits the valid flag values in band 1, and may cause
mission-specific output label differences (for example, on MSL, -DO_RING is
assumed to be for the Drill, while -NO_RING is assumed to be for the DRT).

The INNER_RADIUS and ROUGH_RING parameters are ignored if -NO_RING is set.

.VARI CONFIG_PATH
A colon-separated list of directories in which to look for configuration
and calibration files.  Environment variables are allowed in the list
(and may themselves contain colon-separated lists).  The directories are
searched in order for each config/cal file when it is loaded.  This allows
multiple projects to be supported simultaneously, and allows the user to
override any given config/cal file.  Note that the directory structure below
the directories specified in this path must match what the project expects.
For example, Mars 98 expects flat fields to be in a subdirectory named
"flat_fields" while Mars Pathfinder expects them to be directly in the
directory specified by the path (i.e. no intermediate subdirectories).

.VARI POINT_METHOD
Specifies a mission-specific pointing method to use.  Normally this
parameter is not used, in which case the "default" pointing methods
are used.  Some missions may have special, or alternate, pointing
methods available, which are indicated by this string (for example,
backlash models, using arm joint angles instead of x/y/z/az/el, etc).
A substring search is used, so multiple methods (where that makes sense)
can be specified by separating the keywords with commas.

Note that nav files created using one pointing method will most likely
not be compatible with a mosaic created using a different pointing method.

The methods available vary per mission, but some methods available at
the time of this writing are:

BACKLASH : Mars 98 SSI only.  Selects a backlash pointing model,
which adjusts the telemetered azimuth and elevation values based on
knowledge of the camera's mechanical backlash and the direction the
motor was travelling when the image was taken.

.VARI NOSITE
Disables all label-derived parameters to the Site mechanism which underlies
coordinate systems.  This forces all sites to be identical, with all rotations
and offsets set the same.  In the case of MPF or Mars 98, this disables
the lander quaternion and offset (sets them to identity and 0, respectively).
This option should not be used with images taken from different vantage
points (e.g. the spacecraft moved, or mixing a lander and a rover) or
invalid results will be obtained.  The use of this option invalidates the
Fixed coordinate frame; any values reported in the Fixed frame will not
correctly reflect the orientation of the lander/rover.

Obviously, this option should be rarely used; it is intended for when the
image labels defining the site are invalid or inconsistent.

.VARI DATA_SET_NAME
The DATA_SET_NAME typically identifies the instrument that acquired the
data, the target of that instrument, and the processing level of the data.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_NAME.

.VARI DATA_SET_ID
The DATA_SET_ID value for a given data set or product is constructed
according to flight project naming conventions.  In most cases the
DATA_SET_ID is an abbreviation of the DATA_SET_NAME.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_ID.

.VARI RELEASE_ID
When a data set is released incrementally, such as every three months during
a mission, the RELEASE_ID is updated each time part of the data set is released.
For each mission(or host id if multiple spacecrafts), the first release of a data
set should have a value of "0001".
This value is copied to the output label, property IDENTIFICATION,
keyword RELEASE_ID.

.VARI PRODUCT_ID
Specifies a permanent, unique identifier assigned to a data product by
its producer. Most commonly, it is the filename minus the extension.
This value is copied to the output label, property IDENTIFICATION,
keyword PRODUCT_ID.

.VARI PRODUCER_ID
Specifies the unique identifier of an entity associated with the
production of a data set. This value is copied to the output label,
property IDENTIFICATION, keyword PRODUCER_ID.

.VARI PRODUCER_INST
Specifies the identity of a university, research center, NASA center or other
institution associated with the production of a data set.
This value is copied to the output label, property IDENTIFICATION, keyword
PRODUCER_INSTITUTION_NAME.

.VARI TARGET_NAME
Specifies a target.  The target may be a planet, satelite, ring, region, feature,
asteroid or comet.  This value is copied to the output label, property
IDENTIFICATION, keyword TARGET_NAME.

.VARI TARGET_TYPE
Specifies the type of a named target. This value is copied to the output
label, property IDENTIFICATION, keyword TARGET_NAME.

.VARI RSF
Rover State File.  This is a list of filenames to load containing
Rover State information.  These files contain position and orientation
information for a rover (or other mobile spacecraft) at various sites.
They are in XML format.  See the "Rover Motion Counter (RMC) Master File SIS"
for details on these files.

Rover State Files have a priority order.  The files listed first have
the highest priority.

Environment variables may be used in the list.

For MER, if a directory is specified, then that directory is searched for
RMC Master files and any found are loaded.  The directory structure and
filename convention is covered in the RMC SIS.  The directory specified
is the one containing "master", so if <dir> is the name specified in the
RSF parameter, the following files will be searched for:

<dir>/master/<mission>_Master.svf
<dir>/master/<mission>_Site_<n>_Master.rvf

The name of each file loaded is printed to the stdout log for reference.

.VARI DEBUG_RSF
If enabled, this causes the internal database of RMC locations to be
printed out to the stdout log.  This is after the RSF files have been
loaded and the coordinate systems read from the input label(s).

.VARI COORD
The coordinate system to use for the output roughness (really just determines
the unit of measurement).  The interpretation of the values is dependent on
the mission.  Some representative missions are listed here:

Fixed - The Fixed frame.  This is the ultimate reference frame
    (see also FIXED_SITE for rover missions).
Instrument - (default) The "natural" frame for the instrument 
    (of the first input image).  MPF: Lander or Rover; M98: MVACS; MER: Rover.
Site - A major Site frame.  For rover missions, COORD_INDEX specifies which.VARI Y_CENTER.VARI DO_CURVATURE
Specifies whether to
compute curvature not roughness.

.VARI BAD_CURVE
Value that represents
missing or invalid
curvature.

.VARI CONVEX_HIGH
Far threshold for allowed  
convex curvature 

.VARI CONVEX_LOW
Closer threshold for allowed  
convex curvature 

.VARI CONCAVE_LOW
Closer threshold for allowed  
concave curvature

.VARI CONCAVE_HIGH 
Far threshold for allowed  
concave curvature
Center of bounding box (in XYZ space).  Points lying outside the box will not
have roughness computed for them.  This is used to limit computation to the
arm workspace.  The bounding box is measured in the coordinate system
specified by COORD (usually ROVER).

Suggested value is -0.4 for MSL.
    Site frame to use.  Non-rover missions treat this as Fixed.
Rover - An instance of the Rover frame.  For rover missions, COORD_INDEX
    specifies which instance of the rover frame to use.  Non-rover mission
    use the spacecraft frame (e.g. Lander for M98).
Local_Level - An instance of a Local Level frame.  This is typically
    coincident with the Rover frame (in XYZ) but oriented toward North
    like the Site and Fixed frames.  For MER, this is an instance of a
    Drive index move.

.VARI COORD_INDEX
The index specifies which instance of a coordinate system to use.  It is
currently applicable only to rover-based missions, but could have other
uses.  The index is equivalent to the Rover Motion Counter (RMC) for MER
and FIDO.

For MER/FIDO, there are many Site frames.  Each is numbered with a single
index.  For Site Frames, coord_index specifies which to use.  Likewise,
there are many Local_Level and Rover frames, corresponding to values of
the RMC.  The multiple instances of this frame are selected by COORD_INDEX.

Generally COORD_INDEX defaults sensibly so you don't usually need to
specify it.  It will default to the instance used by the first input.

.VARI FIXED_SITE
Specifies which major Site is the "Fixed" Site for this run.

Historically, MPF and M98 had a single "Surface Fixed" frame which never
moved, and which all other coordinate system frames were referenced to.
With the advent of long-range rovers (such as MER and FIDO), that became
insufficient.  The rover traverses far enough that errors in knowledge of
coordinate system offset and orientation become unacceptable.

For this reason, a system of major Sites was introduced.  Periodically
during the mission, a Site frame is declared.  This then becomes the
reference frame for all activities until the next Site is declared.
References are kept local, and errors don't propogate across Sites.

However, if images from more than one Site are combined together, the
Site's must be placed relative to each other.  Therefore a single reference
frame is still needed to combine different sites.

The FIXED_SITE parameter controls which of the major Site frames is
the reference ("fixed") site for this program run.  This fixed frame
can vary in different program runs, but is constant throughout one
execution.

If not specified, FIXED_SITE defaults to the minimum Site number (i.e.
lowest numbered, or earliest chronologically) used in all input images.
Normally this default is sufficient; rarely must FIXED_SITE be specified.

One or more Rover State Files must usually be specified in order to combine
image from more than one Site.  These describe the relationship between
sites.  See the RSF parameter.

.VARI SOLUTION_ID
Specifies which solution ID to use when specifying the coordinate system.

There are potentially many different definitions for the same coordinate
system.  These are identified via a unique Solution ID.  If this parameter
is given, only the specified solution's definition is searched for.  Without
it, the "best" available solution is chosen.

It is extremely rare that this parameter should be needed.  The default
will be sufficient in almost every case.

Note that the current MER implementation requires that a value for COORD_INDEX
also be provided, in order for this parameter to take effect.

.VARI OMP_ON
Turns on or off parallel processing.  The default is on.  The main help
describes some environment variables that can further control parallel
processing.  Note that this program uses standard OpenMP (which is built in
to the gcc/g++ compilers), so further details can be found in the OpenMP
documentation.
process help=*
PARM INP TYPE=STRING COUNT=1
PARM OUT TYPE=STRING COUNT=1 
PARM EXAMPLE TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM BAND    TYPE=INTEGER COUNT=(0:1) DEFAULT=1

PARM NORMAL  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM GROUND  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM SURF_COORD TYPE=STRING COUNT=(0:1) DEFAULT="FIXED"
PARM SURF_MESH TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURF_CSFILE TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURFACE TYPE=KEYWORD COUNT=(0:1) +
  VALID=("INFINITY","PLANE", "SPHERE1", "SPHERE2", "MESH") +
  DEFAULT=PLANE

PARM MODEL_TYPE TYPE=KEYWORD VALID=("FILE","CAHV","CAHVOR","CAHVORE") DEFAULT=FILE
PARM C TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM A TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM H TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM V TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM O TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM R TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM E TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM T TYPE=INTEGER COUNT=(0:1) DEFAULT=--
PARM P TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM NL TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM NS TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM XOFF TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM YOFF TYPE=REAL COUNT=(0:1) DEFAULT=--

PARM PPARAM TYPE=REAL COUNT=(0:10) DEFAULT=--
PARM AZIMUTH TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM ELEVATION TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM POSITION TYPE=REAL COUNT=(0:3) DEFAULT=--

PARM CONFIG_PATH STRING DEFAULT="$MARS_CONFIG_PATH"
PARM POINT_METHOD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM NOSITE TYPE=KEYWORD COUNT=(0:1) VALID=NOSITE DEFAULT=--
PARM INTERP TYPE=KEYWORD VALID=("INTERP", "NOINTERP") DEFAULT=INTERP 

PARM DATA_SET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM DATA_SET_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM RELEASE_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCT_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_INST TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_TYPE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM RSF TYPE=STRING COUNT=0:100 DEFAULT=--
PARM DEBUG_RSF TYPE=KEYWORD COUNT=0:1 VALID=DEBUG_RSF DEFAULT=--
PARM COORD TYPE=KEYWORD VALID=("FIXED", "INSTRUMENT", "SITE", "ROVER", +
	"LOCAL_LEVEL") DEFAULT="FIXED"
PARM COORD_INDEX TYPE=INTEGER COUNT=0:10 DEFAULT=--
PARM FIXED_SITE TYPE=INTEGER COUNT=0:1 DEFAULT=--

END-PROC

.TITLE
VICAR program MARSUNMOSAIC.

.HELP
PURPOSE:

This program will "unmosaic" a mosaic by extracting a single frame.
This frame will be such that it could have been an input to the mosaic.
The intent is to create simulated input frames using different cameras
and/or pointings than the original mosaic used.

Only Cylindrical projections are supported.  The parameters of the
cylindrical projection are extracted from the label.

There are two parts necessary to define the input: a camera model for the
output frame, and the pointing of that camera model.  Each of these can be
specified in multiple ways.

Radiometric correction is not reversed; what you get in the output are
the DN's in the mosaic.

Camera Model
------------

The most straightforward way to provide the camera model is to provide a
sample image (via EXAMPLE) that is recognized by the PIG library.  For
example, to make an image look like it came from the MER pancam, provide a
MER pancam image.  The output label will be copied from this input so it
will appear to be a complete label - although since only a few items are
updated, most of the fields will be wrong (referring still to the original
image).  The fields necessary for further use with the PIG library will be
updated.  Note that you can create a blank image with a .cahv (or .cahvor
or .cahvore) file to use this method with the PIG "generic" mission.

**** TBD:  Currently only the camera model is updated in the output label.
The pointing is NOT updated.  This means that camera-model based pointing
must be used; kinematics are unavailable.  For MER, that's specified by
point_method=cm=label to any other PIG program.

The second way is to explicitly provide the camera model numbers via
parameters.  The CAHV, CAHVOR, and CAHVORE models are supported (note
that CAHVORE also requires T and P parameters).  MODEL_TYPE must be
supplied in this case.  If there is no input image, NL and NS must
also be provided (XOFF and YOFF are optional and default to NS/2
and NL/2, respectively).  The COORD parameter specifies the coordinate
system in which the C, A, etc. vectors are expressed.

If both a file and explicit parameters are provided, the file's labels
will be transferred to the output, but the parameters will specify the
camera model.  Note that in this case, the pointing parameters in the
label will not be updated, so only label pointing can be used (i.e.
further use of that image will require the camera model be extracted from
the label; recomputation of the model from pointing is no longer available).
This mode is useful for e.g. defining a set of coordinate systems via
the example file, yet still defining the camera model explicitly.

Camera Pointing
---------------

The pointing of the camera can be changed via the PPARAM argument, which
contains the pointing parameters needed for the pointing model in use.

The interpretation of these parameters depends on the mission.  For the
Generic mission (or if no file is given), the first two pointing parameters
are used to adjust the camera pointing directly (az, el).  For a mission
that PIG knows about, normal PIG pointing models are used.

For instruments that use Azimuth and Elevation as the first two pointing
parameters (which includes most mast cameras, such as MER navcam and pancam,
PHX SSI, and generic with the 2dof model), the pointing may alternatively
be specified using the AZIMUTH and ELEVATION parameters.  The key difference
here is that AZIMUTH and ELEVATION are expressed in the coordinate system
specified by COORD.  They are internally converted to the instrument coordinate
system, and then put into the first two slots of the PPARAM parameter.
This allows e.g. a MER pancam to be pointed in the Site or Local Level frame.
Note that if one of AZIMUTH or ELEVATION are specified, both must be.

If the pointing model does NOT have azimuth and elevation as the first two
pointing parameters, the results will be undefined and likely nonsensical.

Finally, if POSITION is specified, that is an absolute override of the
camera position (for CAHV models, the C vector).  This is most useful for
Generic (or no file) models to make the cameras describe an arc to preserve
stereo separation.  While it is possible to use POSITION with a PIG pointing
model, it is not recommended.  The coordinate system in which POSITION is
expressed is defined by COORD.

Coordinates
-----------

The standard PIG COORD parameter set is used to specify the coordinate system
in which the camera model vectors, AZIMUTH and ELEVATION, and POSITION are
specified.  This need not be the same as the natural instrument coordinate
system (Rover for MER), which is used to express pointing parameters via
PPARAM.  It also need not be the same as the coordinate system in which
the mosaic was taken.  In fact, for MER it could be common to have the mosaic
in Site frame, the instrument frame be Rover, and COORD=LOCAL_LEVEL to specify
the camera pointing.

.page
EXECUTION:

marsunmosaic cyl.img out.img example=frame.img az=45.0 el=-3.0
or
marsunmosaic cyl.img out.img -cahvor c=(1,2,3) a=(4,5,6) h=(7,8,9)
   v=(0,1,2) o=(3,4,5) r=(6,7,8)

.PAGE
OPERATION:

The program uses the appropriate camera model for the output image and
Cylindrical projection parameters from the input.
Each pixel in the output is transformed from output picture coordinates to
input azimuth and elevation in the following steps:
1. Each output pixel defines a unit vector based on the camera model of the
   output image.
2. We compute the intersection of this vector with a surface model.  This is
   normally a tilted plane, possibly with an offset from the origin of the
   spacecraft coordinate system (so the "ground" can be above or below the
   origin).
3. Then this ground point is ray traced back into the input mosaic's
   projection origin, creating another vector.
4. This vector is decomposed into azimuth and elevation, which are then
   converted to line/sample in the cylindrically projected mosaic.
5. The DN value in the input image is bilinearly interpolated and placed
   into the output location.

.page

HISTORY:
  1994-04-30 J Lorre - Initial mpfmap
  1998-11    B. Deen - Multimission conversion
  2005-08    marsmap algorithm inverted to become marsunmosaic
  2019-12-10 W. Bunch - Initialized some variables; cleaned up all -Wall warnings; added unit test.
  2020-05-21 W. Bunch - Replaced sprintf calls.

COGNIZANT PROGRAMMER:  Bob Deen

.LEVEL1
.VARI INP
Input mosaic.

.VARI OUT
Output frame.

.VARI EXAMPLE
Example output frame.

.VARI BAND
The BSQ band number.

.VARI NORMAL
Surface normal vector.

.VARI GROUND
Surface ground point.

.VARI SURFACE
The type of mars
surface to use INFINITY, PLANE, 
SPHERE1, SPHERE2, MESH.

.VARI SURF_MESH 
Mesh file for surface model

VARI SURF_CSFILE 
File containing CS for surface
model

.VARI SURF_COORD
Coordinate system used to define
surface parameters.

.VARI MODEL_TYPE
Type of camera model.

.VARI C
C vector for camera model

.VARI A
A vector for camera model

.VARI H
H vector for camera model

.VARI V
V vector for camera model

.VARI O
O vector for camera model

.VARI R
R vector for camera model

.VARI E
E vector for camera model

.VARI T
MTYPE value for CAVHORE

.VARI P
MPARM value for CAHVORE

.VARI NL
Number of lines in output

.VARI NS
Number of samples in output

.VARI XOFF
X Offset override for camera model

.VARI YOFF
Y Offset override for camera model

.PARM PPARAM
Pointing parameters for output

.PARM AZIMUTH
Azimuth for output pointing (degrees)

.PARM ELEVATION
Elevation for output pointing (degrees)

.PARM POSITION
Override of camera position

.VARI CONFIG_PATH
Path used to find
configuration/calibration
files.

.VARI POINT_METHOD
Specifies a mission-
specific pointing
method to use

.VARI NOSITE
Disables coordinate
system sites.

.VARI INTERP
Turns on or off
the interpolation.

.VARI DATA_SET_NAME
Specifies the full name given
to a data set or a data product.

.VARI DATA_SET_ID
Specifies a unique alphanumeric
identifier for a data set or data
product.

.VARI RELEASE_ID
Specifies the unique identifier
associated with the release to the
public of all or part of a data set.
The release number is associated with
the data set, not the mission.

.VARI PRODUCT_ID
Specifies a permanent, unique
identifier assigned to a data
product by its producer.

.VARI PRODUCER_ID
Specifies the unique identifier
of an entity associated with the
production a data set.

.VARI PRODUCER_INST
Specifies the full name of the
identity of an entity associated
with the production of a data set.

.VARI TARGET_NAME
Specifies a target.

.VARI TARGET_TYPE
Specifies the type of a named target.

.VARI RSF
Rover State File(s) to use.

.VARI DEBUG_RSF
Turns on debugging of RSF
parameter.

.VARI COORD
Coordinate system to use.

.VARI COORD_INDEX
Coordinate system index for
some COORD/mission combos.

.VARI FIXED_SITE
Which site is FIXED for
rover missions.

.LEVEL2
.VARI INP
Input mosaic.  Must be in cylindrical projection, and have appropriate
(MER-style) labels describing the projection.

.VARI OUT
Output image filename, which will contain the frame that is unmosaicked.

.VARI EXAMPLE
Input example file.  This is used to extract the camera and pointing models,
and coordinate systems.

.VARI BAND
The BSQ input file band number. Defaults to 1.

.VARI NORMAL
The local mars surface normal vector in the coordinate system specified
by SURF_COORD (defaults to surface fixed coordinates).

For most pan/tilt cameras, if the lander is not tilted this vector
would be: normal=(0,0,-1).  ie: x_component=0, y_component=0, z_component=-1.
This need not be a unit vector.  This vector is used to define the
surface plane to which image points are projected in order to minimize
parallax.

For SPHERE1/2 surface models, NORMAL's first parameter is used to
denote the sphere's radius.  Thus to describe sphere of radius R, the
user would specify NORMAL=(R, 0, 0).

.VARI GROUND
Any point on the surface, in the coordinate system specified by SURF_COORD
(defaults to surface fixed coordinates).  This defines where the tilted
plane is in space.  Although any point may be used, ideally the point just
"under" the origin is selected.

Defaults:
Mars Pathfinder:  (0.0, 0.0, 0.0)       (lander zero point is on the ground)
Mars 98 Lander:   (0.0, 0.0, 1.64)      (lander zero point is on top of deck)
MER           :   (0.0, 0.0, 0.294)
For MER images taken on top of the lander, the ground is roughly at (0.0, 0.0, 0.7)
For SPHERE1/2 surface models, the GROUND parameter is used to denote the
sphere's center.  

.VARI SURFACE
The type of mars surface to use. The surface is used to intercept view rays
emanating from the cameras in order to model out parallax between the
stereo cameras. The options are surface=INFINITY which means no surface
is used, surface=PLANE (the default case). If surface = PLANE then the plane
is defined by the NORMAL and GROUND parameters.  For the cases when PLANE 
doesn't match local topography sufficiently well, here are two sphere surface
models: surface=SPHERE1 and surface=SPHERE2.  SPHERE1 is useful to model
convex surfaces like hills, it returns closest(first) ray-surface intersection 
point.  SPHERE2 is useful to model concave surfaces, like crater when the
camera point is outside looking in, it returns farthest(second) ray-surface 
intersection point.  For the case when camera is inside the sphere surface, 
like rover sitting in the crater, there is only a single intersection point
and SPHERE1 and SPHERE2 behave exactly the same. Last, MESH is a surface
model defined by a mesh file (.obj) which path is given with SURF_MESH.

.VARI SURF_MESH 
Mesh OBJ file to use as the surface model. For the mesh to be used,
SURFACE must be set to MESH. The coordinates of the mesh vertices can be 
expressed in any CS. However the mesh CS must be supplied via SURF_CSFILE.
If SURF_CSFILE is not used, then the mesh is assumed to be to the CS that
results from COORD or SURF_COORD

VARI SURF_CSFILE 
File name of a vicar file whose CS (contained in the labels) will be read and
assigned to the SURFACE model. The type of image and its content are of no
interest, we are just reading the CS. That CS will supersede any other surface 
CS definition (COORD or SURF_COORD). Its typical use is to supply a CS to a
given mesh file (expectedly the XYZ from which the mesh is computed from, but
doesn't have to). But SURF_CSFILE could be use to define a CS in which NORMAL 
and GROUND for a PLANE surface are expressed in.

.VARI SURF_COORD
The coordinate system that surface parameters like GROUND and NORMAL are
defined in.  For valid values refer to the COORD parameter description.
Defaults to the surface fixed coordinate system.

Note that no validation is done for input strings because COORD is using
the same values.  So the user needs to be extra careful in specifying
SURF_COORD values.  For example, COORD=local would be correctly interpreted
to mean LOCAL_LEVEL because of the validation process.  On the other hand,
specifying SURF_COORD=local is not valid and would revert to the default.
So the values for SURF_COORD should be spelled exactly as found in the list
of valid values for COORD.

.VARI MODEL_TYPE
Specifies the type of camera model.  CAHV, CAHVOR, and CAHVORE are supported.
The default, FILE, means that the camera model is obtained from the EXAMPLE
file rather than from the C, A, etc. vectors.

Specifying a MODEL_TYPE other than FILE means that all appropriate parameters
must also be filled in.

.VARI C
The C vector for CAHV, CAHVOR, and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI A
The A vector for CAHV, CAHVOR, and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI H
The H vector for CAHV, CAHVOR, and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI V
The V vector for CAHV, CAHVOR, and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI O
The O vector for CAHVOR and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI R
The R vector for CAHVOR and CAHVORE camera models.  Used only if
MODEL_TYPE is not FILE.

.VARI E
The E vector for CAHVORE camera models.  Used only if MODEL_TYPE is not FILE.

.VARI T
The MTYPE parameter for CAHVORE camera models.  Used only if MODEL_TYPE is
not FILE.

.VARI P
The MPARM parameter for CAHVORE camera models.  Used only if MODEL_TYPE is
not FILE.

.VARI NL
The number of lines in the output.  Required if MODEL_TYPE=FILE is not
specified.

.VARI NS
The number of samples in the output.  Required if MODEL_TYPE=FILE is not
specified.

.VARI XOFF
X offset value for the camera model.  Overrides default value.

.VARI XOFF
X offset value for the camera model.  Overrides default value.

.VARI PPARAM
Pointing parameters for the output camera model.  These match the pointing
parameters used by the PIG library for the given mission.  Note that angular
measurements are typically in degrees.

.VARI AZIMUTH
Azimuth for pointing az/el cameras, in degrees.  The azimuth is expressed
in the coordinate frame defined by COORD, and is internally converted to
the instrument pointing coordinate system.  It is then stuffed into PPARAM(1),
so a value specified here overrides the first element of PPARAM.

Nonsensical results will occur if the pointing model does not have Azimuth
as its first pointing parameter.

If AZIMUTH is specified, ELEVATION must be as well.

.VARI ELEVATION
Elevation for pointing az/el cameras, in degrees.  The elevation is expressed
in the coordinate frame defined by COORD, and is internally converted to
the instrument pointing coordinate system.  It is then stuffed into PPARAM(2),
so a value specified here overrides the second element of PPARAM.

Nonsensical results will occur if the pointing model does not have Elevation
as its second pointing parameter.

If ELEVATION is specified, AZIMUTH must be as well.

.VARI POSITION
Absolute override of the camera position (normally the C vector for CAHV-
style models) after all pointing is done.  Not recommended for use with
PIG pointing, although it works.

.VARI CONFIG_PATH
A colon-separated list of directories in which to look for configuration
and calibration files.  Environment variables are allowed in the list
(and may themselves contain colon-separated lists).  The directories are
searched in order for each config/cal file when it is loaded.  This allows
multiple projectes to be supported simultaneously, and allows the user to
override any given config/cal file.  Note that the directory structure below
the directories specified in this path must match what the project expects.
For example, Mars 98 expects flat fields to be in a subdirectory named
"flat_fields" while Mars Pathfinder expects them to be directly in the
directory specified by the path (i.e. no intermediate subdirectories).

.VARI POINT_METHOD
Specifies a mission-specific pointing method to use.  Normally this
parameter is not used, in which case the "default" pointing methods
are used.  Some missions may have special, or alternate, pointing
methods available, which are indicated by this string (for example,
backlash models, using arm joint angles instead of x/y/z/az/el, etc).
A substring search is used, so multiple methods (where that makes sense)
can be specified by separating the keywords with commas.

Note that nav files created using one pointing method will most likely
not be compatible with a mosaic created using a different pointing method.

The methods available vary per mission, but some methods available at
the time of this writing are:

BACKLASH : Mars 98 SSI only.  Selects a backlash pointing model,
which adjusts the telemetered azimuth and elevation values based on
knowledge of the camera's mechanical backlash and the direction the
motor was travelling when the image was taken.

.VARI NOSITE
Disables all label-derived parameters to the Site mechanism which underlies
coordinate systems.  This forces all sites to be identical, with all rotations
and offsets set the same.  In the case of MPF or Mars 98, this disables
the lander quaternion and offset (sets them to identity and 0, respectively).
This option should not be used with images taken from different vantage
points (e.g. the spacecraft moved, or mixing a lander and a rover) or
invalid results will be obtained.  The use of this option invalidates the
Fixed coordinate frame; any values reported in the Fixed frame will not
correctly reflect the orientation of the lander/rover.

Obviously, this option should be rarely used; it is intended for when the
image labels defining the site are invalid or inconsistent.

.VARI INTERP
Keyword parameter that turns on or off interpolation of the output
images pixel values.  INTERP (the default) enables the interpolation, 
while NOINTERP disables it.

.VARI DATA_SET_NAME
The DATA_SET_NAME typically identifies the instrument that acquired the
data, the target of that instrument, and the processing level of the data.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_NAME.

.VARI DATA_SET_ID
The DATA_SET_ID value for a given data set or product is constructed
according to flight project naming conventions.  In most cases the
DATA_SET_ID is an abbreviation of the DATA_SET_NAME.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_ID.

.VARI RELEASE_ID
When a data set is released incrementally, such as every three months during
a mission, the RELEASE_ID is updated each time part of the data set is released.
For each mission(or host id if multiple spacecrafts), the first release of a data
set should have a value of "0001".
This value is copied to the output label, property IDENTIFICATION,
keyword RELEASE_ID.

.VARI PRODUCT_ID
Specifies a permanent, unique identifier assigned to a data product by
its producer. Most commonly, it is the filename minus the extension.
This value is copied to the output label, property IDENTIFICATION,
keyword PRODUCT_ID.

.VARI PRODUCER_ID
Specifies the unique identifier of an entity associated with the
production of a data set. This value is copied to the output label,
property IDENTIFICATION, keyword PRODUCER_ID.

.VARI PRODUCER_INST
Specifies the identity of a university, research center, NASA center or other
institution associated with the production of a data set.
This value is copied to the output label, property IDENTIFICATION, keyword
PRODUCER_INSTITUTION_NAME.

.VARI TARGET_NAME
Specifies a target.  The target may be a planet, satelite, ring, region, feature,
asteroid or comet.  This value is copied to the output label, property
IDENTIFICATION, keyword TARGET_NAME.

.VARI TARGET_TYPE
Specifies the type of a named target. This value is copied to the output
label, property IDENTIFICATION, keyword TARGET_NAME.

.VARI RSF
Rover State File.  This is a list of filenames to load containing
Rover State information.  These files contain position and orientation
information for a rover (or other mobile spacecraft) at various sites.
They are in XML format.  See the "Rover Motion Counter (RMC) Master File SIS"
for details on these files.

Rover State Files have a priority order.  The files listed first have
the highest priority.

Environment variables may be used in the list.

For MER, if a directory is specified, then that directory is searched for
RMC Master files and any found are loaded.  The directory structure and
filename convention is covered in the RMC SIS.  The directory specified
is the one containing "master", so if <dir> is the name specified in the
RSF parameter, the following files will be searched for:

<dir>/master/<mission>_Master.svf
<dir>/master/<mission>_Site_<n>_Master.rvf

The name of each file loaded is printed to the stdout log for reference.

.VARI DEBUG_RSF
If enabled, this causes the internal database of RMC locations to be
printed out to the stdout log.  This is after the RSF files have been
loaded and the coordinate systems read from the input label(s).

.VARI COORD
The coordinate system to use for most input parameters:  the camera model
vectors (C, A, etc.), the AZIMUTH and ELEVATION parameters, and POSITION.
The interpretation of the values of COORD is dependent on the mission.
Some representative missions are listed here:

Fixed - The Fixed frame (default).  This is the ultimate reference frame
    (see also FIXED_SITE for rover missions).
Instrument - The "natural" frame for the instrument (of the first input
    image).  MPF: Lander or Rover; M98: MVACS; MER: Rover.
Site - A major Site frame.  For rover missions, COORD_INDEX specifies which
    Site frame to use.  Non-rover missions treat this as Fixed.
Rover - An instance of the Rover frame.  For rover missions, COORD_INDEX
    specifies which instance of the rover frame to use.  Non-rover mission
    use the spacecraft frame (e.g. Lander for M98).
Local_Level - An instance of a Local Level frame.  This is typically
    coincident with the Rover frame (in XYZ) but oriented toward North
    like the Site and Fixed frames.  For MER, this is an instance of a
    Drive index move.

.VARI COORD_INDEX
The index specifies which instance of a coordinate system to use.  It is
currently applicable only to rover-based missions, but could have other
uses.  The index is equivalent to the Rover Motion Counter (RMC) for MER
and FIDO.

For MER/FIDO, there are many Site frames.  Each is numbered with a single
index.  For Site Frames, coord_index specifies which to use.  Likewise,
there are many Local_Level and Rover frames, corresponding to values of
the RMC.  The multiple instances of this frame are selected by COORD_INDEX.

Generally COORD_INDEX defaults sensibly so you don't usually need to
specify it.  It will default to the instance used by the first input.

.VARI FIXED_SITE
Specifies which major Site is the "Fixed" Site for this run.

Historically, MPF and M98 had a single "Surface Fixed" frame which never
moved, and which all other coordinate system frames were referenced to.
With the advent of long-range rovers (such as MER and FIDO), that became
insufficient.  The rover traverses far enough that errors in knowledge of
coordinate system offset and orientation become unacceptable.

For this reason, a system of major Sites was introduced.  Periodically
during the mission, a Site frame is declared.  This then becomes the
reference frame for all activities until the next Site is declared.
References are kept local, and errors don't propogate across Sites.

However, if images from more than one Site are combined together, the
Site's must be placed relative to each other.  Therefore a single reference
frame is still needed to combine different sites.

The FIXED_SITE parameter controls which of the major Site frames is
the reference ("fixed") site for this program run.  This fixed frame
can vary in different program runs, but is constant throughout one
execution.

If not specified, FIXED_SITE defaults to the minimum Site number (i.e.
lowest numbered, or earliest chronologically) used in all input images.
Normally this default is sufficient; rarely must FIXED_SITE be specified.

One or more Rover State Files must usually be specified in order to combine
image from more than one Site.  These describe the relationship between
sites.  See the RSF parameter.


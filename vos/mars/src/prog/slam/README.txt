*****Simultaneous Localization and Mapping (SLAM): slam.py*****

The provided slam.py and accompanying set of scripts run a Simultaneous Localization and Mapping (SLAM) algorithm based on existing modified and new 
VICAR programs. The goal of SLAM is to take an input set of frames corresponding 
to sequential movement of a rover (or for example the Mars helicopter) and 
provide both a map of the viewed scene as well as optimized camera pointing parameters with respect to the original telemetry values.

SLAM is designed ONLY for sequential datasets, and should not be applied on 
unstructured sets of images. The set of input frames are assumed to be acquired 
in increasing temporal order such that adjacent frames share tiepoints. This 
allows the algorithm to process the entire set via sequential batches.

The provided slam.py and other scripts run SLAM based on the 
following VICAR programs as subprocesses within an Python framework:

 - marsautotie2 (unchanged)
 - marsnav2, modified to perform more accurate multi-view triangulation
 - keyframe_selection (new VICAR capability)
 - posegraph (new VICAR capability)

NOTE: Please refer to each individual program's PDF file for information on 
usage, parameters, a detailed explanation, etc.


==========
a) Dependencies:

This version runs using Python 3.9.5, but earlier versions of Python 3 should 
work. The following packages are required, some of which may require 'pip 
install' depending on the setup:

	sys
	os
	configparser
	argparse
	math
	subprocess
	numpy
	pandas 
	re (regular expressions)
	glob
	csv
	xml.etree.ElementTree 
	collections 
	scipy
	matplotlib.pyplot 
	mpl_toolkits.mplot3d 
	optparse 

Eventually, individual installation of packages may be replaced by the use of a
conda environment.


==========
b) Usage:

The set of scripts work per the following instructions:

1) First, run parameters must be defined. This is done via the 'slam_config_writer.py' script, where general parameters for the main 
'slam.py' script as well as each of the above VICAR programs can be modified and specified. The format is such that there is a default set of parameters 
which can be modified directly, but sets of parameters for different runs and 
tests can be specified by adding a new section within the file. 

For instance, a "small_run" section exists which is intended to perform SLAM 
over a small set of images, with a speedy result. A "full_run" section specifies parameters to perform a much more comprehensive, yet slower, run. Further 
sections can be specified for additional users and/or tests to be performed. 

The default set of parameters contains many of the flags commonly used in the 
respective VICAR programs. These can easily be toggled on and off directly from
the SLAM config file, without needing to change anything within the main 
slam.py script, similarly to the way a PDF file is used to change parameters
for VICAR programs. At the same time, the addition of new parameters in the 
VICAR modules must be accounted for by adding variables which read those in 
within slam.py. 

In order to make this process more streamlined, the script makes use of Python's
'argparse' infrastructure to read parameters, provide help text on the command 
line, etc.

Once modifications have been made, to create and/or update the actual config 
file 'slam_config.txt' automatically by running:

	./slam_config_writer.py

2) Once the config file has been generated, a list of images to perform SLAM on must be created, or the path to an existing one identified. This list of images
along with the config file are the main parameters into SLAM. Without either of those, the script will throw an error message and not run. Additional parameters include an output directory to store all intermediate files, as well as the type 
of run to be performed. In the absence of these, an 'output/' directory will be generated locally, and the default set of parameters will be used to run SLAM. A typical call looks something like this:

	./slam.py slam_config.txt image_list.txt 
		--outdir OUTDIR --runtype RUNTYPE

3) The set of intermediate and output files will be generated in the provided OUTDIR directory. These consist of for example the following:

 - tiepoints_batchN.tpt for the Nth batch, after applying marsautotie2
 - tiepoints_finalN.tpt for the Nth batch, after applying marsnav2
 - navigation_batchN.nav for each batch, after applying marsnav2
 - navigation_final.xml

Additional files are generated by the utility scripts if these are set to be 
utilized; please refer to section (e) below.


==========
c) Description of 'slam.py':

The main script performs SLAM based on sliding-window processing across a series 
of batches making up the complete set of images provided in image_list.txt. This 
is the set of steps:

1) Read in all parameters from the SLAM config file

2) Keyframe selection (OPTIONAL)
 - Avoid running within the script if possible because running tiepoints on all available images makes things much slower; keyframe selection can be computed 
independently and the input image list can be fed into 'slam.py'

2) Sliding window processing
 - Computes the number of batches needed, and creates tiepoint and navigation 	files for each

3) Merge all of the batch navigation files into one

4) Perform a final bundle adjustment which uses the per-batch estimates as 
input (OPTIONAL)

5) Perform pose graph optimization (OPTIONAL)

NOTE: If tiepoint or navigation files are already in the output directory, the script will avoid re-computing them if the 'remove_intermediate_files' is set to false. This is useful if for example tiepoints take a long time to run and we 
only want to test bundle adjustment via marsnav2. In order to run a fresh SLAM 
from scratch, the 'remove_intermediate_files' flag must be set, or a different
output directory provided.


==========
d) Description of the sliding window phase:

During this phase, batches of typically 3-5 images are processed together, such that tiepointing and bundle adjustment are performed locally on just these 
images. Because there is an overlap between consecutive batches, there are 
multiple "versions" of the camera parameters. There are many ways to deal with 
this, but one is to average or perform other mathematical operations (outlier removal, for example) to compute a single set of parameters representative of 
all batch votes. A more straightforward approach, and the one currently 
used, is to simply let the most recent "version" of a camera's parameters be 
set in the final XML file.

The 'merge_navigation_files.py' script takes in all available batch navigation files and creates a final .xml file representative of the entire dataset, which 
can then be fed into a final marsnav2 run to re-compute XYZ points, and/or into
pose graph optimization to remove camera pose drift.

There are two ways to run the sliding window:
 - "Incremental" processing: intermediate files are obtained at each step
 - "Full" processing: intermediate files across batches are processed at the 
	very end into a single file


==========
e) Description of utility scripts: 

The util/ directory contains scripts which are useful for merging files as well 
as for creating outputs useful for performing a statistical analysis of the sequential bundle adjustment outputs (in alphabetical order):

	slam_nav_dataframe.py: reads in a navigation file and returns all camera
		parameter information as a Pandas dataframe. The output data type can be
		CAHVORE parameters (all of CAHV, CAHVOR, and  CAHVORE are supported), or
		pointing parameters. Within slam.py, it creates each 	
		navigation_batch*.csv file.

	slam_tie_dataframe.py: reads in an "augmented" tiepoints file and returns 
		all tiepoint information as a Pandas dataframe. These are the tiepoints
		files generated by marsnav2 which include information on before/after 
		XYZ points, NOT those generated by tiepointing methods such as
		'marsautotie2'. The purpose of generating dataframes is to perform
		statistical analyses to test and debug bundle adjustment methods such as
		'marsnav2'. Within slam.py, this script takes in tiepoint files 	
		ending with '_final.tpt' and produce the respective '_final.csv' file. 
		It only gets called if the 'create_pandas_dataframe' flag is set.

	slam_dataframe2params.py: reads in navigation CSV Pandas dataframes files 
		and returns a single merged ASCII file (table) containing information 
		for all scene cameras. Returns a file which contains all CAHV, CAHVOR, 
		and CAHVORE values per camera, or alternatively the pointing parameters,
		one per row:
			navigation_cam_params.txt
			navigation_pointings.txt

	slam_merge_nav_df.py: reads in navigation CSV Pandas dataframes files and
		returns a single merged table containing pointing or camera parameter
		information for all scene cameras. In sequential processing, the script
		takes as input the available set of navigation_batch*.nav files and 
		produces navigation_table_up_to_batch_*.csv), while in full processing
		mode navigation_table_all_batches.csv is produced. The 
		'create_pandas_dataframes' flag must be set to call this script. This 
		script also produces a “navigation_cam_params.txt” or 
		"navigation_pointings.txt" file similarly to slam_dataframe2params.py,
		since these files are needed by posegraph.
		The point of this script is to take per-batch dataframes generated using
		dataframe_from_navigation.py and use Pandas merging functions to create 
		a single dataframe representing all cameras, such that a statistical 
		analysis of the different camera model components can be achieved using 
		for example dataframe.groupby(variable).mean(), median, mode, quantile, 
		etc.

	slam_merge_nav.py: reads in a set of XML navigation files and "combines" 
		them into a final XML file corresponding to all available cameras. 
		NOTE: for all batch versions of a camera's parameter, the most RECENT is 
		taken as the final value for the output XML file. Since this may not 
		always yield the best solution, other statistical solutions are being
		considered.

	slam_headers2camparams.py: reads in a list of files and returns a text file
		with the  CAHV, CAHVOR, or CAHVORE parameters per camera (row). Creates 
		two files which can be used for debugging purposes:
			initial_poses.txt
			initial_poses.ply (if specified, to view the point cloud of initial 
			 				   camera positions) 

	slam_read_headers.sh: reads in a list of image files and returns their 
		headers in separate files.

	slam_run_posegraph.py: not currently used, as the VICAR 'posegraph' program
		completely replaced its functionality.



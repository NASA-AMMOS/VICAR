process help=*
PARM INP TYPE=STRING COUNT=2
PARM NAVTABLE TYPE=STRING COUNT=0:1 DEFAULT=--
PARM CONFIG_PATH STRING DEFAULT="$MARS_CONFIG_PATH"

PARM RSF TYPE=STRING COUNT=0:100 DEFAULT=--
PARM DEBUG_RSF TYPE=KEYWORD COUNT=0:1 VALID=DEBUG_RSF DEFAULT=--
PARM COORD TYPE=KEYWORD VALID=("FIXED", "INSTRUMENT", "SITE", "ROVER", +
        "LOCAL_LEVEL", "RMECH") DEFAULT="FIXED"
PARM COORD_INDEX TYPE=INTEGER COUNT=0:10 DEFAULT=--
PARM FIXED_SITE TYPE=INTEGER COUNT=0:1 DEFAULT=--
PARM SOLUTION_ID TYPE=STRING COUNT=0:1 DEFAULT=--
PARM POINT_METHOD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM MATCH_METHOD TYPE=STRING COUNT=(0:1) VALID=("LOOSE", "TIGHT") +
        DEFAULT=LOOSE
PARM MATCH_TOL TYPE=REAL COUNT=1 DEFAULT=.002
PARM NOSITE TYPE=KEYWORD COUNT=(0:1) VALID=NOSITE DEFAULT=--

PARM NORMAL  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM GROUND  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM SURF_COORD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURF_MESH TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURF_CSFILE TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURFACE TYPE=KEYWORD COUNT=(0:1) +
  VALID=("INFINITY","PLANE", "SPHERE1", "SPHERE2", "MESH") DEFAULT=--

PARM TIEPOINTS TYPE=STRING COUNT=0:1 DEFAULT=--
PARM TIE_TYPE TYPE=KEYWORD COUNT=1 VALID=("NO_TIE","POINTS","FLAG","VECTOR") DEFAULT=NO_TIE
PARM TIE_DN TYPE=REAL COUNT=1 DEFAULT=7000

END-PROC

.TITLE
VICAR program MARSTIEXYZ.

.HELP
PURPOSE:
Given stereo pair, bring up TP program and manually select a single tiepoint.
After that the program will print out (x, y, z) coordinates of selected tiepoint.

EXECUTION:

marstiexyz inp=(image1.vic image2.vic)


.PAGE
OPERATION:


COGNIZANT PROGRAMMER:  Oleg Pariser

HISTORY:
  2003-12               - Initial version
  2019-12-10 Walt Bunch - IDS-7926 - Initialized some variables; cleaned up some -Wall warnings; added unit test.

.LEVEL1
.VARI INP
input image or
file list.

.VARI NAVTABLE
Corrected navigation
filename.

.VARI CONFIG_PATH
Path used to find
configuration/calibration
files.

.VARI RSF
Rover State File(s) to use.

.VARI DEBUG_RSF
Turns on debugging of RSF
parameter.

.VARI COORD
Coordinate system to use.
Not used by this program.

.VARI COORD_INDEX
Coordinate system index for
some COORD/mission combos.
Not used by this program.

.VARI FIXED_SITE
Which site is FIXED for
rover missions.
Not used by this program.

.VARI SOLUTION_ID
Solution ID to use for
pointing correction.

.VARI POINT_METHOD
Specifies a mission-
specific pointing
method to use.

.VARI MATCH_METHOD
Specifies a method 
for pointing corrections.

.VARI MATCH_TOL
Tolerance value for
matching pointing params
in pointing corrections file.

.VARI NOSITE
Disables coordinate
system sites.

.VARI NORMAL
Surface normal vector.

.VARI GROUND
Surface ground point.

.VARI SURF_COORD
Coordinate system used to define
surface parameters.

.VARI SURFACE
The type of mars
surface to use INFINITY, PLANE, 
SPHERE1, SPHERE2, MESH.

.VARI SURF_MESH 
Mesh file for surface model

VARI SURF_CSFILE 
File containing CS for surface
model

.VARI TIEPOINTS
Input tiepoint file for
tiepoint visualization.

.VARI TIE_TYPE
Type of tiepoint
visualization to perform.

.VARI TIE_DN
DN value for tiepoint
visualization.


.LEVEL2
.VARI INP
Input stereo pair.

.VARI NAVTABLE
Corrected navigation filename.
If marsnav was run on the input images it created a table of corrected
pointing parameters. If you refer to this table using NAVTABLE it
will override the pointing parameters (e.g. azimuth and elevation) in the
picture labels, giving different (and presumably better) output coordinates.

.VARI CONFIG_PATH
A colon-separated list of directories in which to look for configuration
and calibration files.  Environment variables are allowed in the list
(and may themselves contain colon-separated lists).  The directories are
searched in order for each config/cal file when it is loaded.  This allows
multiple projectes to be supported simultaneously, and allows the user to
override any given config/cal file.  Note that the directory structure below
the directories specified in this path must match what the project expects.
For example, Mars 98 expects flat fields to be in a subdirectory named
"flat_fields" while Mars Pathfinder expects them to be directly in the
directory specified by the path (i.e. no intermediate subdirectories).

.VARI RSF
Rover State File.  This is a list of filenames to load containing
Rover State information.  These files contain position and orientation
information for a rover (or other mobile spacecraft) at various sites.
They are in XML format.  See the "Rover Motion Counter (RMC) Master File SIS"
for details on these files.

Rover State Files have a priority order.  The files listed first have
the highest priority.

Environment variables may be used in the list.

For MER, if a directory is specified, then that directory is searched for
RMC Master files and any found are loaded.  The directory structure and
filename convention is covered in the RMC SIS.  The directory specified
is the one containing "master", so if <dir> is the name specified in the
RSF parameter, the following files will be searched for:

<dir>/master/<mission>_Master.svf
<dir>/master/<mission>_Site_<n>_Master.rvf

The name of each file loaded is printed to the stdout log for reference.

.VARI DEBUG_RSF
If enabled, this causes the internal database of RMC locations to be
printed out to the stdout log.  This is after the RSF files have been
loaded and the coordinate systems read from the input label(s).

.VARI COORD
This parameter is ignored by marstiexyz.  The parameter exists for
compatibility with subroutines used by other programs (see e.g. marsmap).

.VARI COORD_INDEX
This parameter is ignored by marstiexyz.  The parameter exists for
compatibility with subroutines used by other programs (see e.g. marsmap).

.VARI FIXED_SITE
This parameter is ignored by marstiexyz.  The parameter exists for
compatibility with subroutines used by other programs (see e.g. marsmap).

.VARI SOLUTION_ID
Specifies which solution ID to use for pointng corrections.

There are potentially many different definitions for the same coordinate
system. These are identified via a unique Solution ID.  If this parameter
is given, only the specified solution's definition is searched for.

.VARI POINT_METHOD
Specifies a mission-specific pointing method to use.  Normally this
parameter is not used, in which case the "default" pointing methods
are used.  Some missions may have special, or alternate, pointing
methods available, which are indicated by this string (for example,
backlash models, using arm joint angles instead of x/y/z/az/el, etc).
A substring search is used, so multiple methods (where that makes sense)
can be specified by separating the keywords with commas.

Note that nav files created using one pointing method will most likely
not be compatible with a mosaic created using a different pointing method.

The methods available vary per mission, but some methods available at
the time of this writing are:

BACKLASH : Mars 98 SSI only.  Selects a backlash pointing model,
which adjusts the telemetered azimuth and elevation values based on
knowledge of the camera's mechanical backlash and the direction the
motor was travelling when the image was taken.

.VARI MATCH_METHOD
Specifies a method for pointing corrections.

Loose method matches with pointing parameters of the image.
Tight method matches with unique id of the image.

.VARI MATCH_TOL
Tolerance value for matching pointing parameters in the pointing corrections
file.  Used if MATCH_METHOD=LOOSE
Default value is pretty arbitrary, though seems to work well so far....

.VARI NOSITE
Disables all label-derived parameters to the Site mechanism which underlies
coordinate systems.  This forces all sites to be identical, with all rotations
and offsets set the same.  In the case of MPF or Mars 98, this disables
the lander quaternion and offset (sets them to identity and 0, respectively).
This option should not be used with images taken from different vantage
points (e.g. the spacecraft moved, or mixing a lander and a rover) or
invalid results will be obtained.  The use of this option invalidates the
Fixed coordinate frame; any values reported in the Fixed frame will not
correctly reflect the orientation of the lander/rover.

Obviously, this option should be rarely used; it is intended for when the
image labels defining the site are invalid or inconsistent.

.VARI NORMAL
The local mars surface normal vector coordinate system specified by SURF_COORD 
parameter (defaults to surface fixed).
For most pan/tilt cameras, if the lander is not tilted this vector
would be: normal=(0,0,-1).  ie: x_component=0, y_component=0, z_component=-1.
This need not be a unit vector.  This vector is used to define the
surface plane to which image points are projected in order to minimize
parallax.
For SPHERE1/2 surface models, normal's first parameter is used to
denote sphere's radius.  Thus to describe sphere of radius R, user
would specify normal=(R, 0, 0).

.VARI GROUND
Any point on the surface, in coordinate system specified by SURF_COORD parameter
(defaults to surface fixed).  This defines where the tilted plane is in space.  
Although any point may be used, normally the point just "under" the origin is selected.
Defaults:
Mars Pathfinder:  (0.0, 0.0, 0.0)       (lander zero point is on the ground)
Mars 98 Lander:   (0.0, 0.0, 1.64)      (lander zero point is on top of deck)
MER           :   (0.0, 0.0, 0.294)
For MER images taken on top of the lander, the ground is roughly at (0.0, 0.0, 0.7)
For SPHERE1/2 surface models, GROUND parameter is used to denote sphere's
center.  
    
.VARI SURF_COORD
The coordinate system that surface parameters like GROUND and NORMAL are defined in.
For valid values refer to COORD parameter description.  The interpretation of the 
values is dependent on the mission. Defaults to surface fixed coordinate system.
Note that no validation is done for input strings because COORD is using the same
values.  So user needs to be extra careful in specifying SURF_COORD value.  For 
example COORD=local would be correctly interpreted to mean LOCAL_LEVEL because of
validation process.  On the other hand specifying SURF_COORD=local would lead
to underlying code treating the input value as invalid and reverting to default
which is FIXED frame.  So the values for SURF_COORD should be spelled exactly as
found in the list of valid values for COORD parameter.    

.VARI SURFACE
The type of mars surface to use. The surface is used to intercept view rays
emanating from the cameras in order to model out parallax between the
stereo cameras. The options are surface=INFINITY which means no surface
is used, surface=PLANE (the default case). If surface = PLANE then the plane
is defined by the NORMAL and GROUND parameters.  For the cases when PLANE 
doesn't match local topography sufficiently well, here are two sphere surface
models: surface=SPHERE1 and surface=SPHERE2.  SPHERE1 is useful to model
convex surfaces like hills, it returns closest(first) ray-surface intersection 
point.  SPHERE2 is useful to model concave surfaces, like crater when the
camera point is outside looking in, it returns farthest(second) ray-surface 
intersection point.  For the case when camera is inside the sphere surface, 
like rover sitting in the crater, there is only a single intersection point
and SPHERE1 and SPHERE2 behave exactly the same. Last, MESH is a surface
model defined by a mesh file (.obj) which path is given with SURF_MESH.

.VARI SURF_MESH 
Mesh OBJ file to use as the surface model. For the mesh to be used,
SURFACE must be set to MESH. The coordinates of the mesh vertices can be 
expressed in any CS. However the mesh CS must be supplied via SURF_CSFILE.
If SURF_CSFILE is not used, then the mesh is assumed to be to the CS that
results from COORD or SURF_COORD

VARI SURF_CSFILE 
File name of a vicar file whose CS (contained in the labels) will be read and
assigned to the SURFACE model. The type of image and its content are of no
interest, we are just reading the CS. That CS will supersede any other surface 
CS definition (COORD or SURF_COORD). Its typical use is to supply a CS to a
given mesh file (expectedly the XYZ from which the mesh is computed from, but
doesn't have to). But SURF_CSFILE could be use to define a CS in which NORMAL 
and GROUND for a PLANE surface are expressed in.

.VARI TIEPOINTS
Input tiepoint file for tiepoint visualization.  Only used if TIE_TYPE
is turned on.  Both the old (text) and new (XML) tiepoint file formats
are supported, and the format is auto-detected.

.VARI TIE_TYPE
Allows tiepoints to be visualized by plotting them on top of a mosaic.
Should never be used for production mosaics; this is intended to help
determine if tiepoints (such as from MARSAUTOTIE) are any good.

The default value, NO_TIES, turns off tiepoint visualization completely.

POINTS turns on point mode.  The left side of the tiepoint is indicated
by a dot (single pixel) on the image at the location that point projects to.
The value of the pixel is TIE_DN plus 10 times the difference (in mosaic
space) between the left and right parts of the tiepoint.  This gives some
indication of how well the tiepoint was corrected.  Thus if TIE_DN is 7000,
a value of 7032 indicates that the tiepoints were 3.2 pixels apart.  Of
course, a difference of 0 (dn=7000 for this example) means that the tiepoint
was corrected perfectly.

FLAG does what POINTS does, but then draws an additional vector on the
image (at half the intensity of the point).  This vector starts at the point
and continues for 10 pixels parallel to a line between the centers of the
"left" and "right" images for that tiepoint.  Thus it provides some indication
of which pair of images was involved in the tiepoint, when there are multiple
overlapping images.  Note that the edge of the mosaic is not considered; if
the image centers are on opposite ends of the mosaic (as in, the edge of the
mosaic splits the centers), the vector will use the actual centers, without
being adjusted for wrapping.

VECTOR does what POINTS does, but then draws an additional vector on the
image (at half the intensity of the point).  This vector starts at the point
and continues in the direction of the right-side tiepoint.  The length of the
vector is 10 times the difference between the left and right (same as the
intensity of the point itself).  This makes it easy to visualize tiepoint
outliers.

Tiepoint visualization is especially effective when combined with -NUMBER and
-OVER (overlapping footprints).  The -FLAG or -VECTOR modes should almost
always be used; POINT alone has not proved to be useful.

.VARI TIE_DN
DN value to use for tiepoint visualization.  See TIE_TYPE.

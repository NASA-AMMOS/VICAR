process help=*
PARM INP TYPE=STRING COUNT=(1:20)
PARM OUT TYPE=STRING COUNT=1 
PARM NAVTABLE TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PROJECTION TYPE=KEYWORD COUNT=1 VALID=("CYLINDRICAL","POLAR","VERTICAL", +
     "SINUSOIDAL") DEFAULT="CYLINDRICAL"
PARM ZOOM TYPE=REAL COUNT=0:1 DEFAULT=--
PARM BAND    TYPE=INTEGER COUNT=(0:1) DEFAULT=--
PARM INPUT_RANGE TYPE=INTEGER COUNT=(0:2) DEFAULT=--
PARM BIAS  TYPE=REAL COUNT=(0:200) DEFAULT=--
PARM BRTCORR TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SCALE   TYPE=REAL COUNT=0:1 DEFAULT=--
PARM LEFTAZ  TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM RIGHTAZ  TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM TOPEL  TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM BOTTOMEL  TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM LIMIT_TOPEL TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM LIMIT_BOTTOMEL TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM PROJ_ORIGIN TYPE=REAL COUNT=(0,3) DEFAULT=--
PARM PO_COORD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM UP_AZ TYPE=REAL COUNT=1 DEFAULT=0.0
PARM VERT_SCALE TYPE=REAL COUNT=1 VALID=(0:1000.) DEFAULT=0.01
PARM MINX TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM MINY TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM MAXX TYPE=REAL COUNT=1 DEFAULT=5.
PARM MAXY TYPE=REAL COUNT=1 DEFAULT=5.
PARM CENTER_AZ TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM CENTER_EL TYPE=REAL COUNT=1 DEFAULT=0.0
PARM WRAP_AZ  TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM WRAP_EL  TYPE=REAL COUNT=1 DEFAULT=0
PARM WRAP_COORD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM GRID TYPE=KEYWORD COUNT=(0:1) VALID=("GRID", "GRID_OVERLAY", "NOGRID", "GRID_LABELS") +
	DEFAULT=GRID
PARM GRID_SPACING TYPE=REAL COUNT=0:1 DEFAULT=--
PARM GRID_DN TYPE=REAL DEFAULT=4096 COUNT=(1:32)
PARM GRID_ZOOM TYPE=INTEGER DEFAULT=1
PARM NORMAL  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM GROUND  TYPE=REAL COUNT=(0:3) DEFAULT=--
PARM SURF_COORD TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM SURF_MESH TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURF_CSFILE TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM SURFACE TYPE=KEYWORD COUNT=(0:1) +
  VALID=("INFINITY","PLANE", "SPHERE1", "SPHERE2", "MESH") DEFAULT=--

PARM NUMBER TYPE=KEYWORD VALID=("NUMBER","NONUMBER","INV_NUMBER") DEFAULT="NONUMBER"
PARM NUMBER_DN TYPE=REAL DEFAULT=4096 COUNT=(1:32)
PARM NUMBER_ZOOM TYPE=INTEGER DEFAULT=1
PARM NUMBER_START TYPE=INTEGER DEFAULT=1
PARM FOOTPRT TYPE=KEYWORD VALID=("NOFOOTPRINT", "FOOTPRINT", "OVERLAP") +
	DEFAULT=NOFOOTPRINT
PARM FOOT_DN TYPE=REAL DEFAULT=4096 COUNT=(1:32)
PARM MAX_FOOT TYPE=INTEGER COUNT=(0:1) DEFAULT=--
PARM FOOT_RANGE TYPE=INTEGER COUNT=0:2 DEFAULT=--
PARM FOOT_COLOR TYPE=STRING COUNT=0:1 DEFAULT=--

PARM RAD TYPE=KEYWORD VALID=("RAD", "ZENITH_SCALED_RAD", "NORAD") DEFAULT=RAD
PARM DNSCALE TYPE=REAL DEFAULT=100.0
PARM DNSCALE_IN TYPE=KEYWORD COUNT=1 VALID=("AUTOSCALE", "RESCALE", "NOSCALE") DEFAULT=AUTOSCALE
PARM DNSCALE_OUT TYPE=KEYWORD COUNT=1 VALID=("STATIC", "DYNAMIC", "IDENTITY") DEFAULT=STATIC
PARM TAU TYPE=REAL DEFAULT=0.6
PARM CONFIG_PATH STRING DEFAULT="$MARS_CONFIG_PATH"
PARM POINT_METHOD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM MATCH_METHOD TYPE=STRING COUNT=(0:1) VALID=("LOOSE", "TIGHT") +
        DEFAULT=LOOSE
PARM MATCH_TOL TYPE=REAL COUNT=1 DEFAULT=.002
PARM NOSITE TYPE=KEYWORD COUNT=(0:1) VALID=NOSITE DEFAULT=--
PARM MODE TYPE=KEYWORD COUNT=1 VALID=(INCREMENTAL,MEMORY) DEFAULT=MEMORY
PARM INTERP TYPE=KEYWORD VALID=("INTERP", "NOINTERP") DEFAULT=INTERP 
PARM FOV_LIMIT TYPE=REAL COUNT=0:2 DEFAULT=--
PARM REVERSE TYPE=KEYWORD VALID=REVERSE COUNT=(0:1) DEFAULT=--

PARM OMP_ON TYPE=KEYWORD VALID=(OMP_ON,OMP_OFF) DEFAULT=OMP_ON

PARM DATA_SET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM DATA_SET_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM RELEASE_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCT_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_INST TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_TYPE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM RSF TYPE=STRING COUNT=0:100 DEFAULT=--
PARM DEBUG_RSF TYPE=KEYWORD COUNT=0:1 VALID=DEBUG_RSF DEFAULT=--
PARM COORD TYPE=KEYWORD VALID=("FIXED", "INSTRUMENT", "SITE", "ROVER", "RMECH" +
        "LOCAL_LEVEL", "PIXL_TOOL", "PIXL_BASE", "PIXL_SENSOR", "HELI_G","HELI_M") DEFAULT="FIXED"
PARM COORD_INDEX TYPE=INTEGER COUNT=0:10 DEFAULT=--
PARM FIXED_SITE TYPE=INTEGER COUNT=0:1 DEFAULT=--
PARM FIXED_NAME TYPE=STRING COUNT=0:1 DEFAULT=--
PARM SOLUTION_ID TYPE=STRING COUNT=0:1 DEFAULT=--

PARM TIEPOINTS TYPE=STRING COUNT=0:1 DEFAULT=--
PARM TIE_TYPE TYPE=KEYWORD COUNT=1 VALID=("NO_TIE","POINTS","FLAG","VECTOR","TRUE_VECTOR") DEFAULT=NO_TIE
PARM TIE_DN TYPE=REAL COUNT=(1:32) DEFAULT=7000

! Parameters for overlap intensity (old marsint functionality)
PARM HORIZON TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM OVR_OUT TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM MAX_OPEN TYPE=INTEGER COUNT=(0:1) DEFAULT=--
PARM START_KEY TYPE=INTEGER COUNT=1 DEFAULT=0
PARM RADIUS TYPE=REAL COUNT=1 DEFAULT=100.0
PARM WHICH_OVR TYPE=KEYWORD COUNT=1 VALID=("NORMAL_OVR","OVERALL_OVR","BOTH_OVR") DEFAULT=NORMAL_OVR
PARM USE_HSI TYPE=KEYWORD COUNT=(0:1) DEFAULT=-- VALID="HSI"

! Outputs for coordinate index output files

PARM IDX_OUT TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM ICM_OUT TYPE=STRING COUNT=(0:1) DEFAULT=--

! Scale bar control

PARM BAR TYPE=KEYWORD VALID=BAR COUNT=(0:1) DEFAULT=--
PARM BAR_POS TYPE=INTEGER COUNT=2 DEFAULT=(-50,150)
PARM BAR_SIZE TYPE=INTEGER COUNT=1 DEFAULT=75
PARM BAR_DN TYPE=REAL COUNT=(1:32) DEFAULT=4096
PARM BAR_ZOOM TYPE=REAL COUNT=1 DEFAULT=1
PARM BAR_HEIGHT TYPE=INTEGER COUNT=1 DEFAULT=10
PARM BAR_SPACE TYPE=INTEGER COUNT=1 DEFAULT=5
PARM BAR_RANGE TYPE=REAL COUNT=(0:1) DEFAULT=--
PARM BAR_APPROX TYP=KEYWORD VALID=(APPROX,EXACT) COUNT=1 DEFAULT=APPROX

PARM BBOX TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM BBOX_COUNT TYPE=INTEGER COUNT=1 DEFAULT=3

!# parm inp(2-20) hints=default
END-PROC

.TITLE
VICAR program MARSMAP.

.HELP
Purpose
-------

To assemble multiple frames into a mosaic in one of three projections:

  Cylindrical
  Polar
  Vertical

Cylindrical and Polar use spherical coordinates; Vertical uses rectangular.
In addition an experimental Sinusoidal projection is implemented, but is
not yet fully tested or validated.

This is a multimission program derived from Mars Pathfinder's mpfmap.
It supports and mission, instrument, and camera model supported by the
Planetary Image Geometry (Pig) software suite.

Best results are obtained if the images are all taken from the same camera
at approximately the same position.

The program will optionally put azimuth and elevation (Cylindrical, Polar)
or X and Y (Vertical) lines and annotation on the image.  These can either
appear "on top of" or "underneath" the image.  See GRID, GRID_SPACING, GRID_DN,
and GRID_ZOOM.

In addition, the program will optionally place an image number at the center of
each image in the output, to aid in identification of the images.  See NUMBER,
NUMBER_DN, NUMBER_ZOOM, and NUMBER_START.  It will also optionally draw a
"footprint" border around each image.  See FOOTPRT and FOOT_DN.

The program can accept a navigation file written by marsnav which will improve
the accuracy of the mosaic.

Radiometric correction is performed on the inputs by default; this may be
turned off via the RAD keyword parameter.

Marsmap can also be used to analyze image overlaps for use with brightness
correction.  This subsumes the functionality of the old "marsint" program.

Marsmap will handle color images automatically if the BAND parameter is not
specified. For mixed color and black-and-white inputs, the number of output
bands will equal the maximum number of bands across all inputs. Images with
less than that number of bands will simply repeat the last available band i.e.,
black-and-white images can be mixed with color images. If BAND is specified,
only that single band (in the multi-banded images) is processed, and black-and-
white images remain unaffected.

.page
Execution
---------

There are two ways to present input images:

marsmap inp=(a.img,b.img,c.img,...) out=map.img
or
marsmap inp=ascii_listoffiles out=map.img

where ascii_listoffiles is a text file created by Sybase or an editor,
containing the list of filenames to include in the mosaic, one per record.
Up to 200 input images can be listed.

Additionally, marsnav may be used:

marsnav inp=ascii_listoffiles out=navtab search=25
marsmap inp=ascii_listoffiles out=map.img navtable=navtab

.page
Parallel Execution
------------------

MARSMAP can be run in parallel in two different ways: across multiple machines
using MPI, and across cores on a single machine using OMP.  The OMP method
is far simpler to use.  Both can be used simultaneously (in which case it
could take up all cores on all machines).

OMP Parallel Processing (multiple cores, single machine)
-----------------------

This program has been parallelized using Open MP (OMP), which is built in
to the g++ compiler.

By default the number of threads used equals the number of cores on the machine
where the program is being run.  Each image line is processed sequentially, but
each sample in the line is assigned to a different core, with "guided,16"
scheduling to keep the workload for each core similar.

Parallel processing can be disabled via the -OMP_OFF keyword.  The number
of threads can be controlled by setting the OMP_NUM_THREADS environment
variable before running the program.  There are numerous other OMP variables
that can be set; see the OMP documentation.  However, the number of threads
is the only one that is likely to be useful in most cases.

.page
MPI Parallel Processing (multiple machines)
-----------------------

MARSMAP can be run in parallel on multiple machines.  This dramatically
improves the wall-clock execution time of the program.  The MPI (Message
Passing Interface) package is used for interprocess communication.  This is
intended for Beowulf-style clusters, but can be used on any set of machines.
Each node processes a strip of the output mosaic, extending the entire width
and 1/n of the height (where n is the number of parallel nodes).

If parallel execution is not desired, nothing special need be done.
The program will work as before on one node with no extra parameters.
The program can be recompiled without using the MPI library by removing
the LIB_MPI definition from the imake file.  However, this is not
necessary - the MPI-linked version will work in serial fashion just fine.

Consult the MPI documentation for details on parallel execution.  However,
for the simplest case, the following can be done:

First, make sure all involved machines can be accessed via ssh from the
main node (the one on which you start the program).  It is convenient
to set up ssh to work without a password (consult your local System
Administrator), but that is not required.

Second, make sure that any required setups are done in your .cshrc file
on each machine.  This includes environment variables and generally
involves source'ing vicset1.csh and vicset2.csh.  The following is
recommended for a .cshrc file:

if ($?V2TOP == 0) then
    setenv V2TOP /usr/local/vicar/dev    (or wherever your VICAR resides)
    source $V2TOP/vicset1.csh
endif
source $V2TOP/vicset2.csh

Third, make sure all pathnames are absolute and accessible from all
machines.  The current directory is not transferred to the remote machines,
so relative pathnames will not work.

Finally, set up a file containing the node name of each machine to use.
Node names can be repeated, in which case multiple processes will be started
on each machine.  The first one becomes the master machine, and is often
(but not necessarily) the one on which the program is being started.  The
nodes should be of the same architecture (e.g. solaris vs. linux).
For example:

lowe% cat machines.solaris 
# Change this file to contain the machines that you want to use
# to run MPI jobs on.  The format is one host name per line, with either
#    hostname
# or
#    hostname:n
# where n is the number of processors in an SMP.  The hostname should
# be the same as the result from the command "hostname"
lowe
pinatubo
potato
wind

Then the program can be run like this:

$MPILIB/bin/mpirun -np 4 -machinefile machines.solaris $MARSLIB/marsmap ...

where -np is the number of processor nodes, -machinefile is the name of
the file above (this pathname can be relative), and ... are the normal
parameters to marsmap (with absolute pathnames).

Each node sends its stdout/stderr output to the controlling terminal,
so messages from each node will be interleaved.  Specifically, the
"line n" status messages will be interleaved.  Careful examination should
show that all line numbers are eventually printed out.

.page
Coordinates
-----------

(Almost) all coordinates and angles are measured in the coordinate system
specified by the COORD parameter.  The default is the FIXED coordinate system.
Fixed coordinates are Surface Fixed for Pathfinder and Mars 98, and the
"special" Site frame for FIDO and MER.  The Instrument coordinates are
Lander for Pathfinder, MVACS for Mars 98, and Rover for FIDO and MER.  See
the COORD parameter for other options.  COORD_INDEX also applies for some
coordinate systems/missions.

With two exceptions, this coordinate system applies to both the input
parameter values, and all values reported by the program to stdout.  It is
also used for the mosaic projection itself.  The exceptions are that the
surface model can optionally be expressed in a different frame using
SURF_COORD or SURF_CSFILE, and the PROJ_ORIGIN parameter can optionally be 
expressed in a different frame using PO_COORD.

Pathfinder and MER Fixed have +x pointing North, and +z down (nadir).
Mars 98 Fixed has +x pointing North, and +z up (zenith).  Azimuth follows
the right-hand rule, meaning Clockwise for MPF and MER and Counterclockwise
for M98.

.page
Usage
-----

Marsmap creates an output image large enough to contain the mosaic.
You may override input azimuth and elevation limits using keywords:
LEFTAZ, RIGHTAZ, TOPEL, BOTTOMEL for Cylindrical and Polar, and MINX,
MINY, MAXX, MAXY for Vertical.

Four types of output mosaics are available. These are:

"CYLINDRICAL"
The mosaic consists of lines of constant elevation and columns of constant
azimuth. An equal scale of pixels/degree exists everywhere. The user can
control the extent of the azimuth and elevation coverage.

The program will try to determine a window containing the input images and
only create enough of the output to contain the inputs. If the inputs are
all over the place, this may not succeed.
For large mosaics near 360 degrees, override the algorithm by specifying the
azimuth limits manually.

"POLAR"
The mosaic consists of radial lines of constant azimuth emanating from the
center of the output. Zero azimuth is up. The scale is only constant 
radially. Nadir is the center of the image.

"VERTICAL"
The mosaic consists of a vertical view assuming the landing site is a plane
surface.  The quaternion places North up and East to the right.  All pixels
have an equal X/Y scale.  Note that the scale is NOT specified via the
SCALE parameter; you must use VERT_SCALE instead.

"SINUSOIDAL"
This experimental projection is like Cylindrical except the image scale in
the azimuth direction is reduced based on the cosine of the latitude.  This
helps reduce the distortion of cylindrical when near the zenith or nadir.  It
is not fully implemented or tested.  The CENTER_AZ and CENTER_EL parameters
define the azimuth and elevation of maximum extent.  These default to the
center of the mosaic and 0 degrees elevation, respectively.

In all cases, labels will be written to the output image specifying all
parameters needed in order to reproject the image, and to convert pixel
coordinates into XYZ view rays in the output coordinate system.  See the
mission SIS for details on what the label items mean.

.PAGE
Overlap Brightness Analysis
---------------------------

If an output filename is given via the OVR_OUT parameter, then marsmap
will additionally create a file containing image overlap information.
Each output pixel is analyzed to see which input images could overlap it.
Then for each unique set of overlapping images, statistics are gathered
on the mean, standard deviation, and number of pixels in the overlapping
area.  This replaces the functionality of the old "marsint" program.
Optionally, statistics can be gathered about the image as a whole ("overall"
overlaps).

This file can then be given to the "marsbrt" program, which will compute
brightness adjustments.  These adjustments can then be supplied back to
marsmap (or any of the mosaic programs) via the BRTCORR parameter.

Normally the statistics are gathered on the given image data (after
radiometric correction, if specified).  USE_HSI can change this to convert
the data to Hue-Saturation-Intensity (HSI) space, gathering statistics on
the Intensity channel.  This is better for correcting color images.  If the
image is not color, the HSI flag is quietly ignored for that image (thus
allowing mixtures of color and BW images).

The RADIUS parameter can be used to control the size of the overlap areas;
setting this to a non-0 value causes all pixels within an overlap to be
within a circle of that radius (centered on the first pixel found).
Pixels outside that area become part of a different overlap.  This makes
the analysis of the data easier and enables things like outlier rejection
to deal with sun glints or parallax isues.

When overlap mode is used, the mosaic overlap is different.  Instead of
the first image coming out on top, in this mode the *last* image in the file
list is on top.  This is simply a side effect of how the overlap analysis
mode works (the output mosaic is rarely actually used in this mode), but the
effect could be useful in certain situations.  The -reverse flag can be used
to get the reverse (last on top) effect without having to use overlap.

In overlap mode, ALL inputs must be loaded into memory simultaneously,
with only one pass through the mosaic.  This means that you may not be able
to handle mosaics that are as large as can be handled without overlap mode
being on, depending on your machine.

Zooming out has relatively little effect on the brightness statistics
and speeds things up considerably.

The HORIZON parameter is generally only useful in overlap mode, to cut off
the horizon so sky pixels are not included in the statistics.  It can be
useful however to cut off sky on polar mosaics (e.g. by setting to the same
value as LIMIT_TOPEL).

Note:  if the BRTCORR or BIAS parameters are supplied, these are applied
*before* overlaps are computed.  That means, from this program's point of
view, the input images are the corrected ones; the original DN values are not
seen.  Thus the statistics file will include the effects of the BRTCORR or BIAS
implicitly.  This means the same BRTCORR or BIAS parameters must be supplied as
inputs to "marsbrt", or the effects of the input BRTCORR/BIAS will not be taken
into account in the correction file output by "marsbrt".

Sophisticated users could take advantage of this effect to build in a difference
that remains even after correction (by supplying BRTCORR/BIAS here but not to
marsbrt), but that is beyond the scope of this help.

.PAGE
Operation
---------

The program uses the appropriate camera model for each input image and
outputs a mosaic in polar (Cylindrical, Polar) or rectangular (Vertical)
coordinates.  Each pixel in the output is transformed from output azimuth
and elevation (or X/Y location for Vertical) to input picture coordinates
in the following steps:
1. Each output pixel defines a unit vector based on the azimuth/elevation
   in the output (this vector is vertical and based on X/Y location for the
   Vertical projection)
2. We compute the intersection of this vector with a surface model.  This is
   normally a tilted plane, possibly with an offset from the origin of the
   spacecraft coordinate system (so the "ground" can be above or below the
   origin).
3. Then this ground point is ray traced back into the input camera images.
   We take the input images in order of input.
4. The first image is selected which can see the ground point.
5. The DN value in the selected input image is bilinearly interpolated
   and placed into the output location.
Input images are loaded into memory 20 at a time.

.page
Index Files
-----------
Optionally, index (IDX and ICM) files can be output.  These collectively
identify what pixel from which input was used for each point in the mosaic.

The index file (IDX_OUT parameter) contains, for each pixel, a halfword
integer (16 bit signed) identifying which image the pixel came from.
0 indicates no value (black in the mosaic).  Numbers from 1-n match the
order of files in the input list file (or INP parameter, if a list file
isn't given).  For most mosaics, the file could be converted to byte using
CFORM (half is used to support more than 255 input files).

The ICM file (ICM_OUT parameter) is an Image Coregistration Map.  It is a
two-band float file containing the line, sample coordinate of the input
pixel used for the point.  This is the same basic format as correlation
maps such as MARSCOR3 produces, except that multiple images are involved
(thus the need for the index file).

.page
Overlays
--------
Marsmap can put a number of overlays on the image.  In general, each overlay
type has its own DN value to use for the overlay.  These can be in color if
the output mosaic is color.

* Grids.  Coordinate grids can be plotted on top of the mosaic, or underneath
(showing through only where the mosaic is black).  Labels identify the grid
lines.  See GRID, GRID_SPACING, GRID_DN, GRID_ZOOM.

* Scale bar.  A scale bar can be plotted on the image.  Since scale varies
across the image it is only valid for the location it is plotted.  Still, it
can give some indication of the scale.  Getting the range right is critical
to sizing the bar properly.  By default, it computes range using the surface
model.  However, this can be very inaccurate in some cases.  If possible,
supply the range using BAR_RANGE.  See BAR, BAR_POS, BAR_SIZE, BAR_DN,
BAR_ZOOM, BAR_HEIGHT, BAR_SPACE, BAR_RANGE, BAR_APPROX.

* Numbers.  Image numbers can be plotted at the center of the image.  This is
useful to show which image is which.  See NUMBER, NUMBER_DN, NUMBER_ZOOM,
NUMBER_START.

* Footprints.  Footprints (image outlines) can be plotted, showing the extent
of the images.  -FOOTPRINT draws the outline in the input images, so you see
the image edges (with some aliasing) but not overlaps.  More useful is -OVERLAP
which draws an outline along the entire image border, including where the image
goes "underneath" its neighbor.  See FOOTPRT, FOOT_DN, MAX_FOOT, FOOT_RANGE,
FOOT_COLOR.

* Tiepoints.  If given a tiepoint file (e.g. from marstie), marsmap can plot
the tiepoint locations on the mosaic in varying ways.  This can be useful
during mosaic production but should generally not be used in a production
mosaic.  See TIEPOINTS, TIE_TYPE, TIE_DN.
.page
Bounding Boxes
--------------
Marsmap will optionally output a file containing bounding boxes for all of
the inputs.  This can be used to (approximately) see where each image is in
the mosaic.

Bounding boxes are created by taking the corners of each input, and some
number of points along the sides, and projecting them into the mosaic.  The
line and sample coordinates trace out a polygon on the mosaic.

Importantly, the bounding boxes are NOT min/max extents.

The number of points on each side is controlled by BBOX_COUNT.  The default
of 3 means that 3 points are projected along each side... 1/4, halfway, and
3/4 between the corners (the corners are always projected).  A BBOX_COUNT of
0 would project only the corners.  Points are evenly spread along the side.

The bounding box file (BBOX parameter) is the name to use for an output
comma-separated value (CSV) file.  The first column is the filename (minus
pathnames) of the input.  The second column is a WKT (Well-Known-Text) string
containing a polygon defining the (sample line) coordinates of the points going
around the edge.

Coordinates are 1-based, per standard VICAR convention (1,1 is the center
of the upper-left pixel).  The bounding box coordinates could well go
negative, or larger than the mosaic size, if the point is off the edge of the
mosaic.  Clipping is left to the user (it can be useful to know the actual
bounds irrespective of clipping).

There are two special cases to consider:

Wrapped polygons.  The cyl, cylper, and sinusoidal projections can wrap around
in azimuth, with the left edge continuing on the right.  If a bounding box
polygon straddles the wrap point, then two lines are created in the bbox file
(with the same filename).  One has the polygon on the left side of the image,
the other has the equivalent polygon on the right.  They are identical, except
the sample values have been translated by the full 360-degree width of the
mosaic at that point (note, for sinusoidal projection this value varies per
line).  The second polygon is provided as a convenience to avoid users having
to figure out the wrapping.

Zenith/nadir polygons.  For the same projections (cyl/cylper/sin), if the
polygon encompasses the zenith or nadir, the polygon does not "close" normally.
In these situations, three extra points are added to the polygon to close it,
going vertically up or down to the mosaic edge.  This happens on both wraps
(zenith/nadir can only occur for wrapped polygons).  The end result is that
both wrapped polygons together encompass the area above or below the line of
edge points, depending on whether it's zenith or nadir.

.page
Limitations
-----------

This program only looks at azimuth & elevation, or X and Y. It has no concept
of parallax.  For parallax-corrected mosaics, see marsortho.

For perspective corrected mosaics use marsmos or marsmcauley.

History
-------
  1994-04-30 jjl - Initial mpfmap by J Lorre. 
  1998-11    rgd - Multimission conversion by B. Deen
  2010-01    rgd - Added overlap support for brt corr (replacing old marsint)
  2012-11-07 rgd - Added experimental sinusoidal projection
  2013-04-02 rgd - Added support for HSI space overlaps
  2015-07-13 rgd - Added OMP-based parallelization
  2016-11-30 rgd - Added IDX and ICM output files
  2019-10-17 wlb - Initialized some variables; cleaned up some -Wall warnings
  2020-03-26 rgd - Added scale bar support
  2020-04-30 wlb - Replaced sprintf calls
  2020-05-05 youlu - Added -zenith_scaled_rad capabilities
                     Added DNSCALE_IN, DNSCALE_OUT, and TAU parameters
  2020-06-10 rgd - Added -reverse
  2023-02-07 rgd - Added bounding boxes and FOOT_RANGE/_COLOR

COGNIZANT PROGRAMMER:  Bob Deen

.LEVEL1
.VARI INP
Input image(s) or
file list.

.VARI OUT
Output image.

.VARI NAVTABLE
Corrected navigation
filename.

.VARI PROJECTION
Output projection type.

.VARI ZOOM
Zoom factor for
image.

.VARI BAND
The BSQ band number.

.VARI INPUT_RANGE
The range of inputs to
actually mosaic.

.VARI BIAS
Set of values to bias
each tile in the mosiac.

.VARI BRTCORR
Input file containing
brightness corrections.

.VARI SCALE
Output scale in
pixels/degree.
Cyl, Polar, Sin only

.VARI LEFTAZ
Left output azimuth
Cyl and Sin only.

.VARI RIGHTAZ
Right output azimuth
Cyl and Sin only.

.VARI TOPEL
Top output elevation
Cyl, Polar, Sin only.

.VARI BOTTOMEL
Bottom output
elevation
Cyl, Sin only.

.VARI LIMIT_TOPEL
Limit to top elevation.
Not to exceed value.

.VARI LIMIT_BOTTOMEL
Limit to bottom elevation.
Not to exceed value.

.VARI PROJ_ORIGIN
Overrides center of
projection.
Cyl, Polar, Sin only.

.VARI PO_COORD
Coordinate system used to define
the PROJ_ORIGIN parameter.

.VARI UP_AZ
Overrides azimuth at
top of image
Polar only.

.VARI VERT_SCALE
Output scale in 
meters/pixel
Vertical only.

.VARI MINX
Minimum extent of
mosaic in X direction
(meters)
Vertical only.

.VARI MAXX
Maximum extent of
mosaic in X direction
(meters)
Vertical only.

.VARI MINY
Minimum extent of
mosaic in Y direction
(meters)
Vertical only.

.VARI MAXY
Maximum extent of
mosaic in Y direction
(meters)
Vertical only.

.VARI CENTER_AZ
Center azimuth of
Sinusoidal projection.

.VARI CENTER_EL
Center elevation of
Sinusoidal projection.

.VARI WRAP_AZ
Azimuth to wrap a complete
mosaic.

.VARI WRAP_EL
Elevation to wrap a complete
mosaic.

.VARI WRAP_COORD
Coordinate system of the
associated WRAP_AZ and WRAP_EL.

.VARI GRID
Specifies grid type
Defaults on.

.VARI GRID_SPACING
Overrides spacing of
lines in grid.

.VARI GRID_DN
DN to use for the
grid and grid labels.

.VARI GRID_ZOOM
Zoom factor for the
grid labels.

.VARI NORMAL
Surface normal vector.

.VARI GROUND
Surface ground point.

.VARI SURF_COORD
Coordinate system used to define
surface parameters.

.VARI SURFACE
The type of mars
surface to use INFINITY, PLANE, 
SPHERE1, SPHERE2, MESH.

.VARI SURF_MESH 
Mesh file for surface model

VARI SURF_CSFILE 
File containing CS for surface
model

.VARI NUMBER
Numbers the center of
each input.

.VARI NUMBER_DN
DN to use for the
input numbers.

.VARI NUMBER_ZOOM
Zoom factor for the
input numbers.

.VARI NUMBER_START
Where to start counting
the input numbers.

.VARI FOOTPRT
Draws footprints around
each image.

.VARI FOOT_DN
DN to use for the
footprint numbers.

.vari MAX_FOOT
Maximum image number in which
to draw footprints and numbers.

.VARI FOOT_RANGE
Min and max image number in which
to draw footprints and numbers.

.VARI FOOT_COLOR
Text file indicating color to
use for footprints and numbers.

.VARI RAD
Turns on or off
radiometric correction.

.VARI TAU
atmospheric opacity

.VARI DNSCALE
DN scaling factor.

.VARI DNSCALE_IN
Selects the mode for
applying scaling parameters

.VARI DNSCALE_OUT
Selects the mode for
scaling outputs

.VARI DNSCALE
DN scaling factor.

.VARI CONFIG_PATH
Path used to find
configuration/calibration
files.

.VARI POINT_METHOD
Specifies a mission-
specific pointing
method to use

.VARI MATCH_METHOD
Specifies a method 
for pointing corrections.

.VARI MATCH_TOL
Tolerance value for
matching pointing params
in pointing corrections file.

.VARI NOSITE
Disables coordinate
system sites.

.VARI MODE
Specifies in-memory or
incremental write to file
processing.

.VARI INTERP
Turns on or off
the interpolation.

.VARI FOV_LIMIT
Overrides limits on
input image FOV

.VARI REVERSE
Stacks in reverse order

.VARI OMP_ON
Turns on or off parallel
processing (multiple threads,
single machine). Default: on

.VARI DATA_SET_NAME
Specifies the full name given
to a data set or a data product.

.VARI DATA_SET_ID
Specifies a unique alphanumeric
identifier for a data set or data
product.

.VARI RELEASE_ID
Specifies the unique identifier
associated with the release to the
public of all or part of a data set.
The release number is associated with
the data set, not the mission.

.VARI PRODUCT_ID
Specifies a permanent, unique 
identifier assigned to a data
product by its producer.

.VARI PRODUCER_ID
Specifies the unique identifier
of an entity associated with the 
production a data set.

.VARI PRODUCER_INST
Specifies the full name of the
identity of an entity associated
with the production of a data set.

.VARI TARGET_NAME
Specifies a target.

.VARI TARGET_TYPE
Specifies the type of a named target.

.VARI RSF
Rover State File(s) to use.

.VARI DEBUG_RSF
Turns on debugging of RSF
parameter.

.VARI COORD
Coordinate system to use.

.VARI COORD_INDEX
Coordinate system index for
some COORD/mission combos.

.VARI FIXED_SITE
Which site is FIXED for
rover missions.

.VARI FIXED_NAME
Overrides what CS type is
allowed for the FIXED frame

.VARI SOLUTION_ID
Solution ID to use for
pointing correction.

.VARI TIEPOINTS
Input tiepoint file for
tiepoint visualization.

.VARI TIE_TYPE
Type of tiepoint
visualization to perform.

.VARI TIE_DN
DN value for tiepoint
visualization.

.VARI HORIZON
Horizon value for overlap
mode.

.VARI OVR_OUT
Output file for overlap mode;
also turns on overlap mode.

.VARI MAX_OPEN
Max # of files per pass.

.VARI START_KEY
Start key in overlap output
XML file.

.VARI RADIUS
Maximum size of overlap
areas (0 means no max).

.VARI WHICH_OVR
Create normal or overall
overlaps, or both.

.VARI USE_HSI
Turns on HSI mode for overlaps.

.VARI IDX_OUT
Optional output
index filename.

.VARI ICM_OUT
Optional output
coregistration coordinate
filename.

.VARI BAR
Turns on scale bar.

.VARI BAR_POS
Sets location for scale bar.

.VARI BAR_SIZE
Sets overall desired size
of scale bar.

.VARI BAR_DN
DN to use for the scale
bar and bar labels.

.VARI BAR_ZOOM
Sets the zoom factor for
the scale bar text.

.VARI BAR_HEIGHT
Sets the height of the
scale bar end caps.

.VARI BAR_SPACE
Sets the spacing between
the scale bar and label.

.VARI BAR_RANGE
Overrides the range for
the scale bar.

.VARI BAR_APPROX
Controls whether a tilde (~)
is output for scale bar.

.VARI BBOX
Bounding box filename

.VARI BBOX_COUNT
Number of points per edge
for a bounding box

.LEVEL2
.VARI INP
There are two options for describing input images.

Either:
List the image file names

Or:
provide an ascii file with the file names listed, one per record.

.VARI OUT
Output image containing the mosaic.

By default, the output will have the same number of bands
as the input with the most bands, and all bands will be processed.  Inputs
with fewer than that many bands repeat their last band, so bw and color images
can be mixed.  If BAND is specified, the output will have a single band.

.VARI NAVTABLE
Corrected navigation filename.
If marsnav was run on the input images it created a table of corrected
pointing parameters. If you refer to this table using NAVTABLE it
will override the pointing parameters (e.g. azimuth and elevation) in the
picture labels, giving you a better registered mosaic.

.VARI PROJECTION
The output projection type. 
Options include CYLINDRICAL (the default), POLAR, VERTICAL, and SINUSOIDAL.

.VARI ZOOM
The zoom factor for the image.  This is a shortcut to computing and
specifying SCALE or VERT_SCALE.  A zoom of 2 will make the image twice
as big as it "naturally" wants to be (or twice as big as the specified
SCALE/VERT_SCALE).  A zoom of .25 will make it one quarter the "natural"
size.

.VARI BAND
The BSQ input file band number. Defaults to all bands in image, but will use
a value of 1 if an invalid band is specified. Providing a value will cause
only that band to be processed.

.VARI INPUT_RANGE
The range of inputs to actually mosaic.  Normally all inputs are mosaicked.
However, if this parameter is specified, all inputs will be used to calculate
the output projection, but only the inputs in the specified range will be
mosaicked.  This allows the generation of a large mosaic to be spread out
over several nodes on a network, with a program like FASTMOS used to combine
all the outputs together.  Note that any underlays (annotation that goes
under the image) should be put on the *last* mosaic only for FASTMOS;
overlays (that show on top of everything) should be on all images (or at
least the first).

The input numbers are 1-based.  If only one number is specified, it is the
starting number; the end defaults to the # of inputs.

.VARI BIAS
Specifies values to multiply DN values of each input
picture. Defaults to 1.0 for each picture. For example, 
if there are five input images, then try
BIAS=(1.0, 1.33, 0.8, 1.90, 1.0)

BIAS is obsolete now; it has been replaced by BRTCORR.

.VARI BRTCORR
Specifies an input file containing brightness corrections.  This is an
XML file that comes from a program like marsbrt which contains correction
factors for each image.  These factors may be additive or multiplicative
constants to be applied to the image, or other corrections that may be
implemented in the future.

The BRTCORR mechanism is intended to replace BIAS.  Using them together
should be avoided because the labels will not reflect both (the BIAS
overrides).  If you do, however, the BRTCORR corrections are applied to
the data first, before BIAS.

.VARI SCALE
The output mosaic scale in pixels/degree.  Defaults to the natural scale
of the camera.  This natural scale is printed out for reference.
NOTE:  This is for Cylindrical, Polar, and Sinusoidal only.  See
VERT_SCALE for Vertical projection.

.VARI LEFTAZ
Azimuth of the left edge of the output mosaic.  Defaults to the
smallest azimuth of any corner or edge-center of the input images.
Cylindrical and Sinusoidal only.

.VARI RIGHTAZ
Azimuth of the right edge of the output mosaic.  Defaults to the
largest azimuth of any corner or edge-center of the input images.
Cylindrical and Sinusoidal only.

.VARI TOPEL
Elevation of the top of the output mosaic.  Defaults to the
largest elevation of any corner or edge-center of the input images.
Used for Cylindrical and Sinusoidal as well as Polar (unlike the
other az/el limits).

.VARI BOTTOMEL
Elevation of the bottom of the output mosaic.  Defaults to the
smallest elevation of any corner or edge-center of the input images.
Cylindrical and Sinusoidal only.

.VARI LIMIT_TOPEL
Limit to top elevation.  If specified, the top elevation will not
go over this value - but could be under this value if the data doesn't
go that high.

.VARI LIMIT_BOTTOMEL
Limit to bottom elevation.  If specified, the bottom elevation will not
go under this value - but could be over this value if the data doesn't
go that low.

.VARI PROJ_ORIGIN
Overrides the center of projection.  This is an XYZ point from which
all of the azimuth/elevation rays emanate.  It defaults to the average
of all the input camera locations.  Note that the coordinate frame used
to express this value is usually the projection frame (COORD) but can be
modified using PO_COORD.  This allows you to, for example, specify the
origin in a constant location relative to the rover (in rover frame, say
at the mast rotation point) while making the mosaic in site or local_level
coordinates.
Cylindrical, Polar, Sinusoidal only.

.VARI PO_COORD
Coordinate frame used to specify PROJ_ORIGIN.  If not given, the frame
defaults to that given in COORD.  This parameter is ignored unless
PROJ_ORIGIN is specified.

.VARI UP_AZ
Overrides the azimuth at the top of the image.  This has the effect of
rotating the image, with the given azimuth being straight up.
Polar only.

.VARI VERT_SCALE
The output mosaic scale in meters/pixel for Vertical projections only.
(See SCALE for Cylindrical and Polar).  There is no "natural" default
for this parameter, so it arbitrarily defaults to .01 meters/pixel.

.VARI MINX
Specifies the minimum extent of the image in meters in the X direction
(down, or south).  The picture height is from MINX to MAXX.  Defaults
to -MAXX which mimics the behavior before MINX was available.

.VARI MAXX
Specifies the maximum extent of the image in meters in the X direction
(up, or north).  The picture height is from MINX to MAXX.
Defaults to 5 meters.

.VARI MINY
Specifies the minimum extent of the image in meters in the Y direction
(down, or south).  The picture height is from MINY to MAXY.  Defaults
to -MAXY which mimics the behavior before MINY was available.

.VARI MAXY
Specifies the maximum extent of the image in meters in the Y direction
(right, or east).  The picture width is from MINY to MAXY.
Defaults to 5 meters.

.VARI CENTER_AZ
Azimuth of the center of the sinusoidal projection.  This is the azimuth at
which the "cusps" (where the zenith and nadir converge) appear.  Defaults
to the center of the mosaic.
Sinusoidal only.

.VARI CENTER_EL
Elevation of the center of the sinusoidal projection.  This is the elevation
from which the cosine terms are measured.  So anything at this elevation will
be full-scale (just like Cylindrical).  The azimuth scale changes as a function
of the cosine of the angle between the point's elevation and the center
elevation.  In essense, this defines where the "equator" of the projection is.
Defaults to 0 degrees.
Sinusoidal only.

.VARI WRAP_AZ
WRAP_AZ is an optional argument used to define a specific wrapping location 
for a mosaic.  It is only used for a complete 360 mosaic, if the mosaic
is not full the wrap should occur where the data is missing.  Can be defined
in any coordiante system with WRAP_CS. Input in degrees.

.VARI WRAP_EL
Needed for supporting the functionality of WRAP_AZ in converting coordinate systems.
The default value of 0 is sufficient for the vast majority of use cases.

.VARI WRAP_COORD
Coordinate system of the WRAP_AZ input. This is helpful if you would like to define
a wrapping location in a coordinate system different than your other mosaic parameters.
An example of this functionality would be wrapping in the rover frame at WRAP_AZ=180
(back of the rover) to move the rover hardware to the edges of the mosaic.

.VARI GRID
Specifies the type of grid to use.  Valid values are:

NOGRID - No grid is generated
GRID - A grid is generated "underneath" the image, so it shows only where
    there is no image
GRID_OVERLAY - A grid is generated "on top of" the image, so it shows
    everywhere.
GRID_LABELS - Plots the numbers and text only, without the grid lines.
    Useful when combined with INPUT_RANGE.

The grid consists of azimuth/elevation lines (Cylindrical, Polar), or
X/Y lines (Vertical) and labels for each line along the edges (down from
the center for Polar Elevation).

The default is GRID.

See also GRID_SPACING, GRID_DN, and GRID_ZOOM.

.VARI GRID_SPACING

Overrides the spacing of the grid lines.  Both sets of lines use the
same value (i.e. azimuth and elevation can't be different).  See the GRID
keyword.

Defaults to 10 degrees for Cylindrical and Polar, and 1 meter for Vertical.

.VARI GRID_DN
The DN to use for the grid and grid labels.  See GRID keyword.  Note, a
GRID_DN of 0 is transparent (i.e. ignored).  If the number of DN's supplied
is less than the number of bands, the last value is repeated as necessary.

.VARI GRID_ZOOM
The zoom factor to use for the grid labels (i.e. how big the text is).
Must be a positive integer, 1 is the smallest possible.  See the GRID keyword.

.VARI NORMAL
The local mars surface normal vector coordinate system specified by SURF_COORD 
parameter (defaults to surface fixed).
For most pan/tilt cameras, if the lander is not tilted this vector
would be: normal=(0,0,-1).  ie: x_component=0, y_component=0, z_component=-1.
This need not be a unit vector.  This vector is used to define the
surface plane to which image points are projected in order to minimize
parallax.
For SPHERE1/2 surface models, normal's first parameter is used to
denote sphere's radius.  Thus to describe sphere of radius R, user
would specify normal=(R, 0, 0).

.VARI GROUND
Any point on the surface, in coordinate system specified by SURF_COORD parameter
(defaults to surface fixed).  This defines where the tilted plane is in space.  
Although any point may be used, normally the point just "under" the origin is selected.
Defaults:
Mars Pathfinder:  (0.0, 0.0, 0.0)       (lander zero point is on the ground)
Mars 98 Lander:   (0.0, 0.0, 1.64)      (lander zero point is on top of deck)
MER           :   (0.0, 0.0, 0.294)
For MER images taken on top of the lander, the ground is roughly at (0.0, 0.0, 0.7)
For SPHERE1/2 surface models, GROUND parameter is used to denote sphere's
center.  
    
.VARI SURF_COORD
The coordinate system that surface parameters like GROUND and NORMAL are defined in.
For valid values refer to COORD parameter description.  The interpretation of the 
values is dependent on the mission. Defaults to surface fixed coordinate system.
Note that no validation is done for input strings because COORD is using the same
values.  So user needs to be extra careful in specifying SURF_COORD value.  For 
example COORD=local would be correctly interpreted to mean LOCAL_LEVEL because of
validation process.  On the other hand specifying SURF_COORD=local would lead
to underlying code treating the input value as invalid and reverting to default
which is FIXED frame.  So the values for SURF_COORD should be spelled exactly as
found in the list of valid values for COORD parameter.    

.VARI SURFACE
The type of mars surface to use. The surface is used to intercept view rays
emanating from the cameras in order to model out parallax between the
stereo cameras. The options are surface=INFINITY which means no surface
is used, surface=PLANE (the default case). If surface = PLANE then the plane
is defined by the NORMAL and GROUND parameters.  For the cases when PLANE 
doesn't match local topography sufficiently well, here are two sphere surface
models: surface=SPHERE1 and surface=SPHERE2.  SPHERE1 is useful to model
convex surfaces like hills, it returns closest(first) ray-surface intersection 
point.  SPHERE2 is useful to model concave surfaces, like crater when the
camera point is outside looking in, it returns farthest(second) ray-surface 
intersection point.  For the case when camera is inside the sphere surface, 
like rover sitting in the crater, there is only a single intersection point
and SPHERE1 and SPHERE2 behave exactly the same. Last, MESH is a surface
model defined by a mesh file (.obj) which path is given with SURF_MESH.

.VARI SURF_MESH 
Mesh OBJ file to use as the surface model. For the mesh to be used,
SURFACE must be set to MESH. The coordinates of the mesh vertices can be 
expressed in any CS. However the mesh CS must be supplied via SURF_CSFILE.
If SURF_CSFILE is not used, then the mesh is assumed to be to the CS that
results from COORD or SURF_COORD

VARI SURF_CSFILE 
File name of a vicar file whose CS (contained in the labels) will be read and
assigned to the SURFACE model. The type of image and its content are of no
interest, we are just reading the CS. That CS will supersede any other surface 
CS definition (COORD or SURF_COORD). Its typical use is to supply a CS to a
given mesh file (expectedly the XYZ from which the mesh is computed from, but
doesn't have to). But SURF_CSFILE could be use to define a CS in which NORMAL 
and GROUND for a PLANE surface are expressed in.


.VARI NUMBER
Causes the program to place an ASCII number into the mosaic at the center of
where each input picture falls.  Numbers begin at 1 and increase in the
order of the filenames in the input.  This permits one to determine which
picture populated which part of the mosaic.  Defaults to NONUMBER.

The DN to use for the numbers is set by NUMBER_DN, and the zoom factor for
the numbers by NUMBER_ZOOM.

Normally numbers are written in order, 1 to n (or, NUMBER_START to n).
However, this is not quite right per the stacking order, which puts the
first on top.  If multiple images stack, -NUMBER will show the highest
number while the imagery is from the lowest.

This is fixed by -INV_NUMBER.  Specifying -INV_NUMBER is the same as -NUMBER
except they're plotted in the opposite order... bottom to top.  The result
is the top image "wins", just as with the mosaic.  In a perfect world, this
would be the default, but there's enough history with the current behavior
of -NUMBER to be hesitant to change it.

.VARI NUMBER_DN
The DN to use for the image numbers.  See NUMBER keyword.  Note, a
NUMBER_DN of 0 is transparent (i.e. ignored).  If the number of DN's supplied
is less than the number of bands, the last value is repeated as necessary.
See also FOOT_COLOR.

.VARI NUMBER_ZOOM
The zoom factor to use for the image numbers (i.e. how big the numbers are).
Must be a positive integer, 1 is the smallest possible.  See NUMBER keyword.

.VARI NUMBER_START
Specifies the starting point for the image numbers (i.e. the first input is
assigned this number for the image number overlays, and they increment from
there).  Normally this will be 1, but could be set differently if only part
of a larger mosaic is being generated.

.VARI FOOTPRT
Causes "footprints" to be drawn around each input image in the output
mosaic.  This is useful to show overlap of the images, and is often used
in conjunction with NUMBER.

There are three values:

NOFOOTPRINT - No footprint is displayed.  This is the default.
FOOTPRINT - Shows the footprint only where the edge of the image is "on top".
    Useful to see which image is laid down first.  If the DN (FOOT_DN) has
    insufficient contrast, the footprint may not be very visible, since it
    is interpolated like normal pixels.
OVERLAP - shows the entire footprints of all images, even if another image
    overlaps the edge of the input.  Useful to see how much overlap there is
    between images.  OVERLAP mode will slow down the program down somewhat,
    since the borders are drawn in after the mosaic is created (to ensure that
    all borders are drawn).

The DN to use for the footprints is set by FOOT_DN.  Note that the footprint
replaces (hides) the outer row of pixels in the image.

.VARI FOOT_DN
The DN to use for the footprints.  See FOOTPRT keyword.  Note, a
FOOT_DN of 0 is transparent (i.e. ignored).  If the number of DN's supplied
is less than the number of bands, the last value is repeated as necessary.
See also FOOT_COLOR.

.vari MAX_FOOT
Normally, if footprints or image numbers are turned on, all images will
get them.  This parameter allows you to specify a maximum image number for
footprints and numbers.  Any images beyond this image number will not get
footprints or image numbers.  This can be useful if you want to include
"background" images in the mosaic that are not numbered (such as for a
finder chart).  Just put those images at the back of the file list.
See also FOOT_RANGE.

.VARI FOOT_RANGE
Specifies the range over which footprints and numbers will be plotted.
The max is the same as FOOT_RANGE (the smaller of the two is used), but the
min provides more control.

.VARI FOOT_COLOR
The name of a text file that provides colors for the footprints and image
numbers.  The text file contains a dash-separated range of inputs (1-based),
a space, and then the three R,G,B components (comma-separated, no spaces) to
use for that number range.  If a certain image number is not found in this
file, it defaults to FOOT_DN or NUMBER_DN.

The file format must be exact (the parser is not robust).  Three components
are required at all times, regardless of the number of bands in the mosaic.

Example:

1-21 4095,1,1
22-31 4095,1,4095
32-108 2816,3136,3552
109-110 1,4095,4095
111-111 480,2304,4080
112-137 1,4095,1
138-139 1,1,4095
140-140 1,1,4095

.VARI TAU
Tau is a measure of atmospheric opacity.  The default for normal Mars conditions
is 0.6. Higher tau means more dust in the atmosphere.

.VARI RAD
Keyword paramter that selects radiometric correction mode of the input images.
RAD (the default) enables the correction (for missions/instruments which support
it); NORAD disables it; ZENITH_SCALED_RAD the radiometry you'd get if the sun
were at zenith on a clear day.  The scaling factor is a combination of solar
elevation and tau, and will have the effect of brightening up images that
were taken near sunset.

.VARI DNSCALE
DN scaling factor.  This factor is used to convert between physical
radiometric units (watts/(meter**2, steradian, micron)) and DN's for the
output mosaic.  The formula is:

true_radiance = offset + (factor * DN)

where "offset" is 0.0 in the current implementation, and "factor" is
1.0 / DNSCALE (making the formula equivalently:  offset + (DN / DNSCALE)).
The offset and factor (1.0/DNSCALE) are written to the output mosaic label.

.VARI CONFIG_PATH
A colon-separated list of directories in which to look for configuration
and calibration files.  Environment variables are allowed in the list
(and may themselves contain colon-separated lists).  The directories are
searched in order for each config/cal file when it is loaded.  This allows
multiple projectes to be supported simultaneously, and allows the user to
override any given config/cal file.  Note that the directory structure below
the directories specified in this path must match what the project expects.
For example, Mars 98 expects flat fields to be in a subdirectory named
"flat_fields" while Mars Pathfinder expects them to be directly in the
directory specified by the path (i.e. no intermediate subdirectories).

.VARI DNSCALE_IN
Three-state keyword parameter to control whether or not to apply scaling
parameters to reconstruct floating point values.

RESCALE says to do the conversion, and reconstitute the float based on the
RADIANCE_* keywords.  Note that if there are no RADIANCE_* keywords,
this is a no-op, so it doesn't hurt to turn this on for non-scaled images.

NOSCALE says to not to the conversion.  This is what we do now.  If your
inputs are dynamically scaled, you'll probably get surprising results.

AUTOSCALE says to figure it out based on the DNSCALE_OUT parameter (see
DNSCALE_OUT for details) and -ZENITH_SCALED_RAD flag. If DNSCALE_OUT is STATIC,
then it is NOSCALE; if DNSCALE_OUT is DYNAMIC/IDENTIT or RAD=ZENITH_SCALED_RAD,
then it is RESCALE.

.VARI DNSCALE_OUT
Three-state keywork parameter to scale output DN values.

If -STATIC is enabled, then the value specified by DNSCALE will be used
as the DN scaling factor (note the unit scaling factor as well) for all
radiometric models supplied.

If -DYNAMIC is enabled, then the maximum responsivity value across all
radiometric models will be used as the DN scaling factor (note the unit
scaling factor as well).

If -IDENTITY is enabled, then no scaling will be applied.

.VARI MATCH_METHOD
Specifies a method for pointing corrections.

Loose method matches with pointing parameters of the image.
Tight method matches with unique id of the image.

.VARI MATCH_TOL
Tolerance value for matching pointing parameters in the pointing corrections
file.  Used if MATCH_METHOD=LOOSE
Default value is pretty arbitrary, though seems to work well so far....

.VARI POINT_METHOD
Specifies a mission-specific pointing method to use.  Normally this
parameter is not used, in which case the "default" pointing methods
are used.  Some missions may have special, or alternate, pointing
methods available, which are indicated by this string (for example,
backlash models, using arm joint angles instead of x/y/z/az/el, etc).
A substring search is used, so multiple methods (where that makes sense)
can be specified by separating the keywords with commas.

Note that nav files created using one pointing method will most likely
not be compatible with a mosaic created using a different pointing method.

The methods available vary per mission, but some methods available at
the time of this writing are:

BACKLASH : Mars 98 SSI only.  Selects a backlash pointing model,
which adjusts the telemetered azimuth and elevation values based on
knowledge of the camera's mechanical backlash and the direction the
motor was travelling when the image was taken.

Values useful to marsmap:

BORDER_LEFT:  Specifies, in pixels, a border to cut off on the left side of
  each input image.  This can be used to eliminate edge effects in input images.
BORDER_RIGHT:  Same but for the right side.
BORDER_TOP:  Same but for the top edge.
BORDER_BOTTOM:  Same but for the bottom edge.

New ones (as of 2012/10/26) not mentioned elsewhere:

RMC_MAX_INDEX: Specifies the max # of indices to use when comparing RMC's.
  Effectively makes the RMC only this long.  Useful to ignore pose changes
  due to IMU jitter, or when using the RSF file.  Default is 10.
RMC_EPSILON: Epsilon value for comparison of coordinate system values.  Even
  if the RMC's match, a new CS is created if the values differ by more than
  this epsilon.  Setting it high means more CS's will considered equal.
  Default: 1e-3
MARGIN_LEFT:  Like BORDER_LEFT, but the margin is scaled based on the
  downsample factor of the image.  So if the margin is needed to hide CCD
  defects, the same area of the CCD will be cut off regardless of downsampling.
MARGIN_RIGHT, MARGIN_TOP, MARGIN_BOTTOM:  Same as above.

.VARI NOSITE
Disables all label-derived parameters to the Site mechanism which underlies
coordinate systems.  This forces all sites to be identical, with all rotations
and offsets set the same.  In the case of MPF or Mars 98, this disables
the lander quaternion and offset (sets them to identity and 0, respectively).
This option should not be used with images taken from different vantage
points (e.g. the spacecraft moved, or mixing a lander and a rover) or
invalid results will be obtained.  The use of this option invalidates the
Fixed coordinate frame; any values reported in the Fixed frame will not
correctly reflect the orientation of the lander/rover.

Obviously, this option should be rarely used; it is intended for when the
image labels defining the site are invalid or inconsistent.

.VARI MODE
MARSMAP can operate in one of two modes.  The first is the traditional
method (INCREMENTAL), where each line is written to the mosaic output
file as it is processed.  The second (MEMORY) is the default; it stores
the entire mosaic in memory and writes it to the file only when it is
complete.

.VARI INTERP
Keyword parameter that turns on or off interpolation of the output
images pixel values.  INTERP (the default) enables the interpolation, 
while NOINTERP disables it.

MEMORY mode (the default) is somewhat faster (perhaps 10%, although
that's highly variable), and is required if doing parallel processing.
However, the memory requirements could become prohibitive for large
mosaics.

INCREMENTAL mode is slower, but has the advantage of being able to view
the mosaic as it is being generated.  An image viewer such as xvd can be
used to monitor the progress of the mosaic.  By reloading periodically,
one can do quality control while a long mosaic is in progress.  Also,
the memory requirements are drastically lower in this mode.

.VARI FOV_LIMIT
Overrides the default limits (89.4, 30) on size of the FOV for the input
image.  The FOV really affects how far away from the pointing vector we can
be before we say nope, this image doesn't apply.  The actual FOV is calculated,
but these limits exist as sanity checks.  Note that the limit is input in
degrees, with the larger value first.  If either limit is specified, both
must be.

.VARI REVERSE
If -REVERSE is turned on, the program will stack the outputs in reverse
order, with last on top instead of first on top.  This is implemented
inefficiently in that we still go through the list in top-down order, but
we just don't stop once a pixel is found.  So every input that overlaps is
mosaicked to the output, and the last one survives.  Note that this is
exactly what OVR does, but intentionally rather than as a side effect.

.VARI OMP_ON
Turns on or off parallel processing using OMP, which uses multiple cores on
a single host machine.  The default is on.  The main help describes some
environment variables that can further control parallel processing.  Note
that this program uses standard OpenMP (which is built in to the gcc/g++
compilers), so further details can be found in the OpenMP documentation.

.VARI DATA_SET_NAME
The DATA_SET_NAME typically identifies the instrument that acquired the
data, the target of that instrument, and the processing level of the data.
This value is copied to the output label, property IDENTIFICATION, 
keyword DATA_SET_NAME.

.VARI DATA_SET_ID
The DATA_SET_ID value for a given data set or product is constructed
according to flight project naming conventions.  In most cases the 
DATA_SET_ID is an abbreviation of the DATA_SET_NAME.
This value is copied to the output label, property IDENTIFICATION, 
keyword DATA_SET_ID.

.VARI RELEASE_ID
When a data set is released incrementally, such as every three months during
a mission, the RELEASE_ID is updated each time part of the data set is released.
For each mission(or host id if multiple spacecrafts), the first release of a data
set should have a value of "0001".
This value is copied to the output label, property IDENTIFICATION, 
keyword RELEASE_ID.

.VARI PRODUCT_ID
Specifies a permanent, unique identifier assigned to a data product by 
its producer. Most commonly, it is the filename minus the extension.
This value is copied to the output label, property IDENTIFICATION, 
keyword PRODUCT_ID.

.VARI PRODUCER_ID
Specifies the unique identifier of an entity associated with the
production of a data set. This value is copied to the output label,
property IDENTIFICATION, keyword PRODUCER_ID.

.VARI PRODUCER_INST
Specifies the identity of a university, research center, NASA center or other
institution associated with the production of a data set.
This value is copied to the output label, property IDENTIFICATION, keyword 
PRODUCER_INSTITUTION_NAME.

.VARI TARGET_NAME
Specifies a target.  The target may be a planet, satelite, ring, region, feature,
asteroid or comet.  This value is copied to the output label, property
IDENTIFICATION, keyword TARGET_NAME.

.VARI TARGET_TYPE
Specifies the type of a named target. This value is copied to the output 
label, property IDENTIFICATION, keyword TARGET_NAME.

.VARI RSF
Rover State File.  This is a list of filenames to load containing
Rover State information.  These files contain position and orientation
information for a rover (or other mobile spacecraft) at various sites.
They are in XML format.  See the "Rover Motion Counter (RMC) Master File SIS"
for details on these files.

Rover State Files have a priority order.  The files listed first have
the highest priority.

Environment variables may be used in the list.

For MER, if a directory is specified, then that directory is searched for
RMC Master files and any found are loaded.  The directory structure and
filename convention is covered in the RMC SIS.  The directory specified
is the one containing "master", so if <dir> is the name specified in the
RSF parameter, the following files will be searched for:

<dir>/master/<mission>_Master.svf
<dir>/master/<mission>_Site_<n>_Master.rvf

The name of each file loaded is printed to the stdout log for reference.

.VARI DEBUG_RSF
If enabled, this causes the internal database of RMC locations to be
printed out to the stdout log.  This is after the RSF files have been
loaded and the coordinate systems read from the input label(s).

.VARI COORD
The coordinate system to use for all input parameters and output values,
and the mosaic itself.  The interpretation of the values is dependent on
the mission.  Some representative missions are listed here:

Fixed - The Fixed frame (default).  This is the ultimate reference frame
    (see also FIXED_SITE for rover missions).
Instrument - The "natural" frame for the instrument (of the first input
    image).  MPF: Lander or Rover; M98: MVACS; MER: Rover.
Site - A major Site frame.  For rover missions, COORD_INDEX specifies which
    Site frame to use.  Non-rover missions treat this as Fixed.
Rover - An instance of the Rover frame.  For rover missions, COORD_INDEX
    specifies which instance of the rover frame to use.  Non-rover mission
    use the spacecraft frame (e.g. Lander for M98).
Local_Level - An instance of a Local Level frame.  This is typically
    coincident with the Rover frame (in XYZ) but oriented toward North
    like the Site and Fixed frames.  For MER, this is an instance of a
    Drive index move.

.VARI COORD_INDEX
The index specifies which instance of a coordinate system to use.  It is
currently applicable only to rover-based missions, but could have other
uses.  The index is equivalent to the Rover Motion Counter (RMC) for MER
and FIDO.

For MER/FIDO, there are many Site frames.  Each is numbered with a single
index.  For Site Frames, coord_index specifies which to use.  Likewise,
there are many Local_Level and Rover frames, corresponding to values of
the RMC.  The multiple instances of this frame are selected by COORD_INDEX.

Generally COORD_INDEX defaults sensibly so you don't usually need to
specify it.  It will default to the instance used by the first input.

.VARI FIXED_SITE
Specifies which major Site is the "Fixed" Site for this run.

Historically, MPF and M98 had a single "Surface Fixed" frame which never
moved, and which all other coordinate system frames were referenced to.
With the advent of long-range rovers (such as MER and FIDO), that became
insufficient.  The rover traverses far enough that errors in knowledge of
coordinate system offset and orientation become unacceptable.

For this reason, a system of major Sites was introduced.  Periodically
during the mission, a Site frame is declared.  This then becomes the
reference frame for all activities until the next Site is declared.
References are kept local, and errors don't propogate across Sites.

However, if images from more than one Site are combined together, the
Site's must be placed relative to each other.  Therefore a single reference
frame is still needed to combine different sites.

The FIXED_SITE parameter controls which of the major Site frames is
the reference ("fixed") site for this program run.  This fixed frame
can vary in different program runs, but is constant throughout one
execution.

If not specified, FIXED_SITE defaults to the minimum Site number (i.e.
lowest numbered, or earliest chronologically) used in all input images.
Normally this default is sufficient; rarely must FIXED_SITE be specified.

One or more Rover State Files must usually be specified in order to combine
image from more than one Site.  These describe the relationship between
sites.  See the RSF parameter.

.VARI FIXED_NAME
Overrides what CS type is
allowed for the FIXED frame

.VARI FIXED_NAME
Overrides what CS type is allowed for the fixed frame.  Normally this is the
lowest-numbered SITE_FRAME.  However, the PIG library actually looks for any
CS with only one index as a potential fixed frame.  This causes issues with
the M20 helicopter, where e.g. the HELI_G_FRAME also has only one index.  This
parameter allows the user to force the fixed frame to SITE_FRAME.

.VARI SOLUTION_ID
Specifies which solution ID to use for pointng corrections.

There are potentially many different definitions for the same coordinate
system. These are identified via a unique Solution ID.  If this parameter
is given, only the specified solution's definition is searched for.

.VARI TIEPOINTS
Input tiepoint file for tiepoint visualization.  Only used if TIE_TYPE
is turned on.  Both the old (text) and new (XML) tiepoint file formats
are supported, and the format is auto-detected.

.VARI TIE_TYPE
Allows tiepoints to be visualized by plotting them on top of a mosaic.
Should never be used for production mosaics; this is intended to help
determine if tiepoints (such as from MARSAUTOTIE) are any good.

The default value, NO_TIES, turns off tiepoint visualization completely.

POINTS turns on point mode.  The left side of the tiepoint is indicated
by a dot (single pixel) on the image at the location that point projects to.
The value of the pixel is TIE_DN plus 10 times the difference (in mosaic
space) between the left and right parts of the tiepoint.  This gives some
indication of how well the tiepoint was corrected.  Thus if TIE_DN is 7000,
a value of 7032 indicates that the tiepoints were 3.2 pixels apart.  Of
course, a difference of 0 (dn=7000 for this example) means that the tiepoint
was corrected perfectly.

FLAG does what POINTS does, but then draws an additional vector on the
image (at half the intensity of the point).  This vector starts at the point
and continues for 10 pixels parallel to a line between the centers of the
"left" and "right" images for that tiepoint.  Thus it provides some indication
of which pair of images was involved in the tiepoint, when there are multiple
overlapping images.  Note that the edge of the mosaic is not considered; if
the image centers are on opposite ends of the mosaic (as in, the edge of the
mosaic splits the centers), the vector will use the actual centers, without
being adjusted for wrapping.

VECTOR does what POINTS does, but then draws an additional vector on the
image (at half the intensity of the point).  This vector starts at the point
and continues in the direction of the right-side tiepoint.  The length of the
vector is 10 times the difference between the left and right (same as the
intensity of the point itself).  This makes it easy to visualize tiepoint
outliers.  TRUE_VECTOR acts the same but without the 10x length modification
(so the endpoints lay exactly where the two parts of the tiepoint project to).

Tiepoint visualization is especially effective when combined with -NUMBER and
-OVER (overlapping footprints).  The -FLAG or -VECTOR modes should almost
always be used; POINT alone has not proved to be useful.

.VARI TIE_DN
DN value to use for tiepoint visualization.  See TIE_TYPE.  If the number
of DN's supplied is less than the number of bands, the last value is repeated
as necessary.

.VARI HORIZON
Specifies a cutoff elevation above which no output is generated.  This is
generally useful only in overlap mode.  In overlap mode, this provides a way
to eliminate the sky from consideration when determining brightness statistics
for the overlaps.  This can be helpful when (as is often the case) the sky
exhibits different radiometry than the ground.  Cutting off the sky better
matches the ground in these cases.

Another use case is to get a circular cut, to remove bad sky images.  This
would be used in combination with LIMIT_TOPEL.

HORIZON is only active for cylindrical and polar projections.  It is ignored
for vertical.

.VARI OVR_OUT
Turns on overlap mode, and specifies the output overlap file.  Overlap mode
computes statistics for the overlapping areas in the mosaic, and outputs a
file containing those statistics.  This file can then be used by "marsbrt"
to compute a correction.

This overlap mode replaces the functionality of the old "marsint" program.

.VARI MAX_OPEN
Specifies the number of images for each pass.  Normally this is 20 (or the
maximum for overlap mode).  Generally this will not need to be adjusted, but
if the last pass has only one or two images, you may get better throughput
by increasing this parameter slightly.  Each pass has an overhead, so if memory
is sufficient, a large value can also increase throughput.

In overlap mode, all images must fit into memory; therefore MAX_OPEN needs to
be at least as big as the number of input images.

The default is 20 for normal mode, and the maximum number of images for
overlap mode.

.VARI START_KEY
Starting key number for the output overlap file.  Overlap files contain a
list of images, each of which is associated with an integer key.  Setting
START_KEY to some value allows overlap files to be merged easily, without the
keys conflicting.  It is acceptable to have the same image in different
sections of a merged file (with different keys); they are properly merged
when read in.

.VARI RADIUS

Specifies the maximum size of overlap areas.  0 means no maximum.

.VARI WHICH_OVR
Specifies whether to create normal overlaps, overall "overlaps" (whole-image
statistics), or both.

.VARI USE_HSI
Turns on HSI mode for overlaps.

.VARI IDX_OUT
Specifies the (optional) output filename for the index file.

The index file contains, for each pixel, a halfword integer (16 bit signed)
identifying which image the pixel came from.  0 indicates no value (black
in the mosaic).  Numbers from 1-n match the order of files in the input list
file (or INP parameter, if a list file isn't given).  For most mosaics, the
file could be converted to byte using CFORM (half is used to support more
than 255 input files).

.VARI ICM_OUT
Specifies the (optional) output filename for the ICM file.

The ICM file is an Image Coregistration Map.  It is a two-band float file
containing the line, sample coordinate of the input pixel used for the point.
This is the same basic format as correlation maps such as MARSCOR3 produces,
except that multiple images are involved (thus the need for the index file,
in IDX_OUT).

.VARI BAR
Turns on scale bar.  The scale bar is by default plotted in the lower left
corner (see BAR_POS).  The nominal size of the bar (really the minimum size)
in pixels is given by BAR_SIZE.  The bar size will be increased as necessary
to achieve round units.  The bar size is constrained to be 1, 2, 5, or 10 per
decade, and units are nm, um, mm, cm, m, and km (units are plotted in upper
case, however).  So the possible bar sizes are quantized, for example sizes
can be:

..., 0.01nm, 0.02nm, 0.05nm, 0.1nm, 0.2nm, 0.5nm,
1nm, 2nm, 5nm, 10nm, 20nm, 50nm, 100nm, 200nm, 500nm
1um, 2um, 5um, 10um, 20um, 50um, 100um, 200um, 500um
1mm, 2mm, 5mm,
1cm, 5cm, 10cm, 20cm, 50cm,
1m, 2m, 5m, 10m, 20m, 50m, 100m, 200m, 500m,
1km, 2km, 5km, 10km, ...

A critical factor in proper scale bar size is the range.  The meters per
pixel is determined by range / scale where scale is the pixels/degree
(converted to pixels/radian) from the SCALE parameter or as determined by
the input camera model.  The scale is correct for the mosaic, so the
accuracy of the scale bar depends on the range.

Normally range is computed by projecting to the surface model.  However, this
can be quite inaccurate if the actual ground does not match the surface model.
For that reason, it is recommended that the range be supplied (via BAR_RANGE)
when possible.  This may come from an XYZ image, or (for example for MSL
ChemCam or M20 SuperCam RMI) from the known focus distance.

If the range is not computable for a given point (for example it projects
above the surface model), or if it would plot off the edge of the image,
the scale bar is suppressed.

For Vertical projection, the meters per pixel is not range dependant, it
is simply the VERT_SCALE.

.VARI BAR_POS
Sets location for the center of the scale bar.  This is also the point at
which the range is computed.  The values are in the order (line, sample).

If either line or sample is negative, it is treated as an offset up from
the bottom, or in from the right edge of the mosaic.

.VARI BAR_SIZE
Sets overall desired size of scale bar, in pixels.  This is actually the
minimum size for the bar; it will likely be somewhat bigger than this in
order to achieve a round dimension.  See the help for BAR.

.VARI BAR_DN
DN for the bar and bar labels.  See BAR keyword.  Note, a BAR_DN of 0 is
transparent (i.e. ignored).  If the number of DN's supplied is less than the
number of bands, the last value is repeated as necessary.

.VARI BAR_ZOOM
Sets the zoom factor for the scale bar label text.  Normally the text (as with
all overlay text in marsmap) is 7 pixels high.  Although fractional zooms
are allowed, they may create undesirable aliasing in the output.

.VARI BAR_HEIGHT
Sets the height in pixels of the scale bar end caps.  The scale bar is a line
going through BAR_POS, with end caps sticking up to emphasize the ends.

.VARI BAR_SPACE
Sets the spacing in pixels between the scale bar and label.

.VARI BAR_RANGE
Overrides the range to the terrain used for computing the size of the scale
bar.  Getting the range right is critical for scale bar accuracy; see the BAR
parameter for more details.

.VARI BAR_APPROX
By default a tilde (~) is plotted before the unit text, to indicate the scale
bar is an approximation.  This can be suppressed by saying -EXACT.

.VARI BBOX
Specifies the filename to which the bounding box is written (see main help
text).  If this parameter is not supplied, no bounding box file is written.

.VARI BBOX_COUNT
Specifies how many points along each edge of the input file are projected for
the bounding box.  The corners are always projected; if BBOX_COUNT=0 that's
all you get.  The default of 3 projects 3 points along each edge (center, 1/4,
and 3/4 along the edge).


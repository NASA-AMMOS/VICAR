process help=*
PARM INP TYPE=STRING COUNT=(1:3)
PARM OUT TYPE=STRING COUNT=1

PARM BANDS TYPE=INTEGER COUNT=(1:6) DEFAULT=(1,2,3,4,5,6)
PARM BEST_CONF TYPE=KEYWORD COUNT=(0:1) VALID=BEST_CONF DEFAULT=--


PARM NAVTABLE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM CONFIG_PATH STRING DEFAULT="$MARS_CONFIG_PATH"
PARM POINT_METHOD TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM NOSITE TYPE=KEYWORD COUNT=(0:1) VALID=NOSITE DEFAULT=--

PARM DATA_SET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM DATA_SET_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM RELEASE_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCT_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_ID TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM PRODUCER_INST TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_NAME TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM TARGET_TYPE TYPE=STRING COUNT=(0:1) DEFAULT=--

PARM RSF TYPE=STRING COUNT=0:100 DEFAULT=--
PARM DEBUG_RSF TYPE=KEYWORD COUNT=0:1 VALID=DEBUG_RSF DEFAULT=--
PARM COORD TYPE=KEYWORD VALID=("FIXED", "INSTRUMENT", "SITE", "ROVER", +
        "LOCAL_LEVEL", "RMECH") DEFAULT="RMECH"
PARM COORD_INDEX TYPE=INTEGER COUNT=0:10 DEFAULT=--
PARM FIXED_SITE TYPE=INTEGER COUNT=0:1 DEFAULT=--
PARM SOLUTION_ID TYPE=STRING COUNT=0:1 DEFAULT=--

END-PROC

.TITLE
VICAR program MARSGREACH.

.HELP
PURPOSE:

This program generates an overall goodness product by looking at the 
reachability bands of selected instruments in the input reachability file.

This program is not specific to any project; however, some assumptions 
are made on the input reachability product. Read the METHOD section.

.page
EXECUTION:

marsgreach inp=data.reach out=data.goodness
where:
data.reach is an input 6-band reachability image file.
data.goodness is a 1 or 2 band image file of type BYTE.


.page
METHOD:

This program generates an overall goodness product by looking at the 
reachability bands in the input reachability file.  This is not an M2020
specific program; however, the output of M20REACH for M2020 project is a 
good example of input to MARSGREACH.

The reachability input is a single multi-band file in HALF (16-bit int) 
format.  Each band has reachability information for one instrument on the
mechanical arm of the rover.  The instruments gone through reachability 
analysis should be listed in the label INSTRUMENT_BAND_ID of the input file.  
In the case of M2020 for example, they are, in order:

Band	Instrument
----	----------
  1	DRILL
  2	GDRT
  3	SHERLOC_WATSON
  4	SHERLOC
  5	PIXL
  6     FCS

.page
For each instrument band in the input file, a pixel is a 16-bit integer 
containing the instrument target reachability information associated with 
the pixel.  A 16-bit reachability pixel for an instrument is divided into 8
groups of 2 bits for 8 arm configurations.  Therefore, 2 bits are used in the
input file per instrument per target pixel per arm configuration to record the 
measure of the reachability of the instrument to the target with the given arm 
configuration.  With two bits, the reachability measure can only be on the
scale of 0 to 3 with 0 being not reachable and 3 being the best reachability
expected.  For example, in the case of a reachability input generated by
M2020, the reachability measures and what they mean are the following:

Decimal	Binary	Description
-------	------	-----------
  0	  00	not reachable
  1	  01	standoff reachable
  2	  10	close (0cm) reachable 
  3	  11	standoff and close reachable (best)

.page
MARSGREACH assumes an instrument band pixel is a 16-bit integer divided into
eight groups of two bits, hence it assumes eight arm configurations.  For a
concrete example, in the case of M2020 the bit allocations for the eight 
possible arm configurations are given in the table below:

Bit Numbers	Configuration
-----------	-------------
15-14		Shoulder Out, Elbow Up, Wrist Up
13-12		Shoulder Out, Elbow Up, Wrist Down
11-10		Shoulder Out, Elbow Down, Wrist Up
9-8		Shoulder Out, Elbow Down, Wrist Down
7-6		Shoulder In, Elbow Up, Wrist Up
5-4		Shoulder In, Elbow Up, Wrist Down
3-2		Shoulder In, Elbow Down, Wrist Up
1-0		Shoulder In, Elbow Down, Wrist Down

CONFIGURATION_BIT_ID label in the input file should give a list of the arm
configurations listed from left (most significant bits here) to right (least
significant bits here).

.page
MARSGREACH goes through the following conceptual steps to generate its 
output:

First, MARSGREACH ignores all the input bands that are not selected through
BANDS parameter.

Second, MARSGREACH collapses the selected input bands into a single band with
the same number of lines, the same number of samples-per-line and the same 
format (HALF) as the input bands.  In the resulting band, the two bits
associated with a given target pixel and a given arm configuration is 
set to the smallest (worst reachability) value from the same target pixel
and the same arm configuration 2-bit values across all the selected input 
bands.

Third, MARSGREACH takes the conceptual product of the second step and 
generates another conceptual band.  This new band also has the same number
of lines and the same number of samples-per-line as the result of the 
second step; however, the result of the third step is in BYTE format.  In
the product of the third step, each pixel is treated as a single value, and 
it is set to the largest (best reachability) of the 8 2-bit values from the 
same target pixel of the result of the second step.

Fourth, MARSGREACH generates the goodness single band image that is the 
required band in its output product.  In this step, the program maps every 
pixel value from the product of the third step to one of the "standard 
goodness values".  The table below shows the mapping in decimal:

Reachability Values (Decimal)     Goodness Values (Decimal)
-----------------------------     -------------------------
0                                 0
1                                 1
2                                 3
3                                 5

Fifth, MARSGREACH generates an optional second output band if BEST_CONF 
keyword is set.  This optional output band has the same number of lines, the 
same number of samples-per-line and the same format (BYTE) as the first 
output band (the product of the fourth step).  However, in the second
optional output band, each pixel (8-bits) is not treated as a single value
but as 8 1-bit flags one per each arm configuration.  For this step, the
program depends on the results of the second and the third steps.  For a 
given pixel and arm configuration, if the 2-bit reachability value for the arm 
configuration from the result of the second step is equal to the pixel value 
from the result of the third step, then the bit in the same pixel of the 
second optional output band for the arm configuration is set to 1 otherwise, 
it is set to 0.  There is one exception to this flag setting rule.  If the 
pixel value in the product of the third step is zero, then all flags in the
same pixel of the optional second band are set to 0 rather than 1.  The 
purpose of the second output band is to flag the arm configurations for a 
target pixel that their reachability values are equal to the best conservative 
reachability value determined in the third step.


.page
OUTPUT FILE FORMATS:

The output of MARSGREACH has one or two bands.  The second band is optional
and both bands have BYTE format.  The number of the lines and the number of
the samples-per-line of both bands are the same as the number of the lines 
and the number of the samples-per-line in the input file.

The required first band is the product of the fourth step explained in the 
METHOD section, and the optional second band is the product of the fifth 
step explained in the METHOD section.  The second band is created if the
optional BEST_CONF keyword is set.

.PAGE
HISTORY:
2020-09-24 Initial marsgreach by E. Sarkissian,

.LEVEL1
.VARI INP
Input reachability file.
Must be 1 filename.

.VARI OUT
Output file.
Must be 1 filename.

.VARI BANDS
Selected band numbers
from the input file.

.VARI BEST_CONF
Set this keyword to
produce the second
output band.

.VARI NAVTABLE
Corrected navigation
filename.

.VARI CONFIG_PATH
Path used to find
configuration/calibration
files.

.VARI POINT_METHOD
Specifies a mission-
specific pointing
method to use

.VARI NOSITE
Disables coordinate
system sites.

.VARI RSF
Rover State File(s) to use.

.VARI DEBUG_RSF
Turns on debugging of RSF
parameter.

.VARI COORD
Coordinate system to use.

.VARI COORD_INDEX
Coordinate system index for
some COORD/mission combos.

.VARI FIXED_SITE
Which site is FIXED for
rover missions.

.VARI SOLUTION_ID
Solution ID to use for
COORD_INDEX

.VARI DATA_SET_NAME
Specifies the full name given
to a data set or a data product.

.VARI DATA_SET_ID
Specifies a unique alphanumeric
identifier for a data set or data
product.

.VARI RELEASE_ID
Specifies the unique identifier
associated with the release to the
public of all or part of a data set.
The release number is associated with
the data set, not the mission.

.VARI PRODUCT_ID
Specifies a permanent, unique
identifier assigned to a data
product by its producer.

.VARI PRODUCER_ID
Specifies the unique identifier
of an entity associated with the
production a data set.

.VARI PRODUCER_INST
Specifies the full name of the
identity of an entity associated
with the production of a data set.

.VARI TARGET_NAME
Specifies a target.

.VARI TARGET_TYPE
Specifies the type of a named target.

.LEVEL2
.VARI INP
A single multi-band reachability image file.  Currently
the program can handle an image file of up to 16 bands,
but the limit can be increased easily.  To use M2020
as an example, the input file will have 6 bands.

The input file is in HALF (16-bit integer) format.

.VARI OUT
The output contains reachability goodness data, that show 
overall, taken all the selected instruments into account,
which arm configurations conservatively result in the best
reachability to the target.

The output is a 1 or 2 band image file in BYTE (8-bit integer)
format.

.VARI BANDS
A list of integers to select the bands in the input file for
overall goodness computation.  Band counting starts from 1.

.VARI BEST_CONF
Set this keyword to generate the optional second band in the
output file.

.VARI CONFIG_PATH
A colon-separated list of directories in which to look for configuration
and calibration files.  Environment variables are allowed in the list
(and may themselves contain colon-separated lists).  The directories are
searched in order for each config/cal file when it is loaded.  This allows
multiple projects to be supported simultaneously, and allows the user to
override any given config/cal file.  Note that the directory structure below
the directories specified in this path must match what the project expects.
For example, Mars 98 expects flat fields to be in a subdirectory named
"flat_fields" while Mars Pathfinder expects them to be directly in the
directory specified by the path (i.e. no intermediate subdirectories).

.VARI POINT_METHOD
Specifies a mission-specific pointing method to use.  Normally this
parameter is not used, in which case the "default" pointing methods
are used.  Some missions may have special, or alternate, pointing
methods available, which are indicated by this string (for example,
backlash models, using arm joint angles instead of x/y/z/az/el, etc).
A substring search is used, so multiple methods (where that makes sense)
can be specified by separating the keywords with commas.

Note that nav files created using one pointing method will most likely
not be compatible with a mosaic created using a different pointing method.

The methods available vary per mission, but some methods available at
the time of this writing are:

BACKLASH : Mars 98 SSI only.  Selects a backlash pointing model,
which adjusts the telemetered azimuth and elevation values based on
knowledge of the camera's mechanical backlash and the direction the
motor was travelling when the image was taken.

.VARI NOSITE
Disables all label-derived parameters to the Site mechanism which underlies
coordinate systems.  This forces all sites to be identical, with all rotations
and offsets set the same.  In the case of MPF or Mars 98, this disables
the lander quaternion and offset (sets them to identity and 0, respectively).
This option should not be used with images taken from different vantage
points (e.g. the spacecraft moved, or mixing a lander and a rover) or
invalid results will be obtained.  The use of this option invalidates the
Fixed coordinate frame; any values reported in the Fixed frame will not
correctly reflect the orientation of the lander/rover.

Obviously, this option should be rarely used; it is intended for when the
image labels defining the site are invalid or inconsistent.

.VARI DATA_SET_NAME
The DATA_SET_NAME typically identifies the instrument that acquired the
data, the target of that instrument, and the processing level of the data.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_NAME.

.VARI DATA_SET_ID
The DATA_SET_ID value for a given data set or product is constructed
according to flight project naming conventions.  In most cases the
DATA_SET_ID is an abbreviation of the DATA_SET_NAME.
This value is copied to the output label, property IDENTIFICATION,
keyword DATA_SET_ID.

.VARI RELEASE_ID
When a data set is released incrementally, such as every three months during
a mission, the RELEASE_ID is updated each time part of the data set is released.
For each mission(or host id if multiple spacecrafts), the first release of a data
set should have a value of "0001".
This value is copied to the output label, property IDENTIFICATION,
keyword RELEASE_ID.

.VARI PRODUCT_ID
Specifies a permanent, unique identifier assigned to a data product by
its producer. Most commonly, it is the filename minus the extension.
This value is copied to the output label, property IDENTIFICATION,
keyword PRODUCT_ID.

.VARI PRODUCER_ID
Specifies the unique identifier of an entity associated with the
production of a data set. This value is copied to the output label,
property IDENTIFICATION, keyword PRODUCER_ID.

.VARI PRODUCER_INST
Specifies the identity of a university, research center, NASA center or other
institution associated with the production of a data set.
This value is copied to the output label, property IDENTIFICATION, keyword
PRODUCER_INSTITUTION_NAME.

.VARI TARGET_NAME
Specifies a target.  The target may be a planet, satelite, ring, region, feature,
asteroid or comet.  This value is copied to the output label, property
IDENTIFICATION, keyword TARGET_NAME.

.VARI TARGET_TYPE
Specifies the type of a named target. This value is copied to the output
label, property IDENTIFICATION, keyword TARGET_NAME.

.VARI RSF
Rover State File.  This is a list of filenames to load containing
Rover State information.  These files contain position and orientation
information for a rover (or other mobile spacecraft) at various sites.
They are in XML format.  See the "Rover Motion Counter (RMC) Master File SIS"
for details on these files.

Rover State Files have a priority order.  The files listed first have
the highest priority.

Environment variables may be used in the list.

For MER, if a directory is specified, then that directory is searched for
RMC Master files and any found are loaded.  The directory structure and
filename convention is covered in the RMC SIS.  The directory specified
is the one containing "master", so if <dir> is the name specified in the
RSF parameter, the following files will be searched for:

<dir>/master/<mission>_Master.svf
<dir>/master/<mission>_Site_<n>_Master.rvf

The name of each file loaded is printed to the stdout log for reference.

.VARI DEBUG_RSF
If enabled, this causes the internal database of RMC locations to be
printed out to the stdout log.  This is after the RSF files have been
loaded and the coordinate systems read from the input label(s).

.VARI COORD
The coordinate system to use for the output roughness (really just determines
the unit of measurement).  The interpretation of the values is dependent on
the mission.  Some representative missions are listed here:

Fixed - The Fixed frame.  This is the ultimate reference frame
    (see also FIXED_SITE for rover missions).
Instrument - (default) The "natural" frame for the instrument 
    (of the first input image).  MPF: Lander or Rover; M98: MVACS; MER: Rover.
Site - A major Site frame.  For rover missions, COORD_INDEX specifies which
    Site frame to use.  Non-rover missions treat this as Fixed.
Rover - An instance of the Rover frame.  For rover missions, COORD_INDEX
    specifies which instance of the rover frame to use.  Non-rover mission
    use the spacecraft frame (e.g. Lander for M98).
Local_Level - An instance of a Local Level frame.  This is typically
    coincident with the Rover frame (in XYZ) but oriented toward North
    like the Site and Fixed frames.  For MER, this is an instance of a
    Drive index move.

.VARI COORD_INDEX
The index specifies which instance of a coordinate system to use.  It is
currently applicable only to rover-based missions, but could have other
uses.  The index is equivalent to the Rover Motion Counter (RMC) for MER
and FIDO.

For MER/FIDO, there are many Site frames.  Each is numbered with a single
index.  For Site Frames, coord_index specifies which to use.  Likewise,
there are many Local_Level and Rover frames, corresponding to values of
the RMC.  The multiple instances of this frame are selected by COORD_INDEX.

Generally COORD_INDEX defaults sensibly so you don't usually need to
specify it.  It will default to the instance used by the first input.

.VARI FIXED_SITE
Specifies which major Site is the "Fixed" Site for this run.

Historically, MPF and M98 had a single "Surface Fixed" frame which never
moved, and which all other coordinate system frames were referenced to.
With the advent of long-range rovers (such as MER and FIDO), that became
insufficient.  The rover traverses far enough that errors in knowledge of
coordinate system offset and orientation become unacceptable.

For this reason, a system of major Sites was introduced.  Periodically
during the mission, a Site frame is declared.  This then becomes the
reference frame for all activities until the next Site is declared.
References are kept local, and errors don't propogate across Sites.

However, if images from more than one Site are combined together, the
Site's must be placed relative to each other.  Therefore a single reference
frame is still needed to combine different sites.

The FIXED_SITE parameter controls which of the major Site frames is
the reference ("fixed") site for this program run.  This fixed frame
can vary in different program runs, but is constant throughout one
execution.

If not specified, FIXED_SITE defaults to the minimum Site number (i.e.
lowest numbered, or earliest chronologically) used in all input images.
Normally this default is sufficient; rarely must FIXED_SITE be specified.

One or more Rover State Files must usually be specified in order to combine
image from more than one Site.  These describe the relationship between
sites.  See the RSF parameter.

.VARI SOLUTION_ID
Specifies which solution ID to use when specifying the coordinate system.

There are potentially many different definitions for the same coordinate
system.  These are identified via a unique Solution ID.  If this parameter
is given, only the specified solution's definition is searched for.  Without
it, the "best" available solution is chosen.

It is extremely rare that this parameter should be needed.  The default
will be sufficient in almost every case.

Note that the current MER implementation requires that a value for COORD_INDEX
also be provided, in order for this parameter to take effect.


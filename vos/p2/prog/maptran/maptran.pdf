process help=*
PARM INP	TYPE = STRING   COUNT=2
PARM OUT	TYPE = STRING   COUNT=1
PARM NL         TYPE = INTEGER  COUNT=1                  DEFAULT=0
PARM NS         TYPE = INTEGER  COUNT=1                  DEFAULT=0
PARM NB         TYPE = INTEGER  COUNT=1                  DEFAULT=0
PARM BANDS      TYPE = INTEGER  COUNT=2                  DEFAULT=(1,0)
PARM INC        TYPE = INTEGER  COUNT=1   VALID=(1:1000) DEFAULT=10
PARM RANGE      TYPE = REAL     COUNT=1                  DEFAULT=10
PARM THRESH     TYPE = REAL     COUNT=1                  DEFAULT=0
PARM DNINTER    TYPE = REAL     COUNT=1                  DEFAULT=0
PARM CODE       TYPE = REAL     COUNT=1                  DEFAULT=-99999
PARM NOINTERP   TYPE = KEYWORD    VALID=(INTERPOL,NOINTERP) +
                DEFAULT=INTERPOL
PARM MOSAIC     TYPE = KEYWORD    VALID=(MOSAIC,NOMOSAIC) +
                DEFAULT=NOMOSAIC
PARM NOCHECK    TYPE = KEYWORD    VALID=(CHECK,NOCHECK) +
                DEFAULT=CHECK
END-PROC
.TITLE
VICAR program MAPTRAN.

.HELP
PURPOSE:
Maptran converts map projected images from one projection to another.
All images must have an image label compatible with one written by Map3.

Maptran performs the transformation using a grid of tiepoints computed
using the exact solution in subroutine convev. The tiepoints form
polygon areas with 4 vertices each. If all 4 vertices lie on the planet
then the polygon is mapped using a polynomial, otherwise each pixel
in the polygon is mapped exactly. 

It differs from Maptrans by performing the geom itself.
It differs from Maptran3 by interpolating with a polynomial.

.PAGE
USAGE & EXECUTION:
Maptran has no projection parameters. It reads the label from the
second input file and uses this label for the output file.
There are two ways to execute Maptran:

Method1. 
In this mode (the default) the output file contains the projection of the
first input file only. In this case the second input file is only used for
its label and sizefield, the rest is ignored. Here you can use the
'NOGEOM option in Map3 to save actually creating the second input file
since we only want its label.

Method2:
In this mode (see the 'MOSAIC keyword) the output file will contain the 
second input mosaicked with the projected first input file. Here the
second input must be a complete projected image.

Example for Method1:

If for example you had created a stereographic projection called: ster.img
MAP3 overlay.img ster.img NL=500 NS=500 'STER SCAL=10. +
  LINE=250. SAMP=250. LATI=-10. LONG=150. NORTH=30. 

 ...and you wanted to convert it to an orthographic image
you would then create using map3 a label with the desired target
projection , and say 'NOGEOM  as in
MAP3 overlay.img orth.img NL=500 NS=500 'ORTH SCAL=10. +
  LINE=250. SAMP=250. LATI=-10. LONG=150. NORTH=30. +
  'NOGEOM

 ...then you would do:
maptran inp=(ster.img,orth.img) out=new_orth.img

 ...if you didn't like the size field of orth.img you could override
it by specifying it as:
maptran inp=(ster.img,orth.img) out=new_orth.img nl=600 ns=700

Example for Method2:

	! oblique stereographic
MAP3 overlay.img ster.img NL=500 NS=500 'STER SCAL=10. +
  LINE=250. SAMP=250. LATI=-10. LONG=150. NORTH=30. 

	! oblique orthographic
MAP3 overlay.img orth.img NL=600 NS=700 'ORTH SCAL=10. +
  LINE=250. SAMP=250. LATI=-10. LONG=150. NORTH=30.

maptran inp=(ster.img,orth.img) out=new_orth.img


.PAGE
EFFICIENT USAGE:
Maptran tries to stuff as much of the input into memory as possible.
If you have a dedicated machine then recompile the program increasing
the array dimension parameter NPIXELS to something realistic like
10,000,000 (twenty megabytes). If your buffer is small the program
will make many passes through the output file trying to anticipate
where the pixels will map in the input.

.PAGE
OPERATION:
Maptran is a rather involved program. This outline describes the logic
structure:

Read parameters.

Open input files.

Read Map3 label information from both input files.

Compute the smallest grid (larger than the default value) that will fit
in the grid buffer memory. See INC keyword.

Set the output NL and NS values to those of the second input if NL and NS
are not specified via parameters.

Compute the input line & sample value for each output grid image
coordinate using the mapping transformations.

Compute for each grid area the number of vertices which lie on the 
visible planet (0 to 4). Set this count to K.

If all four vertices lie off the input image set K to zero.

If K is 4 but any two points are separated by over 1/2 the picture
size set K to 1. We will use K later on.

Open the output file.

Copy the Map3 label from the second input to the output.

Open the temporary file, format it with CODE dn values (see CODE keyword),
close it, re-open it for update.

LOOP:

Load a block of input lines into memory.
If a dn is equal to CODE set it to CODE+1.

Loop on grid area rows.

Load a block of output lines from the temporary file.

Loop on grid area columns.

For each area:

    If the area has been completed skip it.

    If K (# vertices on planet) is 0 then write zeroes to output.

    If K is 4 then fit a polynomial to the vertices of the form:
      line_in=A*line_out*samp_out+B*line_out+C*samp_out+D
      samp_in=E*line_out*samp*out+F*line_out+G*samp_out+H
    and use it to map the output to the input.

    If K is 1,2,or 3, Compute the mapping from output to input exactly
    using the mapping transformations for each pixel.

    If the projection of the first input is of types 6,9, or 10 
    (convev buffer item #39) then check for wraparound condition.

    Each output pixel, once mapped to the input can be evaluated for 
    a DN value. If nointerpolation is selected the nearest input neighbor
    is selected.  If interpolation is selected then:

    Cases:
    If 4 input neighbors are > DNINTER then bilinear interpolation is done.
    If 3 input neighbors are > dninter the fourth is extrapolated and then
       interpolation is done.
    If 2 input neighbors are > dninter the output pixel is determined from
       a linear weighting of the 2 good pixels.
    If 1 input neighbor is > dninter it is copied to the output.
    If all the input neighbors are <= dninter the output is determined from
       the nearest neighbor.

    Notes:
    1. All output pixels are written to an intermediate file that is
       stored in half format. Later this file is copied to the output.
    2. Only on the first pass through the input the valid vertices on 
       the input are checked to see if they lie on or near the input
       block of lines. If they do not the area is temporarily skipped.
       See RANGE keyword.

End of loop on columns.

Write a block of output lines.

End of loop on rows.

If the last input block read does not contain the last input line 
then go to LOOP and redo the entire output file.

If any output pixel has a DN of code (see code parameter) and only one
pass has been made through the input picture then go to LOOP and redo 
the entire input picture.

If MOSAIC is specified then:
  Combine the intermediate halfword file with the second input file.
  Pixel loop
     If the projected pixel dn value is greater than THRESH place it
     in the output otherwise put the second input file pixel in the
     output.
  End pixel loop.
otherwise
  Copy the intermediate halfword file to the output.

.PAGE
HISTORY:
5-15-93  J Lorre. At delivery time the subroutine SEARCV2 had not been
         ported. This means that the line:
           if(primary.eqs." ")then primary="SYS"
         must be inserted into the .com file after the line:
           if(primary.eqs."")then primary=" "
         before delivery.
6-05-98  R Patel AR-9644. Fixed tst pdf and pdf to prevent illegal values.
                          Subroutine tranv was updated to make maptran work
                          under sgi.
19oct04  L.Kamp:  converted I*2 variables to R*4 in order to support REAL
         format;  added support for 3-D files.
26mar10  L.Kamp:  added check for byte data that the output pix are in byte
         range, to prevent spikes caused by wraparound of negative interpolated
         values.
ORIGINALLY WRITTEN BY: Jean Lorre 5/30/93
COGNIZANT PROGRAMMER:  Lucas Kamp

.LEVEL1
.VARI INP
STRING-input datasets.
.VARI OUT
STRING-output dataset.
.VARI NL
Output picture
number lines
.VARI NS
Output picture
number samples
.VARI NB
Output picture
number bands
.VARI BANDS
Output picture
starting band &
number bands
.VARI INC
Grid spacing in
pixels.
.VARI RANGE
pixel search range.
.VARI THRESH
Input threshold
.VARI DNINTER
Interpolation DN
threshold
.VARI NOINTERP
No interpolation.
.VARI CODE
Unset pixel code.
.VARI MOSAIC
Specify to mosaic
.VARI NOCHECK
No checking for
wraparound

.LEVEL2
.VARI INP
STRING-input datasets.
First input:
  The picture to be projected and placed into the output.
  This picture must have map projection labels compatible with those
  created by MAP3.
Second input:
  If the MOSAIC keyword is used then:
  This picture is used for its label,sizefield, and contents.
  The label defines the output projection type.
  The output will be a mosaic of this file AND the projected first input.
  otherwise:
  This picture is used merely for its label and for the NL and NS values.
  The image itself is ignored. The label defines the output projection type.
  This picture must have map projection labels compatible with those
  created by MAP3.

.VARI OUT
STRING-output dataset.
This is the projected version of the first input file. Its projection 
label will be copied from the second input file.

.VARI NL
Output picture number of lines. If NL is not specified it defaults to
the size of the second input file.

.VARI NS
Output picture number of samples. If NS is not specified it defaults to
the size of the second input file.

.VARI NB
Output picture number of bands. If NB is not specified it defaults to
the size of the first input file.  (Note that this differs from the
defaults for NL and NS!)

.VARI BANDS
Output picture starting band & number of bands. The default is to use
NB of the first input file.  

.VARI INC
Grid spacing in pixels for the output file. 
A fine grid is overlayed on the output file and the exact mapping is 
computed at each grid intersection. Pixels within the grid are 
interpolated. INC specifies the smallest grid desired. If INC is too
small MAPTRAN will increase it until the grid can reside in memory.

.VARI RANGE
In the case where individual pixels are being projected using the 
precise mapping projection equations (versus polynomial mapping)
the on-planet corners of the INC by INC area will fall either on or
off the input block of data lines. In case the points fall more than
RANGE pixels from the data block then this INC by INC area is bypassed
on the first pass through the input image. We hope to save time by
avoiding needless computations for pixels mapping outside the
input data block. If a second pass is needed this restriction is
lifted.

.VARI THRESH
Used only in the MOSAIC mode.
Thresh specifies the dn value above which the projected image has
precedence over the second input file during mosaicking of the two files.
Default is zero, ie: any projected dn which is zero or less will be
ignored in favor of the dn in input number 2.

.VARI DNINTER
Specifies a DN threshold used only in interpolation mode. If, when
interpolating a dn value in the input file, one or more of the four
neighbors is less than or equal to DNINTER it will not be used
in the interpolation.
Several combinations of input dn values can occur.
Cases:
If 4 input neighbors are > dninter then bilinear interpolation is done.
If 3 input neighbors are > dninter the fourth is extrapolated and then
   interpolation is done.
If 2 input neighbors are > dninter the output pixel is determined from
   a linear weighting of the 2 good pixels.
If 1 input neighbor is > dninter it is copied to the output.
If all the input neighbors are <= dninter the output is determined from
   the nearest neighbor.

.VARI NOINTERP
Specifies that no interpolation between pixels is desired.  
The output pixel will come from the nearest neighbor in the input.
Default is to interpolate.
See DNINTER keyword for interpolation modes.

.VARI CODE
This is a number that is used by Maptran to mark the location of output 
pixels whose DN values have not yet been determined. The default is -99999. 
If you have input DN's that happen to have this value (in the first input 
file) they will be reset to one dn higher. Thus -99999 would become -99998.
(Obviously, this could only happen if the input file were in REAL format.)
It is assumed that this change is insignificant, but if it should be, then
CODE should be set to some number outside of the range of the input data.

.VARI NOCHECK
Normally Maptran checks for wraparound in the sample direction for three
projections. These are: Mercator, Normal Cylindrical, and Simple Cylindrical.
Nocheck deactivates this checking.

.END

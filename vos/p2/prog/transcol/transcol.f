C
C     VICAR2 PROGRAM TRANSCOL   *** REV. C ***
C
C
C**********************************************************************
C
C     UPDATE HISTORY
C
C     REVISION A 
C      MODIFIED FOR VAX CONVERSION BY ASM, 8 AUG 1983
C
C     REVISION B 
C      LMB    4/85      MODIFIED FOR VICAR2
C
C     REVISION C
C      9-94  CRI        MSTP S/W/CONVERSION (VICAR PORTING)
C
C
C**********************************************************************
C
C
      INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44
      IMPLICIT NONE

      INTEGER DATACOL,COUNT,INDEX,IDEF,VDEF,I,FRMCNT
      INTEGER FDEF,NCOL,NDEF,TDEF,MAXTOC
      INTEGER*4 FROM_COL(200), ITOCOL(100), IVALUE(100)
      INTEGER*4 VALUE(100), TOCOL(100)
      LOGICAL*1 TRANS,TRANSC,NZERO,NZEROC
C
      CALL IFMESSAGE('TRANSCOL version 05-SEP-94')
      CALL XVEACTION('SA',' ')
C     GET PARAMETER INFORMATION
C
      CALL XVP ( 'DATACOL', DATACOL, COUNT )
       IF ( COUNT .EQ. 0 ) THEN      
	  CALL XVMESSAGE('DATA KEYWORD ABSENT - PROGRAM TERMINATED',' ')
	  CALL ABEND
       END IF
C
      CALL XVPARM ( 'INDEXCOL',   INDEX, COUNT, IDEF, 1)
C
      CALL XVPARM ( 'VALUES',  IVALUE, COUNT, VDEF, 100)
      DO I = 1, COUNT
       VALUE(I) = IVALUE(I)
      END DO
C
      CALL XVPARM ( 'FROMCOL', FROM_COL, FRMCNT, FDEF, 200 )
C
      CALL XVPARM ( 'NCOL',    NCOL,   COUNT, NDEF, 1)
C
      CALL XVPARM ( 'TOCOL',   ITOCOL, COUNT, TDEF, 100)
C 
      MAXTOC = -1
      DO I = 1, COUNT
          TOCOL(I) = ITOCOL(I)
          IF (TOCOL(I).GT.MAXTOC) MAXTOC=TOCOL(I)
      END DO
C    
      TRANS  = .FALSE.
      TRANSC = .FALSE.
      NZERO  = .TRUE.
      NZEROC = .TRUE.
C
      IF (IDEF .EQ. 1 .OR. INDEX.EQ.0) THEN
	NZEROC = .FALSE.
      ELSE
	TRANSC = .TRUE.
      ENDIF
      IF (VDEF .EQ. 1 .OR. IVALUE(1).EQ.0) THEN
	NZEROC = .FALSE.
      ELSE
	TRANSC = .TRUE.
      ENDIF
      IF (TDEF .EQ. 1 .OR. ITOCOL(1).EQ.0) THEN
	NZEROC = .FALSE.
      ELSE
	TRANSC = .TRUE.
      ENDIF
      IF (FDEF .EQ. 1 .OR. FROM_COL(1).EQ.0) THEN
	NZERO = .FALSE.
      ELSE
	TRANS = .TRUE.
      ENDIF
      IF (NDEF .EQ. 1 .OR. NCOL.EQ.0) THEN
	NZERO = .FALSE.
      ELSE
	TRANS = .TRUE.
      ENDIF
C
      
      IF (TRANS.AND..NOT.TRANSC.AND.NZERO) THEN

	  CALL TRANS2(DATACOL,NCOL,FROM_COL,FRMCNT)
      ELSE IF (.NOT.TRANS.AND.TRANSC.AND.NZEROC) THEN

          CALL TRANSCOL(DATACOL, INDEX, VALUE, TOCOL, COUNT, MAXTOC)
      ELSE
          CALL XVMESSAGE('BAD COMBINATION OF PARAMETERS',' ')
          CALL ABEND
      END IF
C
      RETURN
      END
C
C**********************************************************************
C  IBIS ROUTINE TRANSCOL
C
C  PURPOSE:  CHANGES A VERTICALLY ALIGNED TABULAR FILE TO A DIAGONALLY-
C  TABULAR FILE WITH ZERO FILL.  AGGRG2 CAN BE USED TO PRODUCE A HORIZON
C  ALIGNED FILE.
C
C  USER PARAMETERS:
C
C  DATACOL,K - THE INTEGER K SPECIFIES THE COLUMN WHICH CONTAINS DATA VA
C            TO BE TRANSFERRED TO THE OUTPUT COLUMNS WHEN A MATCH ON THE
C            COLUMN OCCURS.
C  INDEX, 
C  VALUES,N1,...,NW - THE INTEGERS N1,...,NW WILL BE CHECKED AGAINST THE
C            IN THE INDEX COLUMN.
C  TOCOL,M1,...,MW - THE INTEGERS M1,...,MW SPECIFY THE OUTPUT COLUMNS W
C            DATACOL VALUES WILL BE TRANSFERRED TO BASED ON THE VALUE MA
C
C  MODIFIED FOR VAX CONVERSION BY ALAN MAZER  3-AUG-83
C
C     IBIS-2 LIBRARY CALLS ADDED BY MEREDITH COX 17-AUG-94
C
C**********************************************************************
C
      SUBROUTINE TRANSCOL(DATACOL,INDEX,VALUE,TOCOL,COUNT,MAXTOC)
      IMPLICIT NONE
C
      INTEGER MAXTOC,CLEN,ICOL,INDEX,I
      INTEGER IX,COUNT,DATACOL,V
      INTEGER*4 IUNIT, OUNIT, STATUS, INIBIS, OUTIBIS
      INTEGER*4 IN_ROWS,IN_COLUMNS
      INTEGER*4 VALUE(100),TOCOL(100)
      INTEGER*4  OUT_COLUMN(1024)
C
      REAL*4 NULL
      REAL*4 INDATA(250000)
      REAL*4 FCOL1(250000)
C
      INTEGER*2 CS(250000)
C
C     GET UNIT NO. AND OPEN VICAR DATA SETS
C
      NULL = 0.0

      CALL XVUNIT ( IUNIT, 'INP', 1, STATUS,' ' )
      IF ( STATUS .NE. 1 ) THEN
       CALL XVMESSAGE
     &    ('INPUT FILE INITIALIZATION ERROR - PROGRAM TERMINATED',' ')
       CALL ABEND
      END IF
C
      CALL XVUNIT ( OUNIT, 'OUT', 1, STATUS,' ' )
      IF ( STATUS .NE. 1 ) THEN
       CALL XVMESSAGE
     &   ('OUTPUT FILE INITIALIZATION ERROR - PROGRAM TERMINATED',' ')
       CALL ABEND
      END IF
C
      CALL IBIS_FILE_OPEN(IUNIT,INIBIS,'READ',0,0,' ',' ',STATUS)
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(IUNIT,STATUS,1)

C     GET THE SIZE

      CALL IBIS_FILE_GET(INIBIS,'NR',IN_ROWS,1,1)
      CALL IBIS_FILE_GET(INIBIS,'NC',IN_COLUMNS,1,1)


C
C    OUTPUT FILE IS OPENED TO A COLUMN LENGTH THAT IS
C    EQUAL TO THE HIGHEST COLUMN NUMBER SPECIFIED IN
C    THE 'TOCOL' PARAMETER.  THIS WILL ALLOW THE OUTPUT
C    TO BE SMALLER, LARGER OR SAME SIZE AS INPUT DEPENDING
C    ON THE MAXIMUM 'TOCOL' VALUE SPECIFIED AS INPUT
C


      CALL IBIS_FILE_OPEN(OUNIT,OUTIBIS,'WRITE',MAXTOC,
     &  IN_ROWS,' ','COLUMN',STATUS)
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(OUNIT,STATUS,1)

      CLEN=IN_ROWS

      ! Mark the columns which will be handled special
      CALL ZIA(OUT_COLUMN,MAXTOC*4) !all false
c     DO ICOL=1,MAXTOC
c  above was bug found by Mike Smyth ... should be:
      DO ICOL=1,COUNT
	OUT_COLUMN(TOCOL(ICOL)) = 1
      ENDDO

C   Copy all of the normal columns directly
      DO 100 ICOL=1,MAXTOC
	IF (OUT_COLUMN(ICOL).EQ.1) GOTO 100  !will be processed later
        CALL IBIS_COLUMN_SET(INIBIS,'U_FORMAT','REAL',ICOL,STATUS) 
        IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
        CALL IBIS_COLUMN_READ(INIBIS,FCOL1,
     &                   ICOL,1,IN_ROWS,STATUS)
        IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
        CALL IBIS_COLUMN_SET(OUTIBIS,'U_FORMAT','REAL',ICOL,STATUS)
        CALL IBIS_COLUMN_WRITE(OUTIBIS,FCOL1,ICOL,1,IN_ROWS,STATUS)
        IF (STATUS.NE.1) CALL IBIS_SIGNAL(OUTIBIS,STATUS,1)
100   CONTINUE


C
C  STORE INDICES IN CS
C

C -- Read in INDEX column; use 'HALF' since 'CS' is INTEGER*2:
      CALL IBIS_COLUMN_SET(INIBIS,'U_FORMAT','HALF',INDEX,STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
      CALL IBIS_COLUMN_READ(INIBIS,CS,
     &                   INDEX,1,IN_ROWS,STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)

C
C
C  TRANSFER DATA ACCORDING TO CS INDICES.
C

C -- Right now, the data translation is all 'REAL', meaning
C -- That a 'DOUB' or 'COMP' column will lose information.
C -- This will do for now, but really should have different
C -- statements for each 'DOUB','COMP' and 'ASCII' types.

      CALL IBIS_COLUMN_READ(INIBIS,INDATA,
     &                   DATACOL,1,IN_ROWS,STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)

      DO 810 IX=1,COUNT
        V = VALUE(IX)
        DO 800 I=1,CLEN

C Transfer data if VALUE matches this row's INDEX (CS)
          IF (CS(I).EQ.V) THEN
		 FCOL1(I) = INDATA(I)
	  ELSE
		 FCOL1(I) = NULL
	  ENDIF

800     CONTINUE

      CALL IBIS_COLUMN_WRITE(OUTIBIS,FCOL1,TOCOL(IX),1,IN_ROWS,STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL(OUTIBIS,STATUS,1)
810   CONTINUE
C
C     CLOSE DATA SETS
C
      CALL IBIS_FILE_CLOSE ( INIBIS,' ', STATUS )
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(IUNIT,STATUS,1)
C
      CALL IBIS_FILE_CLOSE ( OUTIBIS,' ', STATUS )
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(OUNIT,STATUS,1)
C

      RETURN
      END
C
C**********************************************************************
C
C---- IBIS PROGRAM "TRANS2".
C     PURPOSE: TO CONVERT SHORT VERTICALLY ALIGNED
C              COLUMNS OF DATA TO A LONGER COLUMN.
C              THIS PROGRAM IS THE INVERSE OF "TRANSCOL".
C     USER PARAMETERS:
C     FROM_COL,N1,...NK    THE INTEGERS N1,...NK SPECIFY
C                         THE SHORT COLUMNS CONTAINING THE
C                         DATA TO BE TRANSFERED TO LONG COLUMN.
C     DATACOL,M           THE INTEGER M SPECIFIES THE DESTINATION
C                         COLUMN.
C     NCOL,J              THE INTEGER J SPECIFIES THE NUMBER
C                         OF SHORT COLUMNS TO BE PROCESSED.
C                         IF J<M, M COLUMNS WILL BE PROCESSED.
C
C     MODIFIED FOR VAX CONVERSION BY ALAN MAZER  3-AUG-83
C
C     IBIS-2 LIBRARY CALLS ADDED BY NILES RITTER 28-JUN-94
C**********************************************************************
C
      SUBROUTINE TRANS2(DATACOL,NCOL,FROM_COL,FRMCNT)
      IMPLICIT NONE
      
      INTEGER NUM_OUT_COLS,NCOL,INUNIT,OUTUNIT
      INTEGER ICOL,I,K
      INTEGER*4 COL(250000),DATA(250000)
      INTEGER*4 FROM_COL(200),DATACOL,NUM_FROM_COLS
      INTEGER*4 IN_ENTRIES,OUT_ENTRIES
      INTEGER*4 FRMCNT
      INTEGER*4 INIBIS,OUTIBIS,STATUS
C
C---- READ PARAMETERS.
C
      NUM_FROM_COLS = FRMCNT
      NUM_OUT_COLS  = MAX0(NCOL,DATACOL)
C
C---- OPEN FILES, READ COLUMN LENGTH.
C
C
      CALL XVUNIT ( INUNIT, 'INP', 1, STATUS,' ' )
      IF ( STATUS .NE. 1 ) THEN
       CALL XVMESSAGE
     &    ('INPUT FILE INITIALIZATION ERROR - PROGRAM TERMINATED',' ')
       CALL ABEND
      END IF
C
      CALL IBIS_FILE_OPEN(INUNIT,INIBIS,'READ',0,0,' ',' ',STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(INUNIT,STATUS,1)
      CALL IBIS_FILE_GET(INIBIS,'NR',IN_ENTRIES,1,1)
C
C     COMPUTE COLUMN LENGTH OF OUTPUT 
C
      OUT_ENTRIES = IN_ENTRIES * NUM_FROM_COLS
      CALL XVUNIT ( OUTUNIT, 'OUT', 1, STATUS,' ' )
      IF ( STATUS .NE. 1 ) THEN
       CALL XVMESSAGE
     &   ('OUTPUT FILE INITIALIZATION ERROR - PROGRAM TERMINATED',' ')
       CALL ABEND
      END IF
      CALL IBIS_FILE_OPEN(OUTUNIT,OUTIBIS,'WRITE', 
     +      NUM_OUT_COLS,OUT_ENTRIES,' ','COLUMN',STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(OUTUNIT,STATUS,1)

C
C---- MOVE "FROM"-COLUMNS INTO "DATA"-COLUMN.
C
      DO ICOL = 1,NUM_FROM_COLS
         CALL IBIS_COLUMN_SET(INIBIS,'U_FORMAT','REAL',ICOL,STATUS)
	 IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
         CALL IBIS_COLUMN_READ(INIBIS,COL,
     +                   FROM_COL(ICOL),1,IN_ENTRIES,STATUS)
	 IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
         DO  I = 1,IN_ENTRIES
            DATA((I-1) * NUM_FROM_COLS + ICOL) = COL(I)
         ENDDO
      ENDDO
      CALL IBIS_COLUMN_SET(OUTIBIS,'U_FORMAT','REAL',DATACOL,STATUS)
      CALL IBIS_COLUMN_WRITE(OUTIBIS,DATA,DATACOL,1,OUT_ENTRIES,STATUS)
      IF (STATUS.NE.1) CALL IBIS_SIGNAL(OUTIBIS,STATUS,1)
C
C---- STRETCH REMAINING COLUMNS.
C
      DO 300 ICOL = 1,NCOL
         IF(ICOL.EQ.DATACOL) GO TO 300
         CALL IBIS_COLUMN_SET(INIBIS,'U_FORMAT','REAL',ICOL,STATUS)
	 IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
         CALL IBIS_COLUMN_READ(INIBIS,COL,ICOL,1,IN_ENTRIES,STATUS)
	 IF (STATUS.NE.1) CALL IBIS_SIGNAL(INIBIS,STATUS,1)
         DO 310 I = 1,IN_ENTRIES
            DO 311 K = 1,NUM_FROM_COLS
               DATA((I-1) * NUM_FROM_COLS + K) = COL(I)
  311       CONTINUE
  310    CONTINUE
         CALL IBIS_COLUMN_SET(OUTIBIS,'U_FORMAT','REAL',ICOL,STATUS)
         CALL IBIS_COLUMN_WRITE(OUTIBIS,DATA,
     +                  ICOL,1,OUT_ENTRIES,STATUS)
         IF (STATUS.NE.1) CALL IBIS_SIGNAL(OUTIBIS,STATUS,1)
  300 CONTINUE
C
      CALL IBIS_FILE_CLOSE ( INIBIS,' ', STATUS )
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(INUNIT,STATUS,1)
      CALL IBIS_FILE_CLOSE ( OUTIBIS,' ', STATUS )
      IF (STATUS .NE. 1) CALL IBIS_SIGNAL_U(OUTUNIT,STATUS,1)
      RETURN
      END


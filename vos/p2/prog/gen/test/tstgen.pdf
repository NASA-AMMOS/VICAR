procedure
refgbl $echo
body
let _onfail="continue"
let $echo="yes"
!  THIS IS A TEST FILE FOR GEN
! Throw in a few label-lists to check the output labels
!THESE FOLLOWING TESTS SHOW THE USE OF GEN WITH FLOATING POINT NUMBERS
!AND WITH ONLY 2D DATA
GEN TGEN1 10 10 IVAL=50.5 SINC=10.5 LINC=-20.5
LIST TGEN1
LABEL-LIST TGEN1
GEN TGEN1 10 20 'HALF IVAL=-100.5 SINC=0.0 LINC=0.0
LIST TGEN1
GEN TGEN3 10 10 'REAL IVAL=0.0 SINC=1.5 LINC=25.
LIST TGEN3
LABEL-LIST TGEN3
! Test double-precision parameters
GEN TGEN3 10 10 'DOUB LINC=.1 SINC=.01
LIST TGEN3 NDIGITS=16
LABEL-LIST TGEN3
!THESE TESTS SHOW THE USE OF GEN WITH VALUES AS INTEGERS
GEN TGEN3 10 10 'FULL IVAL=0 SINC=20 LINC=-3
LIST TGEN3
GEN TGEN4 10 10 'DOUB IVAL=-1000 SINC=20 LINC=3
LIST TGEN4
!THESE TESTS SHOW THE USE OF MOD
GEN TGEN1 10 10 MOD=10 LINC=3 SINC=2
LIST TGEN1
LABEL-LIST TGEN1
GEN TGEN1 10 10 MOD=1.5
LIST TGEN1
! Complex numbers
GEN TGEN1 10 10 IVAL=(10,-10) SINC=.5 LINC=(10,-10) 'COMP
LIST TGEN1
LABEL-LIST TGEN1
!THESE FOLLOWING TEST SHOW THE USE OF GEN WITH THE DIFFERENT OUTPUT OPTIONS
!AND THE DEFAULT VALUES
GEN TGEN3 10 10 
LIST TGEN3
GEN TGEN3 10 10 'REAL4
LIST TGEN3
GEN TGEN4 10 10 'DOUB
LIST TGEN4
end-proc

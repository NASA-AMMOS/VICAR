PROCESS		HELP=*
!
! IMG2ASCII - Create an ASCII text file of DN values from an image
!
PARM INP    TYPE=(STRING,99) COUNT=(0:1)    DEFAULT=--
PARM OUT    TYPE=(STRING,99) COUNT=(0:1)    DEFAULT=--
PARM SIZE   TYPE=INTEGER     COUNT=4    DEFAULT=(1,1,0,0)
PARM NOTES  TYPE=(STRING,3)  COUNT=1    VALID=("ON","OFF") DEFAULT="OFF"
PARM ORG    TYPE=STRING      COUNT=1    VALID=("COLUMNS","ROWS") DEFAULT="ROWS"
PARM INDEX  TYPE=STRING      COUNT=1    VALID=("YES","NO") DEFAULT="YES"
local dummy TYPE=REAL        count=1
PARM MINVAL TYPE=name        DEFAULT=dummy
PARM MAXVAl TYPE=name        DEFAULT=dummy


!# annot function="Vicar Data Conversion"
!# annot keywords=("ASCII file",DN,dimension,file,size,BYTE)

END-PROC
.TITLE
Converts image data to ASCII text file

.HELP
PURPOSE

	Create an ASCII file of values from a VICAR image

TAE COMMAND LINE FORMAT

	IMG2ASCII INP OUT PARMS

	Where valid parms are SIZE, NOTES, ORG and INDEX.

    SIZE allows the user to exract a portion of the image.
    If the user exceeds the image bounds then the listing
    will be trimmed to the actual number of samples.
    NOTES provides the maximum and minimum values of the
    extracted data. The values are returned in MIMVAL and
    MAXVAL.
    ORG allow the user to specify that the output will be
    placed in rows. The INDEX parameter allows that the
    output row data will have a sequence number to start
    each row.  Normally, the data will be placed in ROW
    order in blocks appropriate the the number of samples.
 
.PAGE
EXAMPLES

    IMG2ASCII INP=SURFACE.IMG OUT=SURFACE.TXT SIZE=(100,100,50,50) NOTES=ON

	In this example, IMG2ASCII produces an ASCII text file, SURFACE.TXT
of values from the VICAR image SURFACE.IMG starting at line and sample 100
and ending at line and sample 150. Upon program completion, with the
NOTES switch on, the min and max values encountered and the dimension of
the text file written are reported to the user.

.PAGE
OPERATION

	Only the DN values are output. The line and sample positions are not
output to the text file. The data maybe output in rows or columns.
In the case of columns, the user can request the 1-dimensional position
order of the data. This may be useful for plotting. The program will notify
the user as to the dimension of the newly created text file (in the case
that the user specifies a SIZE larger than the input picture the output
file will trim to the max line and samples of the input picture).

    Typically, this is used for small segments of images. A user might
extract a small seqment of a 10K by 10K image for later use in a
vicar procedure. The user can also get the maximum and minimum values
into output tcl variables.

    Img2ascii works on BYTE, HALF, FULL and REAL images.

RESTRICTIONS

	Converting binary VICAR images to ASCII text files will create
files that are much larger in disk storage space than the images. An image
100 square that uses 21 blocks will create an ASCII file of 134 blocks.

The maximum size of image is 10000 in the sample direction.

HISTORY

Revisions:

  1994-06-27  F. Moss      Add test pdf
  1994-09-05  J. Turner (CRI)      Made portable for UNIX
  2012-10-31  R. Bambery   Fix .HELP and .TITLE order in pdf
                           Added ORG and INDEX parameters to
                           control output format. Added return
                           parameters MINVAL and MAXVAL. Allow
                           BYTE, HALF, FULL and REAL images. 
  2015-03-09  W. Bunch     Fixed WRITE format error.
  2015-08-10  W. Bunch - replaced xqout call with xvqout call 
                         to pass out vars to shell vicar

.LEVEL1
.VARIABLE INP
A VICAR image
(BYTE or HALF)
.VARIABLE OUT
ASCII text file
(No VICAR label)
.VARIABLE SIZE
Normal VICAR size field
.VARIABLE NOTES
Switch (ON or OFF)
.VARIABLE ORG
ASCII Text file in Columns
 or Rows
.VARIABLE INDEX
If in Column format do
you want 2 columns, the
first being its order
and the second being the
value.
.LEVEL2
.VARIABLE NOTES
ON and OFF switch
indicating the min
and max values and
the dimension of 
the text file
written to disk.
.END

!Test of program PHOTFUNC
procedure
refgbl $echo
body
let _onfail="continue"
let $echo="yes"
local path1 type=string init="wms_test_work:[testdata.mipl.vgr]"
local path2 type=string init="wms_test_work:[testdata.mipl.gll]"
local path3 type=string init="wms_test_work:[testdata.cassini.cas$i$ss]"

refgbl $syschar
if ($syschar(1) = "UNIX")
  let path1="/project/test_work/testdata/mipl/vgr/"
  let path2="/project/test_work/testdata/mipl/gll/"
  let path3="/project/test_work/testdata/cassini/casIss/"
end-if

!Note that each test block (separated by ---) can be run independently.
!Note that some of the tests have been commented out to reduce the overall
!length by skipping features which are unlikely to change over time.
!
! The first three tests make use of SPICE data.
! For Galileo, Cassini, and Voyager, using SPICE is the default.

!--------------------------Galileo image-------------------------------
! MINNAERT function
photfunc &"path2"venus.img a.img ckname=fare MINN=0.7 MAXCOR=5.
list a.img ss=100 ns=600 linc=60 sinc=60

!--------------------------Cassini image-------------------------------
! BURATTI function
! Supply parameters to retrieve SPICE data
photfunc &"path3"n1354897340.1 a.img BURATTI=(0.5,.6,-.003,.14,.14,1.0) +
   MISSION=CASSI CAMERA=1 SCET=(2000,342,16,10,56,292) TARGET=JUPITER
list a.img ss=340 linc=50 sinc=50

!--------------------------VGR image space image-------------------------------
! New HAPKE function with one term Henyey-Greenstein function
! Input geometric distortion file
photfunc (&"path1"f1636832.fic,&"path1"f1636832.gpribis) a.img +
    HAPKE=(.5,.2,10.,.5,.2) target=IO
list a.img ss=200 linc=60 sinc=60

! Size field test.  Result should be identical to above except for image offsets
!photfunc (&"path1"f1636832.fic,&"path1"f1636832.gpribis) a.img +
!  (61,200,740,600) HAPKE=(.5,.2,10.,.5,.2) target=IO
!list a.img linc=60 sinc=60

! The remaining tests demonstrate the capability to process an image without
! accessing SPICE ('NOSPICE).  This means that all image geometry information
! must be supplied via parameters.

! New HAPKE function with two term Legendre polynomial fcn.
! Specify camera pointing via OM matrix, use nominal distortions
photfunc &"path1"f1636832.fic a.img HAPKE=(.5,.2,10.,.5,.2,0.0) +
    'NOSPICE MISSION=VGR-1 CAMERA=7 TARGET=IO +
    SOLAR=(0.541,171.276) RSVECTOR=(-739030.7,-321741.5,-456.1) +
    OMMATRIX=(0.225294680,.330341900,.91657871, +
              -.51654703,-.757162930,.39985430, +
              0.82608805,-.563541060,.00005235)
list a.img ss=200 linc=60 sinc=60

!--------------------------VGR object space image-------------------------------
!5: Old HAPKE function
! Specify camera pointing via object-space tiepoints
photfunc &"path1"f1636832.geo a.img HAPKE=(0.8,0.1,0.4,0.0) +
    'NOSPICE MISSION=VGR-1 CAMERA=7 RADII=(1829.4,1819.3,1815.7) +
    SOLAR=(0.541,171.276) SPACE=(-.032,156.474,806030.) +
    TIEPOINT=(381.86,382.64,19.35,229.21, +
        382.17,498.94,25.83,190.00, +
        381.98,615.31,32.86,163.58, +
        498.40,498.49,2.539,179.32, +
        498.53,615.11, 8.65,156.13)
list a.img ss=300 ns=600 linc=60 sinc=60

! Same old function
! Specify camera pointing via image-space subspacecraft point and north angle
!photfunc &"path1"f1636832.geo b.img HAPKE=(0.8,0.1,0.4,0.0) +
!    'NOSPICE MISSION=VGR-1 CAMERA=7 RADII=(1829.4,1819.3,1815.7) +
!    SOLAR=(0.541,171.276) SPACE=(-.032,156.474,806030.) +
!    SSCPT=(539.67,601.21) NORANGLE=15.7
!
!f2 (a.img,b.img) diff.img func="in1-in2"
!hist diff.img		!differences should be small

!-------------------------------Other missions---------------------------------
! Create psuedo data for other missions by stripping the flight label from a
! Voyager object-space image.
gen a.img 1000 1000				!Gen an image with no labels
labswtch (a.img,&"path1"f1636832.geo) b.img	!Remove flight label
label-list b.img				!Check it out

! The program knows that none of these missions have SPICE data, so it does'nt
! even try to access SPICE.  Built-in tables are used to supply the camera
! parameters.  All other information must be supplied via parameters.

!6: HAPKE function with COOK modification
photfunc b.img a.img COOK=0.5 HAPKE=(0.9,-0.1,0.3,.005) 'OBJECT 'NOIN +
    'MAR10 CAMERA=1 RADII=(1829.4,1819.3,1815.7) +
    SOLAR=(0.541,171.276) SLATI=-.032 SLONG=156.474 RMAG=806030. +
    SSCPT=(539.67,601.21) NORANGLE=15.7
list a.img ss=300 ns=600 linc=60 sinc=60

! Try also WFPC1, WFPC2, SIPS, QUEST, VIKOR, MAR-9

!7: VEVERKA function
! The mission is not specified.  Therefore must supply camera parameters.
photfunc b.img a.img VEVERKA=(0.5,-0.01,0.5,0.01) 'OBJECT +
    TARGET=IO FOCL=1500.19 LAXIS=500. SAXIS=500. PSCALE=84.8214 +
    SOLAR=(0.541,171.276) SLATI=-.032 SLONG=156.474 RMAG=806030. +
    SSCPT=(539.67,601.21) NORANGLE=15.7
list a.img ss=300 ns=600 linc=60 sinc=60

!-----------------------------PERSLAB label-----------------------------------
! IRVINE function
perslab &"path1"f1636832.geo b.img target=io	!add perslab label
photfunc b.img a.img IRVINE=(1.14,.118,.0019)	!note that SPICE is not accessed
list a.img ss=300 ns=600 linc=60 sinc=60

!--------------------------Map projected image---------------------------------
! Default Lambert function.  Note that photfunc must access SPICE to determine
! the illumination geometry.  For VGR SPICE, the target must be specified.
map3 &"path1"f1636832.geo b.img NL=500 NS=500 +
   'RECT TARGET=IO SCALE=10. +
   LINE=1. SAMP=1. LATI=80. LONG=230.
photfunc b.img a.img target=io
list a.img linc=50 sinc=50

-------------------------------Data format test---------------------------------
! Start with a byte image....
!fit &"path1"f1636832.fic b.img perc=0. 'byte exclude=(-32768,0)

!photfunc b.img a.img HAPKE=(.5,.2,10.,.5,.2) target=IO
!list a.img ss=200 linc=60 sinc=60

!cform b.img c.img 'half
!photfunc c.img a.img HAPKE=(.5,.2,10.,.5,.2) target=IO
!list a.img ss=200 linc=60 sinc=60

!cform b.img c.img 'full
!photfunc c.img a.img HAPKE=(.5,.2,10.,.5,.2) target=IO
!cform a.img c.img 'half
!list c.img ss=200 linc=60 sinc=60

!cform b.img c.img 'real
!photfunc c.img a.img HAPKE=(.5,.2,10.,.5,.2) target=IO
!cform a.img c.img 'half
!list c.img ss=200 linc=60 sinc=60

!------------------------Classification map option------------------------------
! Get a 450x450 area of a color triplet and convert to byte (for STATS)
!fit &"path1"io.org a.img (1,1,450,450) 'byte
!fit &"path1"io.blu b.img (1,1,450,450) 'byte
!fit &"path1"io.vio c.img (1,1,450,450) 'byte

! Create classification map
!stats (a.img,b.img,c.img) stats.img exclude=0 +
!  class1=(188,81,20,20) class2=(369,80,20,20)
!fastclas (a.img,b.img,c.img,stats.img) class.img sigma=(20.,10.)

! Replace classification map with gen data for testing program
!gen a.img nl=2 ns=2
!size a.img b.img zoom=225 'noin
!labswtch (class.img,b.img) a.img
!copy a.img class.img

! Input map projection info since PHOTFUNC won't handle ancient labels.
!copy  &"path1"io.vio c.img (1,1,450,450)
!photfunc (c.img,class.img) a.img inc=100 'NOSPICE +
!    RADII=(1829.4,1819.3,1815.7) + class=1 +
!    SOLAR=(0.541,171.276) RSVECTOR=(-739030.7,-321741.5,-456.1) +
!    'CYLI SCALE=8. NORTH=0. +
!    LATI=80. LONG=230. LINE=225. SAMP=1.
!label-replace a.img item="TYPE=IMAGE" 'sys
if ($syschar(1) = "VAX_VMS")
   dcl delete a.img;*
   dcl delete b.img;*
else
   ush rm a.img
   ush rm b.img
end-if
end-proc

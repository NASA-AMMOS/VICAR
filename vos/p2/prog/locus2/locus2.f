C
C  REVISION HISTORY
c  10-Jan-2013 -lwk- fixed long continuation lines for new compiler flag on Solaris
C     6-97 ...RRD... MADE PORTABLE FOR UNIX
C     1-97 ...CCA... UPDATED HELP, added output of Unc Residual to 
C                    TCL variable
C     1-96 ...CCA... MADE GENGRID INC REAL, ADDED OUTPUT OF RADIAL
C                    COMPONENT OF VECTORS IN RADIAL TABLE
C    12-93 ...CCA... SIMPLIFIED LOCUS AS LOCUS2
C     2-73  LOCUS WRITTEN BY JOHN KREZNAR


        INCLUDE 'VICMAIN_FOR'
	SUBROUTINE MAIN44 
        INCLUDE 'pgminc'
	REAL*4 Y(2,7200)
	integer*4 parb(500)
C
C-------OPEN INPUT COORDINATE DATA SETS
C-------INPUT FILES ARE COORDINATE DATA SETS IN 'MARK' FORMAT
C-------THIS FORMAT IS MERELY PAIRS OF REAL*4 VALUES (L1,S1,L2,S2,...)
C-------IN ONE RECORD.  EACH FILE MUST HAVE THE SAME NUMBER OF POINTS.
C
	CALL XVUNIT(IURAW,'INP',1,IST,' ')
	CALL XVOPEN(IURAW,IST,'OPEN_ACT','SA','IO_ACT','SA',' ')
C
	CALL XVPCNT('INP',INPUTS)

C-------GET GRID SIZE FROM INPUT LABEL - GRIDLOCB
	CALL XLGET(IURAW,'HISTORY','GRID_NROW',NROWI,IST,'HIST',
     1                'GRIDLOCB','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1)
     1	  CALL XLGET(IURAW,'HISTORY','GRID_NROW',NROWI,IST,'HIST',
     2                'GRIDGEN','INSTANCE',1,'FORMAT','INT',' ')
	IF (IST .NE. 1) 
     1    CALL XVMESSAGE('GRID_NROW NOT FOUND IN INPUT',' ')

	CALL XLGET(IURAW,'HISTORY','GRID_NCOL',NCOLI,IST,'HIST',
     1                'GRIDLOCB','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1) 
     1	  CALL XLGET(IURAW,'HISTORY','GRID_NCOL',NCOLI,IST,'HIST',
     2                'GRIDGEN','INSTANCE',1,'FORMAT','INT',' ')
	IF (IST .NE. 1) 
     1    CALL XVMESSAGE('GRID_NCOL NOT FOUND IN INPUT',' ')

	IF (INPUTS .EQ. 2) THEN			!INPUT REFERENCE
	  CALL XVUNIT(IUREF,'INP',2,IST,' ')	
	  CALL XVOPEN(IUREF,IST,'OPEN_ACT','SA','IO_ACT','SA',' ')
C
C---------GET GRID SIZE FROM REFERENCE LABEL EITHER GRIDGEN OR RADDIST
	  CALL XLGET(IUREF,'HISTORY','GRID_NROW',NROWR,IST,'HIST',
     1                'GRIDGEN','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1) 
     1	  CALL XLGET(IUREF,'HISTORY','GRID_NROW',NROWR,IST,'HIST',
     2                'RADDIST','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1) CALL XVMESSAGE(
     +'KEYWORD GRID_NROW NOT FOUND IN REF',' ')

	  CALL XLGET(IUREF,'HISTORY','GRID_NCOL',NCOLR,IST,'HIST',
     1                'GRIDGEN','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1) 
     1	  CALL XLGET(IUREF,'HISTORY','GRID_NCOL',NCOLR,IST,'HIST',
     2                'RADDIST','INSTANCE',1,'FORMAT','INT',' ')
	  IF (IST .NE. 1) CALL XVMESSAGE(
     +'KEYWORD GRID_NCOL NOT FOUND IN REF',' ')

	END IF
C
C-------COMPARE INPUT AND REFERENCE LABEL GRID SIZES
	IF (NROWI .EQ. NROWR .AND. NCOLI .EQ. NCOLR) THEN
		NROW=NROWI
		NCOL=NCOLI
	ELSE IF (NROWI .EQ. 0) THEN  !NO INPUT LABEL
		NROW=NROWR
		NCOL=NCOLR
	ELSE IF (NROWR .EQ. 0) THEN   !NO REF LABEL
		NROW=NROWI
		NCOL=NCOLI
	END IF
C
C-------OVERRIDE WITH GRID SIZE FROM PARAMETERS
	CALL XVPARM('NROW',NR,ICNTR,IDEF,0)
	IF (ICNTR .EQ. 1) NROW=NR
	CALL XVPARM('NCOL',NC,ICNTC,IDEF,0)
	IF (ICNTC .EQ. 1) NCOL=NC
C
	NPTSLAB = NROW*NCOL
	IF (NCOL .GT. 100) GO TO 995
	IF (NPTSLAB .EQ. 0) GO TO 994
C
C-------CHECK SIZE VERSUS NUMBER OF SAMPLES
	CALL XVGET(IURAW,IST,'NS',NS1,' ')
	IF (INPUTS .EQ. 2) THEN
		CALL XVGET(IUREF,IST,'NS',NS2,' ')
		IF (NS1 .NE. NS2) GO TO 999
		IF (NPTSLAB .NE. NS2/2) GO TO 997
	END IF
	IF (NPTSLAB .NE. NS1/2) GO TO 996
	IF (NPTSLAB .GT. 900) GO TO 998
	NPOINTS = NPTSLAB
C
C-------READ INPUT FILES
	CALL RDPTS(Y,NPOINTS,NROW,NCOL,IURAW,IUREF,INPUTS)
C
	CALL XVCLOSE(IURAW,IST,' ')
	IF (INPUTS .EQ. 2) CALL XVCLOSE(IUREF,IST,' ')
C
C-------PROCESS USING ALL TRANSFORMATIONS, WITH :
C-------NPOINTS POINTS, 2 FRAMES, Y BUFFER (HOLDING INPUT AND OUTPUT
C-------DATA), RAW DATA SET IS 1ST SET OF POINTS IN Y AND REF DATA
C-------SET IS THE 2ND SET OF POINTS IN Y.
C-------UPON OUTPUT Y(1,1,N) WILL HOLD:
C-------   N=1   RAW DATA
C-------   N=2   REF DATA
C-------   N=3   UNTRANSFORMED RAW DATA
C-------   N=4   OFFSET TRANSFORM OF RAW DATA
C-------   N=5   ROTATION AND OFFSET OF RAW DATA
C-------   N=6   SCALE AND OFFSET OF RAW DATA
C-------   N=7   SCALE, ROTATION AND OFFSET OF RAW DATA
C-------   N=8   UNCONSTRAINED TRANSFORMATION OF RAW DATA
C
	CALL LSTIX(NPOINTS,2,Y,1,2,UNCR)
C
C-------PRODUCE THE OUTPUT FILES:
C-------LOCUS2.SROL = (N=7 TRANSFORMATION) - REF  FOR LINE COORDS
C-------LOCUS2.SROS = (N=7 TRANSFORMATION) - REF  FOR SAMP COORDS
C-------LOCUS2.SROM = MAGNITUDE OF DIFF  SQRT(7L**2+7S**2)
C-------LOCUS2.UNCL = (N=8 TRANSFORMATION) - REF  FOR LINE COORDS
C-------LOCUS2.UNCS = (N=8 TRANSFORMATION) - REF  FOR SAMP COORDS
C-------LOCUS2.UNCM = MAGNITUDE OF DIFF  SQRT(8L**2+8S**2)
C-------TABLE OF RADIAL DIST FROM CENTER VS. SRO & UNC MAGN & COMPONENTS

	CALL DIFFS(Y,NPOINTS,NROW,NCOL,*993)

	call xqini(parb,500,xabort)
	call xqreal(parb,'UNCRES',1,UNCR,xadd,ist)
	call xvqout(parb,ist)

	RETURN
994	CALL XVMESSAGE('NEED NROW,NCOL FROM LABEL OR PARMS',' ')
	CALL ABEND
995	CALL XVMESSAGE('NUMBER OF COLUMNS IN GRID CANT EXCEED 100',' ')
	CALL ABEND
996	CALL XVMESSAGE('GRID SIZE NOT CONSISTENT WITH',' ')
	CALL XVMESSAGE('NUMBER OF SAMPLES IN RAW FILE',' ')
	CALL ABEND
997	CALL XVMESSAGE('GRID SIZE NOT CONSISTENT WITH',' ')
	CALL XVMESSAGE('NUMBER OF SAMPLES IN REF FILE',' ')
	CALL ABEND
998	CALL XVMESSAGE('NUMBER OF COORDINATES MUST NOT EXCEED 900',' ')
	CALL ABEND
999	CALL XVMESSAGE(
     +'FILES MUST CONTAIN THE SAME NUMBER OF POINTS',' ')
993	CALL ABEND
	END
C
	SUBROUTINE RDPTS(Y,NPTS,NROW,NCOL,IURAW,IUREF,INPUTS)
	REAL*4 Y(2,NPTS,*),INC,GSL,GSS
C
C-------IF LOCUS2 NEEDS TO MAKE A PERFECT GRID (# INPUTS=1)
C-------TRY TO DETERMINE THE GRID SPACING IN THE RAW DATA, BUT
C-------DEFAULT IT TO 10 IF NECESSARY.
C
	CALL XVREAD(IURAW,Y(1,1,1),IST,' ')		!READ RAW POINTS
        IF (INPUTS .EQ. 2) THEN
		CALL XVREAD(IUREF,Y(1,1,2),IST,' ')  !READ REF POINTS IF ANY
C		CALL PGRID(Y(1,1,2),NROW,NCOL,DUM,0)
	ELSE
		INC = 10.        	!DEFAULTS TO 10
		M = NPTS/2 + 1       	!FIND GOOD POINTS NEAR MIDDLE
		DO 10 I=1,M-1
		N = M+I-1
		IF (Y(2,N+1,1) .GT. Y(2,N,1)) THEN
			INC = Y(2,N+1,1) - Y(2,N,1)	!INCREMENT
			GO TO 11
		END IF
10		CONTINUE
C
11		GSL = INC			!START LINE
		GSS = INC			!START SAMP
		CALL XVMESSAGE('COMPARING TO PERFECT GRID WITH',' ')
		CALL PRNT(7,1,GSL,' SL  = .')
		CALL PRNT(7,1,GSS,' SS  = .')
		CALL PRNT(7,1,INC,' INC = .')
		CALL GENGRID(Y(1,1,2),NROW,NCOL,GSL,GSS,INC)
C		CALL PGRID(Y(1,1,2),NROW,NCOL,DUM,0)
	END IF
C
	RETURN
	END
C
      SUBROUTINE GENGRID(OBUF,NROW,NCOL,GSL,GSS,INC)
      IMPLICIT INTEGER(A-Z)
      REAL*4 OBUF(1800),INC,GSL,GSS,GSS0
 
      GSS0 = GSS
      K = 1

      DO J=1,NROW		!ROWS
          DO I=1,NCOL   	!COLUMNS
              OBUF(K) = GSL
              OBUF(K+1) = GSS
              K = K + 2
              GSS = GSS + INC
          ENDDO
          GSS = GSS0
          GSL = GSL + INC
      ENDDO
      RETURN
      END
C
      SUBROUTINE LSTIX(NRES,NFRM,Y,J,M,R)
      REAL*4 Y(2,NRES,*)
      REAL*8 UI,VI,XI,YI,XIUI,YIUI,XIVI,XIXI,YIVI,YIYI,XIYI,DMLT,
     .       SIN1,COS1
      REAL*8 D,A(36),H(6),T(6)
      EQUIVALENCE(T(1),COS1),(T(2),SIN1),(T(4),D)
C
C-----Returning the Unconstrained residual R to calling program
C-----for output to local variable 1-16-97
c
      CALL QPRINT('1 LOCUS COORDINATE DETRENDING STATISTICS',40)
      CALL QPRINT(
     &'0 DEGREES OF FREEDOM ALLOWED              MATRIX FOR LINEAR                OFFSET PART OF         RESULTING RMS',
     & 111)
      CALL QPRINT(
     &'   IN MINIMIZING THE RMS                   PART OF TRANSFORMATION           TRANSFORMATION',
     & 90)
      UI=0.D0
      VI=0.D0
      NRET=0
C
      DO 22 I=1,NRES
      DO 21 K=1,NFRM
      IF(Y(1,I,K).EQ.-99) GO TO 22
   21 CONTINUE
      NRET=NRET+1
      UI=UI+Y(1,I,M)
      VI=VI+Y(2,I,M)
   22 CONTINUE
C
      XI=0.D0
      YI=0.D0
      XIUI=0.D0
      XIVI=0.D0
      YIUI=0.D0
      YIVI=0.D0
      XIXI=0.D0
      YIYI=0.D0
      XIYI=0.D0
      DO 25 I=1,NRES
      DO 24 K=1,NFRM
      IF(Y(1,I,K).EQ.-99) GO TO 25
   24 CONTINUE
      XI=XI+Y(1,I,J)
      YI=YI+Y(2,I,J)
      XIUI=XIUI+DMLT(Y(1,I,J),Y(1,I,M))
      XIVI=XIVI+DMLT(Y(1,I,J),Y(2,I,M))
      YIUI=YIUI+DMLT(Y(2,I,J),Y(1,I,M))
      YIVI=YIVI+DMLT(Y(2,I,J),Y(2,I,M))
      XIXI=XIXI+DMLT(Y(1,I,J),Y(1,I,J))
      YIYI=YIYI+DMLT(Y(2,I,J),Y(2,I,J))
      XIYI=XIYI+DMLT(Y(1,I,J),Y(2,I,J))
   25 CONTINUE
      T(1)=1.D0
      T(2)=0.D0
      T(3)=0.D0
      T(4)=1.D0
      T(5)=0.D0
      T(6)=0.D0
      R=RMS(NRES,Y,J,M,3,T)
      CALL TOPT('NONE                        ',T,R)
C OFFSET ONLY..
      T(5)=(UI-XI)/NRET
      T(6)=(VI-YI)/NRET
      R=RMS(NRES,Y,J,M,4,T)
      CALL TOPT('OFFSET ONLY                 ',T,R)
C OFFSET ROTATE..
      COS1= NRET*(XIUI+YIVI)-XI*UI-YI*VI
      SIN1=-NRET*(XIVI-YIUI)-YI*UI+XI*VI
      D=DSQRT(SIN1**2+COS1**2)
      SIN1=SIN1/D
      COS1=COS1/D
      T(3)=-SIN1
      T(4)=COS1
      T(5)=(UI-XI*COS1-YI*SIN1)/NRET
      T(6)=(VI+XI*SIN1-YI*COS1)/NRET
      R=RMS(NRES,Y,J,M,5,T)
      CALL TOPT('ROTATE, OFFSET              ',T,R)
C OFFSET MAGNIFY
      A(1)=NRET
      A(2)=0.D0
      A(3)=XI
      A(4)=0.D0
      A(5)=A(1)
      A(6)=YI
      A(7)=XI
      A(8)=YI
      A(9)=XIXI+YIYI
      H(1)=UI
      H(2)=VI
      H(3)=XIUI+YIVI

      CALL DGELG( H, A, 3, 1, EPS, IFAIL)  ! SOLVE SYSTEM OF LINEAR EQUATIONS.
      IF  (IFAIL .NE. 0)   GOTO 6000       ! CHECK FOR ERROR

      T(1)=H(3)
      T(2)=0.D0
      T(3)=0.D0
      T(4)=H(3)
      T(5)=H(1)
      T(6)=H(2)
      R=RMS(NRES,Y,J,M,6,T)
      CALL TOPT('MAGNIFY, OFFSET             ',T,R)
C OFFSET ROTATE MAGNIFY
      A(1)=NRET
      A(2)=0.D0
      A(3)=XI
      A(4)=YI
      A(5)=0.D0
      A(6)=A(1)
      A(7)=YI
      A(8)=-XI
      A(9)=XI
      A(10)=YI
      A(11)=XIXI+YIYI
      A(12)=0.D0
      A(13)=YI
      A(14)=-XI
      A(15)=0.D0
      A(16)=A(11)
      H(1)=UI
      H(2)=VI
      H(3)=XIUI+YIVI
      H(4)=YIUI-XIVI

      CALL DGELG( H, A, 4, 1, EPS, IFAIL)  ! SOLVE SYSTEM OF LINEAR EQUATIONS.
      IF  (IFAIL .NE. 0)   GOTO 6000       ! CHECK FOR ERROR

      T(1)=H(3)
      T(2)=H(4)
      T(3)=-H(4)
      T(4)=H(3)
      T(5)=H(1)
      T(6)=H(2)
      R=RMS(NRES,Y,J,M,7,T)
      CALL TOPT('MAGNIFY, ROTATE, OFFSET     ',T,R)
C UNCONSTRAINED..
      A(1)=NRET
      A(2)=0.D0
      A(3)=XI
      A(4)=YI
      A(5)=0.D0
      A(6)=0.D0
      A(7)=0.D0
      A(8)=A(1)
      A(9)=0.D0
      A(10)=0.D0
      A(11)=XI
      A(12)=YI
      A(13)=XI
      A(14)=0.D0
      A(15)=XIXI
      A(16)=XIYI
      A(17)=0.D0
      A(18)=0.D0
      A(19)=YI
      A(20)=0.D0
      A(21)=XIYI
      A(22)=YIYI
      A(23)=0.D0
      A(24)=0.D0
      A(25)=0.D0
      A(26)=XI
      A(27)=0.D0
      A(28)=0.D0
      A(29)=XIXI
      A(30)=XIYI
      A(31)=0.D0
      A(32)=YI
      A(33)=0.D0
      A(34)=0.D0
      A(35)=XIYI
      A(36)=YIYI
      H(1)=UI
      H(2)=VI
      H(3)=XIUI
      H(4)=YIUI
      H(5)=XIVI
      H(6)=YIVI

      CALL DGELG( H, A, 6, 1, EPS, IFAIL)  ! SOLVE SYSTEM OF LINEAR EQUATIONS.
      IF  (IFAIL .NE. 0)   GOTO 6000       ! CHECK FOR ERROR

      T(1)=H(3)
      T(2)=H(4)
      T(3)=H(5)
      T(4)=H(6)
      T(5)=H(1)
      T(6)=H(2)
      R=RMS(NRES,Y,J,M,8,T)
      CALL TOPT('UNCONSTRAINED LINEAR, OFFSET',T,R)
      RETURN

6000  CONTINUE
      CALL XVMESSAGE('ERROR COMPUTING COORDINATE TRANSFORMATION',' ')
      CALL ABEND
      RETURN
      END
C
      DOUBLE PRECISION FUNCTION DMLT(X,Y)
      REAL*4 X,Y
      REAL*8 U,V
      U=X
      V=Y
      DMLT=U*V
      RETURN
      END
C
      FUNCTION RMS(N,Y,J,M,K,T)
      REAL*4 Y(2,N,8)
      REAL*8 T(6),DRMS,U,V
C
      DRMS=0.D0
      L=0
C
	DO 2 I=1,N
	 IF(Y(1,I,M).EQ.-99.OR.Y(1,I,J).EQ.-99.) THEN
		Y(1,I,K)=-99.
		Y(2,I,K)=-99.
	 ELSE
		U=T(1)*Y(1,I,J)+T(2)*Y(2,I,J)+T(5)
		V=T(3)*Y(1,I,J)+T(4)*Y(2,I,J)+T(6)
		DRMS=DRMS+(U-Y(1,I,M))**2+(V-Y(2,I,M))**2
		L=L+1
		Y(1,I,K)=U
		Y(2,I,K)=V
	 END IF
2	CONTINUE
C
	IF(L.EQ.0) THEN
		RMS=0.
	ELSE
		RMS=DSQRT(DRMS/L)
	END IF

      RETURN
      END
C
      SUBROUTINE TOPT(NAME,T,R)
      REAL*8 T(6)
      CHARACTER*111 B
      CHARACTER*28 NAME
      CHARACTER Z0
      DATA Z0/'0'/
      B=' '
      DO 1 I=1,28
1     B(I+2:I+2) = NAME(I:I)
      WRITE (B(35:50),'(F16.6)') T(1)
      WRITE (B(51:66),'(F16.6)') T(2)
      WRITE (B(74:89),'(F16.6)') T(5)
      DO 2 I=90,111
2     B(I:I) = B(2:2)
      B(1:1) = Z0
      CALL QPRINT(B,111)
      WRITE (B(35:50),'(F16.6)') T(3)
      WRITE (B(51:66),'(F16.6)') T(4)
      WRITE (B(74:89),'(F16.6)') T(6)
      WRITE (B(96:111),'(F16.6)') R
      DO 3 I=1,30
3     B(I:I) = B(2:2)
      CALL QPRINT(B,111)
      RETURN
      END
C
	SUBROUTINE DIFFS(Y,NPOINTS,NROW,NCOL,*)
C
C-------ROUTINE TO PRODUCE THE OUTPUT FILES:
C-------= (N=7 TRANSFORMATION) - REF  FOR LINE COORDS
C-------= (N=7 TRANSFORMATION) - REF  FOR SAMP COORDS
C-------= MAGNITUDE OF DIFF  SQRT(7L**2+7S**2)
C-------= (N=8 TRANSFORMATION) - REF  FOR LINE COORDS
C-------= (N=8 TRANSFORMATION) - REF  FOR SAMP COORDS
C-------= MAGNITUDE OF DIFF  SQRT(8L**2+8S**2)
C-------= TABLE OF RADIAL DIST. VS. SRO MAG,RAD COMP,AZM COMP
C-------=                       AND UNC MAG,RAD COMP,AZM COMP
C-        rad dist = sqrt( (Y(1,i,1)-nl/2)**2 + (Y(2,i,1)-ns/2)**2 )
C-        mag sro  = sqrt( (Y(1,i,7)**2 + Y(2,i,7)**2 )
C-        mag unc  = sqrt( (Y(1,i,8)**2 + Y(2,i,8)**2 )
C
	REAL*4 Y(2,NPOINTS,8),DL(100),DS(100),MAG(100),CEN(2)
	INTEGER*4 PTR(900), PTR2(900), IP(900)
        CHARACTER*1 TAB
	REAL*4 DIS(900), MAGU(900), MAGS(900), DRS(900),DAS(900)
	REAL*4 DRU(900), DAU(900), ANGREF, ANGOBS, DIS2(900)
	CHARACTER*255 FILES(3),FILE
        CHARACTER*132 PBUF
C
 	 TAB = CHAR(9)
	 IREC = NCOL*13

	CALL XVPARM('SROFILES',FILES,ICNT,IDEF,0)

	IF (ICNT .EQ. 3) THEN
C--------MAKE SRO OUTPUT FILES 
	 FILE = FILES(1)
	 OPEN(70,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)
	 FILE = FILES(2)
	 OPEN(71,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)
	 FILE = FILES(3)
	 OPEN(72,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)

C-------CALC AND OUTPUT DELTAS AND MAGNITUDE FOR TRANSFORMATION 7
C-------Y(.,.,2) IS REFERENCE

	M = 0              !POINT COUNTER
	DO 11 N=1,NROW

	DO 10 I=1,NCOL
	M = M + 1
	DL(I) = Y(1,M,7) - Y(1,M,2)            !RESIDUAL IN L
	DS(I) = Y(2,M,7) - Y(2,M,2)            !RESIDUAL IN S
	MAG(I) = SQRT( DL(I)*DL(I) + DS(I)*DS(I) )        !MAGNITUDE
10	CONTINUE

	WRITE(70,1,ERR=991) (DL(J),TAB,J=1,NCOL)
	WRITE(71,1,ERR=991) (DS(J),TAB,J=1,NCOL)
11	WRITE(72,1,ERR=991) (MAG(J),TAB,J=1,NCOL)

	 CLOSE(70)
	 CLOSE(71)
	 CLOSE(72)
	END IF

C-----------------------------------------------------------------
	CALL XVPARM('UNCFILES',FILES,ICNT,IDEF,0)

	IF (ICNT .EQ. 3) THEN
C--------MAKE UNC OUTPUT FILES 

	 FILE = FILES(1)
	 OPEN(80,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)
	 FILE = FILES(2)
	 OPEN(81,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)
	 FILE = FILES(3)
	 OPEN(82,FILE=FILE,STATUS='UNKNOWN',
     1           RECL=IREC,IOSTAT=J,ERR=991)

C-------CALC AND OUTPUT DELTAS AND MAGNITUDE FOR TRANSFORMATION 8
C-------Y(.,.,2) IS REFERENCE

	M = 0                    !POINT COUNTER
	DO 21 N=1,NROW

	DO 20 I=1,NCOL
	M = M + 1
	DL(I) = Y(1,M,8) - Y(1,M,2)
	DS(I) = Y(2,M,8) - Y(2,M,2)
20	MAG(I) = SQRT( DL(I)*DL(I) + DS(I)*DS(I) )

	WRITE(80,1,ERR=991) (DL(J),TAB,J=1,NCOL)
	WRITE(81,1,ERR=991) (DS(J),TAB,J=1,NCOL)
21	WRITE(82,1,ERR=991) (MAG(J),TAB,J=1,NCOL)

	 CLOSE(80)
	 CLOSE(81)
	 CLOSE(82)
	END IF

C----------------------------------------------------------
	CALL XVPARM('RADIAL',FILE,ICNT,IDEF,0)
	IF (ICNT .NE. 1) RETURN
	CALL XVPARM('CENTER',CEN,ICNT,IDEF,0)
	IF (ICNT .NE. 2) THEN
	  CALL XVMESSAGE(
     +'CENTER PARAMETER REQUIRED FOR RADIAL TABLE',' ')
	  RETURN 1
	END IF

C-------MAKE TABLE OF RADIAL DISTANCES VS. SRO MAG AND UNC MAG 
	IREC = 61
	OPEN(90,FILE=FILE,STATUS='UNKNOWN',
     1          RECL=IREC,IOSTAT=J,ERR=991)

	DO 30 M=1,NPOINTS
	XL = Y(1,M,2) - CEN(1)           !REF LINE - LINE OF CENTER
	XS = Y(2,M,2) - CEN(2)           !REF SAMP - SAMP OF CENTER
	DIS(M) = SQRT( XL*XL + XS*XS )   !DISTANCE FROM CENTER TO REF
	XLS = Y(1,M,7) - Y(1,M,2)        !SRO LINE - REF LINE
	XSS = Y(2,M,7) - Y(2,M,2)        !SRO SAMP - REF SAMP
	MAGS(M) = SQRT( XLS*XLS + XSS*XSS )
	XLU = Y(1,M,8) - Y(1,M,2)        !UNC LINE - REF LINE
	XSU = Y(2,M,8) - Y(2,M,2)        !UNC SAMP - REF SAMP
	MAGU(M) = SQRT( XLU*XLU + XSU*XSU )

	IF (DIS(M) .GT. 0.0) THEN
	 ANGREF = ATAN2(XL,XS)               !ANGLE TO RAW LOC FROM CENT

C-------DO COODINATE XFORMATION TO RADIUS-AZIMUTH
	 IF (MAGS(M) .NE. 0.0) THEN
	  ANGOBS = ATAN2(XLS,XSS)                  !ANGLE OF RESIDUAL VECTOR
	  DRS(M) = MAGS(M)*COS(ANGREF-ANGOBS)      !COMPONENT ALONG RADIUS
	  DAS(M) = MAGS(M)*SIN(ANGREF-ANGOBS)      !COMPONENT ALONG AZIMUTH    
	 ELSE
	  DRS(M) = 0.0
	  DAS(M) = 0.0
	 END IF

C-------DO COODINATE XFORMATION TO RADIUS-AZIMUTH
	 IF (MAGU(M) .NE. 0.0) THEN
	  ANGOBS = ATAN2(XLU,XSU)                  !ANGLE OF RESIDUAL VECTOR
	  DRU(M) = MAGU(M)*COS(ANGREF-ANGOBS)      !COMPONENT ALONG RADIUS
	  DAU(M) = MAGU(M)*SIN(ANGREF-ANGOBS)      !COMPONENT ALONG AZIMUTH    
	 ELSE
	  DRU(M) = 0.0
	  DAU(M) = 0.0
	 END IF

	ELSE                             !DIS(M) = 0.0
	 DRS(M) = MAGS(M)                !IF PT AT CENTER, VECTOR IS RADIAL
	 DRU(M) = MAGU(M)
	 DAS(M) = 0.0
	 DAU(M) = 0.0
	END IF

30	CONTINUE

C-------SORT DIS, MAGS, MAGU, DRS, DAS, DRU, DAU BY INCREASING DIS
        DO I=1,NPOINTS
         PTR(I) = I
        ENDDO

        CALL MVE(7,NPOINTS,DIS,DIS2,1,1)
        CALL MVE(7,NPOINTS,PTR,PTR2,1,1)
        CALL SSORTP(DIS,1,NPOINTS,IP)
        DO K = 1,NPOINTS
           DIS(K) = DIS2(IP(K))
           PTR(K) = PTR2(IP(K))
        ENDDO

C-------WRITE OUT DIS,MAGS,DRS,DAS, MAGU,DRU,DAU - ONE RECORD FOR EACH POINT
C-------K WILL POINT TO THE NEXT SORTED ONE FOR MAGS AND MAGU
	DO 40 J=1,NPOINTS      
	K = PTR(J)
40	WRITE(90,4) DIS(J),TAB,MAGS(K),TAB,DRS(K),TAB,DAS(K),
     1              TAB,MAGU(K),TAB,DRU(K),TAB,DAU(K)

	RETURN

1	FORMAT(100(F12.4,A1))
4	FORMAT(F7.2,A1,F8.4,A1,F8.4,A1,F8.4,A1,F8.4,A1,F8.4,A1,F8.4)
991	CALL XVMESSAGE('ERROR OPENING OUTPUT FILE',' ')
	WRITE(PBUF,2) J
        CALL XVMESSAGE(PBUF,' ')
2	FORMAT(' IOSTAT=',I5)
	WRITE(PBUF,3) FILE
        CALL XVMESSAGE(PBUF,' ')
3	FORMAT(' FILE= ',A9)
	CALL ABEND
	END

      INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44

C     PROGRAM FFTPIC

C     TRANSFORM/COMPLEX PICTURE DISPLAY PROGRAM

c    20 sep 08     ...lwk...     fixed several bugs in the code
C     5 SEP 94     ...AS (CRI)...MSTP S/W CONVERSION (VICAR PORTING) 
C     1 FEB 85     ...LWK...     converted to Vicar2 
C     16 DEC 83    ...HBD...     FIX LABEL UPDATE FOR VAX COMPATIBLE
C				 RESTURUCTURED CODE.
C     12 OCT 78    ...JBS...     ACCOMODATE 77 LABEL
C   27 JUNE 1975   ...DAH...     CHANGES FOR CONVERSION TO 360/OS
C   11/24/71  ...TCR...  GENERAL OVERHAUL,COMPACT CODING, ERROR MESSAGES,
C                  SYMMETRIC PARAMETER PROCESSING, I/O OVERLAP, POSITIVE
C                  AND NEGATIVE HISTOGRAM PROCESSING, ADD THRESHOLD
C                  PARAMETER, INCREASE BUFFER SIZES, AND CHANGE
C                  DEFAULTS (NMIN AND NMAX)
C   11/1/71  ...TCR81...  FIX 'CALL  OPEN' ERROR

      IMPLICIT INTEGER*4 (A-U,W-Z)
      IMPLICIT REAL (V)
      COMMON /C1/ C(1200),CFACT(1200),VR(1202),VI(1202)
      COMPLEX C,CFACT,C0,CF
      INTEGER NAB(800),IOFFSW,QSWTCH(2),IFLG,MAXSW,MINSW
      INTEGER TAB(800),ISIGN
      INTEGER NMIN,NMAX,MODSW,LSW,RSW,IPIC,ISW
      REAL X0,Y0,SMIN,SMAX,THRESH
      REAL QRGT(601,2),QLFT(601,2),XY(2),FI,FR,PCT
      EQUIVALENCE (XY(1),X0), (XY(2),Y0)
      INTEGER*2 HPIC(1202)
      INTEGER NUMP,NUMN 
      CHARACTER*32 BUF1,BUF3(3)
      CHARACTER*64 MSG,MSG1
      CHARACTER*54 MSG2,LMINMG,LMAXMG
      CHARACTER*72 LPAR
      CHARACTER*3 LOG
      CHARACTER*6 LINEAR
      CHARACTER*9 AMPL,SINE,IMAG,INTE,ABSO
      CHARACTER*5 PHAS
      CHARACTER*4 COSIN,QPIC,AREAL,ASIGN
      EQUIVALENCE (VR,QRGT),(VI,QLFT)
      LOGICAL XVPTST

      CALL XVMESSAGE('*** Program FFTPIC version 12 Feb 2010 ***', ' ')

      IOFFSW=0
      IFLG=0
      MAXSW=0
      MINSW=0
      ISIGN=0
      NMIN=10
      NMAX=10
      MODSW=1
      LSW=1
      RSW=1
      IPIC=0
      ISW=1
      X0=0.0
      Y0=0.0
      SMIN=0.1
      SMAX=0.1
      THRESH=1.0

      CALL ZIA(NAB,800)
      CALL ZIA(TAB,800)
      NUMP=0
      NUMN=0
      QSWTCH(1)=1
      QSWTCH(2)=1
      LMINMG(1:51)=
     &    '*** ****** POINTS (***.*** 0/0) SATURATED BLACK = 0'
      LMAXMG(1:53)=
     &    '*** ****** POINTS (***.*** 0/0) SATURATED WHITE = 255'
      LOG(1:3)='LOG'
      LINEAR(1:6)='LINEAR'
      AMPL(1:9)='AMPLITUDE'
      PHAS(1:5)='PHASE'
      COSIN(1:4)='REAL'
      SINE(1:9)='IMAGINARY'
      QPIC(1:4)='CPIC'
      AREAL(1:4)='REAL'
      IMAG(1:9)='IMAGINARY'
      INTE(1:9)='INTENSITY'
      ASIGN(1:4)='SIGN'
      ABSO(1:8)='ABSOLUTE'

C     MODSW=0  FOR LOG DISPLAY
C     MODSW=1 FOR LINEAR DISPLAY
C
C     ISW/LSW/RSW = 1  AMPLITUDE
C                   2  PHASE (WITH OR WITHOUT SIGN)
C                   3  REAL OR COSINE
C                   4  IMAGINARY OR SINE
C                   5  INTENSITY

      CALL IFMESSAGE('FFTPIC version 5-SEP-94')
      CALL XVEACTION('SA',' ')

C  FIND REQUESTED MODE & DISP:
C  (DEFAULTS ARE TRANSFORM & AMPL)
      IF (XVPTST('CPIC')) IPIC=1

      IF (XVPTST('L_PHASE')) THEN
	LSW = 2
      ELSEIF (XVPTST('L_REAL') .OR. XVPTST('L_COSINE')) THEN
	LSW = 3
      ELSEIF (XVPTST('L_IMAG') .OR. XVPTST('L_SINE')) THEN
	LSW = 4
      ELSEIF (XVPTST('L_INTENS')) THEN
	LSW = 5
      ENDIF
      ISW = LSW

      CALL XVPARM( 'R_DISP', BUF1, I, DFLAG,0)
      IF (IPIC.EQ.1 .AND. DFLAG.EQ.0) THEN
	CALL XVMESSAGE
     &       ('*** CPIC MODE - MORE THAN 1 DISPLAY TYPE ILLEGAL',' ')
	CALL ABEND
      ENDIF

      IF (XVPTST('R_PHASE')) THEN
	RSW = 2
      ELSEIF (XVPTST('R_REAL') .OR. XVPTST('R_COSINE')) THEN
	RSW = 3
      ELSEIF (XVPTST('R_IMAG') .OR. XVPTST('R_SINE')) THEN
	RSW = 4
      ELSEIF (XVPTST('R_INTENS')) THEN
	RSW = 5
      ENDIF

      IF (XVPTST('LOG')) MODSW = 0		! 1 (LINEAR) IS DEFAULT

      CALL XVPARM( 'ORIGIN', XY, I, J,0)

      CALL XVPARM( 'NMIN', SMIN, I, J,0)
      CALL XVPARM( 'NMAX', SMAX, I, J,0)

      IF (XVPTST('SIGN')) ISIGN = 1		! 0 IS DEFAULT

      IF (THRESH.LT.0) THEN
	CALL XVMESSAGE('** REQUIRE THRESHOLD > 0.0 **',' ')
	CALL ABEND
      ELSEIF (THRESH.LT.1.0E-7) THEN
	THRESH = 1.0E-7
      ENDIF

C  OPEN INPUT & GET SIZE:

      CALL XVUNIT( IUN, 'INP', 1, ISTAT,' ')
      CALL XVOPEN( IUN, ISTAT,' ')
      CALL XVGET( IUN, ISTAT, 'NL', NLI, 'NS', NSAMPS,
     &            'PIX_SIZE', BPS,' ')
      NSI = NSAMPS*BPS
      NX=NSI/16+1
      IF(IPIC.NE.0)NX=NSI/8
      NXX=4*NX
      NNX=8*NX
      NY=NLI
      IF ((IPIC.EQ.0 .AND. NX.GT.601) .OR.
     &    (IPIC.NE.0 .AND. NX.GT.1200)) THEN
	CALL XVMESSAGE
     &       ('*** BUFFER LIMIT EXCEEDED - NSI .LE. 9600 BYTES',' ')
	CALL ABEND
      ENDIF

C  CHECK # OF SCRATCH FILES
      CALL XVPARM( 'OUT', BUF3, NDATS, I,0)
      IF (NDATS.EQ.1) THEN
	CALL XVPARM( 'INP', BUF3, NDATS, I,0)
	IF (NDATS.GT.1) THEN
	  CALL XVUNIT( SCR1, 'INP', 2, ISTAT,' ')
	  IF (NDATS.EQ.3) CALL XVUNIT( SCR2, 'INP', 3, ISTAT,' ')
	ENDIF
      ELSE
	CALL XVUNIT( SCR1, 'OUT', 2, ISTAT,' ')
	IF (NDATS.EQ.3) CALL XVUNIT( SCR2, 'OUT', 3, ISTAT,' ')
      ENDIF

      IF (IPIC.EQ.0 .AND. NDATS.LT.3) THEN
	CALL XVMESSAGE
     &      ('*** QUAD MODE - REQUIRE 2 SCRATCH DATA SETS',' ')
	CALL ABEND
      ENDIF
      IF (IPIC.NE.0 .AND. NDATS.LT.2) THEN
	CALL XVMESSAGE('*** CPIC MODE - REQUIRE A SCRATCH DATA SET',' ')
	CALL ABEND
      ENDIF

C     SET UP PHASE ORIGIN TRANSLATION BUFFER

      C0=CMPLX(1.0,0.0)
      V=6.283185*X0/FLOAT(NSI/8)
      CF=CMPLX(COS(V),-SIN(V))
      DO 100 I=1,NX
      CFACT(I)=C0
  100 C0=C0*CF
      V=6.283185*Y0/FLOAT(NY)
      CF=CMPLX(COS(V),SIN(V))
      C0=CMPLX(1.0,0.0)

C  OPEN FIRST IDS
      CALL XVOPEN( SCR1, ISTAT, 'OP', 'WRITE', 'O_FORMAT', 'REAL',
     . 'U_FORMAT', 'REAL', 'U_NL', NY, 'U_NS', NXX/4,' ')

      IF(IPIC.EQ.0) GO TO 500
C
C     CPIC - NO QUADRANT REARRANGEMENT - PROCESS TO 1 INTERMEDIATE
C            DATA SET
C
      DO I=1,NY
	CALL XVREAD( IUN, C, ISTAT,' ')
	IF (IOFFSW.NE.0 .AND. ISW.NE.1 .AND. ISW.NE.5) THEN
	  DO J=1,NX
	     C(J)=C0*CFACT(J)*C(J)
	  ENDDO
	  C0=C0*CF
	ENDIF
	CALL TVERT(NX,ISW,MODSW,ISIGN,THRESH,NUMP,NUMN,TAB,NAB,C,VR)
	CALL XVWRIT( SCR1, VR, ISTAT,' ')
      ENDDO
      CALL XVCLOSE( SCR1, ISTAT,' ')
C
C     GO DETERMINE VMAX AND VMIN
C
      GO TO 6000
C
C     QUADRANT REARRANGEMENT DISPLAY - PROCESS TO 2 INTERMEDIATE
C     DATA SETS
C
  500 CALL XVOPEN( SCR2, ISTAT, 'OP', 'WRITE', 'O_FORMAT', 'REAL',
     . 'U_FORMAT', 'REAL', 'U_NL', NY, 'U_NS', NXX/4,' ')

      DO I=1,NY
	CALL XVREAD( IUN, C, ISTAT,' ')

C RIGHT SIDE:
	IF (IOFFSW.NE.0 .AND. ((RSW.NE.1.AND.RSW.NE.5) .OR.
     &	 (LSW.NE.1.AND.LSW.NE.5))) THEN
	  DO J=1,NX
            C(J)=C0*CFACT(J)*C(J)
	  ENDDO
	  C0=C0*CF
	ENDIF
	CALL TVERT(NX,RSW,MODSW,ISIGN,THRESH,NUMP,NUMN,TAB,NAB,C,VR)
	CALL XVWRIT( SCR1, VR, ISTAT,' ')

C LEFT SIDE:
	IF (LSW.EQ.RSW .AND. LSW.NE.1 .AND. LSW.NE.3 .AND. LSW.NE.5) THEN
	  DO J=1,NX
            C(J)=CONJG(C(J))
	  ENDDO
	ENDIF
	CALL TVERT(NX,LSW,MODSW,ISIGN,THRESH,NUMP,NUMN,TAB,NAB,C,VI)
	CALL XVWRIT( SCR2, VI, ISTAT,' ')
      ENDDO

      CALL XVCLOSE( SCR1, ISTAT,' ')
      CALL XVCLOSE( SCR2, ISTAT,' ')
C
C     DETERMINE VMAX AND VMIN FROM TABULATIONS TAB AND NAB
C
 6000 CONTINUE
      VMAX=3.141593
      VMIN=0.0
      IF(ISIGN.EQ.1) VMIN=-3.141593
      VRMAX=VMAX
      VIMAX=VMAX
      VRMIN=VMIN
      VIMIN=VMIN
      FR=255.0/(VMAX-VMIN)
      FI=FR
      VMINP=VMIN
      VMAXP=VMAX
      VRMINP=VRMIN
      VIMINP=VIMIN
      VRMAXP=VRMAX
      VIMAXP=VIMAX
      IF(IPIC.EQ.0) GO TO 6001
      IF(ISW.EQ.2) GO TO 6019
      GO TO 6002
 6001 IF((LSW.EQ.2).AND.(RSW.EQ.2)) GO TO 6019
 6002 CONTINUE
      IF((NUMP.GT.0).OR.(NUMN.GT.0)) GO TO 6003
      CALL XVMESSAGE('*** NO DATA TABULATED',' ')
      CALL XVMESSAGE('*** NORMALIZATION IMPOSSIBLE',' ')
      CALL ABEND
 6003 CONTINUE
      NMIN=SMIN*FLOAT(NUMP+NUMN)/100.0
      NMAX=SMAX*FLOAT(NUMP+NUMN)/100.0
 6004 CONTINUE
C
C     COMPUTE VMIN
C
      IF(NUMN.LE.NMIN) GO TO 6007
C
C     VMIN NEGATIVE
C
      MINSW=1
      M1=0
      I=801
 6005 CONTINUE
      I=I-1
      M1=M1+NAB(I)
      IF(M1.LE.NMIN) GO TO 6005
 6006 VMIN=FLOAT(I-1)/50.0
      VPRT=THRESH*(10.0**VMIN)
      IF(MODSW.EQ.0) VPRT=ALOG10(VPRT)
      IF(MINSW.EQ.1) VPRT=-VPRT
      IF(MODSW.EQ.1) VMIN=10.0**VMIN
      IF(MINSW.EQ.1) VMIN=-VMIN
      GO TO 6009
C
C     VMIN POSITIVE
C
 6007 CONTINUE
      MINSW=0
      M1=NUMN
      I=0
 6008 CONTINUE
      I=I+1
      M1=M1+TAB(I)
      IF(M1.LE.NMIN) GO TO 6008
      GO TO 6006
C
C     COMPUTE VMAX
C
 6009 CONTINUE
      IF(NUMP.LE.NMAX) GO TO 6012
C
C     VMAX POSITIVE
C
      MAXSW=0
      M2=0
      J=801
 6010 CONTINUE
      J=J-1
      M2=M2+TAB(J)
      IF(M2.LE.NMAX) GO TO 6010
 6011 VMAX=FLOAT(J-1)/50.0
      VQRT=THRESH*(10.0**VMAX)
      IF(MODSW.EQ.0) VQRT=ALOG10(VQRT)
      IF(MAXSW.EQ.1) VQRT=-VQRT
      IF(MODSW.EQ.1) VMAX=10.0**VMAX
      IF(MAXSW.EQ.1) VMAX=-VMAX
      GO TO 6014
C
C     VMAX NEGATIVE
C
 6012 CONTINUE
      MAXSW=1
      M2=NUMP
      J=0
 6013 CONTINUE
      J=J+1
      M2=M2+NAB(J)
      IF(M2.LE.NMAX) GO TO 6013
      GO TO 6011
C
C     CHECK VMIN RELATIVE TO VMAX
C
 6014 CONTINUE
      IF(VMAX.GE.VMIN) GO TO 6015
      CALL XVMESSAGE('*** NORMALIZATION SEARCH ERROR',' ')
      CALL XVMESSAGE('*** SATURATION DECREASED BY FACTOR OF 2',' ')
      NMIN=NMIN/2
      NMAX=NMAX/2
      GO TO 6004
 6015 CONTINUE
      IF(VMAX.GT.VMIN) GO TO 6016
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE('*** NORMALIZATION MAX AND MIN EQUAL',' ')
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE('*** MAX ADJUSTED UPWARD',' ')
      IF(MAXSW.EQ.0) J=J+1
      IF(MAXSW.EQ.1) J=J-1
      IF(J.GT.0) GO TO 6011
      MAXSW=0
      J=1
      GO TO 6011
 6016 CONTINUE
      IF(IPIC.EQ.1) GO TO 6018
      IF(RSW.EQ.2) GO TO 6017
      VRMAX=VMAX
      VRMIN=VMIN
      FR=255.0/(VMAX-VMIN)
      VRMAXP=VQRT
      VRMINP=VPRT
 6017 CONTINUE
      IF(LSW.EQ.2) GO TO 6019
      VIMAX=VMAX
      VIMIN=VMIN
      FI=255.0/(VMAX-VMIN)
      VIMAXP=VQRT
      VIMINP=VPRT
      GO TO 6019
 6018 CONTINUE
      IF(ISW.EQ.2) GO TO 6019
      FR=255.0/(VMAX-VMIN)
      VMINP=VPRT
      VMAXP=VQRT
 6019 CONTINUE
      IF((NUMN+NUMP).LT.1) GO TO 6020
      WRITE(LMINMG(4:10),'(I7)')M1
      PCT=100.0*FLOAT(M1)/FLOAT(NUMN+NUMP)
      IF(PCT.LT.0.0) PCT=0.0
      IF(PCT.GT.100.0) PCT=100.0
      WRITE(LMINMG(20:26),'(F7.3)')PCT
      WRITE(LMAXMG(4:10),'(I7)')M2
      PCT=100.0*FLOAT(M2)/FLOAT(NUMN+NUMP)
      IF(PCT.LT.0.0) PCT=0.0
      IF(PCT.GT.100.0) PCT=100.0
      WRITE(LMAXMG(20:26),'(F7.3)')PCT
 6020 CONTINUE
C
C     PRINT OUT LINEAR SCALING PARAMETERS FOR OUTPUT
C
      IF(IPIC.EQ.1) GO TO 503
      IF(((NUMN+NUMP).LT.1).OR.((LSW.EQ.2).AND.(RSW.EQ.2))) GO TO 501
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(LMINMG,' ')
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(LMAXMG,' ')
  501 CONTINUE
      WRITE(MSG,9900)VRMAXP,VRMINP
9900  FORMAT('*** RIGHTSIDE NORMALIZATION MAXIMUM=',F9.2,'  MINIMUM=',
     &       F9.2)
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(MSG,' ')
      WRITE(MSG1,9910)VIMAXP,VIMINP
9910  FORMAT('*** LEFTSIDE NORMALIZATION MAXIMUM=',F9.2,'  MINIMUM=',
     &       F9.2)
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(MSG1,' ')
      GO TO 504
  503 CONTINUE
      IF(((NUMN+NUMP).LT.1).OR.(ISW.EQ.2)) GO TO 502
      CALL XVMESSAGE(LMINMG,' ')
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(LMAXMG,' ')
  502 CONTINUE
      WRITE(MSG2,9920)VMAXP,VMINP
9920  FORMAT('*** NORMALIZATION MAXIMUM=',F9.2,'  MINIMUM=',F9.2)
      CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE(MSG2,' ')
  504 CONTINUE
C
C  OPEN OUTPUT FILE 
C
    6 NNX = NX
      NLINS = NY
      NSMPS = NNX
      IF (IPIC.EQ.0) THEN
	NNX = 2*NX
	NSMPS = NNX
	IF (RSW.EQ.LSW) NSMPS = NNX-1
	NY=NY/2+1
	NLINS = 2*NY-2
      ENDIF
      CALL XVUNIT( OUN, 'OUT', 1, ISTAT,' ')
      CALL XVOPEN( OUN, ISTAT, 'OP', 'WRITE', 'O_FORMAT', 'BYTE',
     . 'U_FORMAT', 'HALF', 'U_NL', NLINS, 'U_NS', NSMPS,' ')

C  CONSTRUCT THE NEW HISTORY LABEL:
      J = 0
      LPAR=' '
      IF (ISW.EQ.2) MODSW=1
      IF ((LSW.EQ.2).AND.(RSW.EQ.2)) MODSW=1
      IF (MODSW.EQ.1) GO TO 713
      LPAR(1:3)=LOG
      J=J+5
      IF((LSW.EQ.2).OR.(RSW.EQ.2))GO TO 738
      GO TO 735
  713 LPAR((J+1):(J+6))=LINEAR
      J=J+8
      IF((ISW.NE.2).OR.((RSW.NE.2).AND.(LSW.NE.2))) GO TO 735
  738 IF(ISIGN.NE.1) GO TO 715
      LPAR((J+1):(J+4))=ASIGN
      J=J+6
      GO TO 735
  715 LPAR((J+1):(J+8))=ABSO
      J=J+10
  735 IF(IPIC.NE.0)GO TO 730
      I=LSW
      IFLG=0
  716 GO TO (717,719,721,723,727),I
  727 LPAR((J+1):(J+9))=INTE
      J=J+10
      GO TO 725
  717 LPAR((J+1):(J+9))=AMPL
      J=J+10
      GO TO 725
  719 LPAR((J+1):(J+5))=PHAS
      J=J+6
      GO TO 725
  721 CONTINUE
      LPAR((J+1):(J+4))=COSIN
      J=J+5
      GO TO 725
  723 CONTINUE
      LPAR((J+1):(J+9))=SINE
      J=J+10
  725 IF(IFLG.EQ.1) GO TO 726
      IFLG=1
      LPAR(J:J)='/'
      I=RSW
      GO TO 716
  730 IFLG=1
      LPAR((J+1):(J+4))=QPIC
      J=J+6
      GO TO (717,719,731,733,727),ISW
  731 LPAR((J+1):(J+4))=AREAL
      J=J+5
      GO TO 726
  733 LPAR((J+1):(J+9))=IMAG
      J=J+10
  726 CONTINUE
      J = MIN0( J, 72)
      CALL XLADD( OUN, 'HISTORY', 'PGM_LAB', LPAR, ISTAT, 'ULEN', J,
     . 'FORMAT', 'STRING',' ')

      CALL XVOPEN( SCR1, ISTAT, 'OP', 'READ', ' ')

      IF(IPIC.EQ.0) GO TO 740
C  CPIC MODE OUTPUT - NO QUADRANT REARRANGEMENT

      DO I=1,NY
	CALL XVREAD( SCR1, VR, ISTAT,' ')
	DO J=1,NX
	   M=FR*(VR(J)-VMIN)+0.5
	   IF(M.LT.0)M=0
	   IF(M.GT.255)M=255
	   HPIC(J)=M
	ENDDO
	CALL XVWRIT( OUN, HPIC, ISTAT,' ')
      ENDDO
      GO TO 800

C  QUAD MODE OUTPUT - QUADRANT REARRANGEMENT

  740 CALL XVOPEN( SCR2, ISTAT, 'OP', 'READ', ' ')	! NEED IDS 2

      IR0 = NY+1
      L0 = NY-1
      M1 = NX-1
      M2 = NX+1
      ISW = 1
      IF (RSW.NE.LSW) THEN
	M1 = NX
	L0 = IR0
      ENDIF

   10 KSW=1
      CALL XVREAD( SCR1, QRGT(1,KSW), ISTAT, 'LINE', IR0-1,' ')
      IF (RSW.EQ.LSW) THEN
	CALL XVREAD( SCR2, QLFT(1,KSW), ISTAT, 'LINE', L0+1,' ')
      ELSE
	CALL XVREAD( SCR2, QLFT(1,KSW), ISTAT, 'LINE', L0-1,' ')
      ENDIF

      DO I=1,NY
	MSW=KSW
	KSW=3-KSW
	K=I+1
	IF (K.LE.NY)
     .	 CALL XVREAD( SCR1, QRGT(1,KSW), ISTAT, 'LINE', IR0-K,' ')
	DO J=1,NX
	  M=FR*(QRGT(J,MSW)-VRMIN)+0.5
	  IF(M.LT.0) M=0
	  IF(M.GT.255) M=255
	  HPIC(M1+J)=M
	ENDDO
	IF (K.LE.NY) THEN
	  IF (LSW.NE.RSW) THEN
	    CALL XVREAD( SCR2, QLFT(1,KSW), ISTAT, 'LINE', L0-K,' ')
	  ELSEIF (ISW.EQ.1 .AND. K.EQ.NY) THEN
	    CALL XVREAD( SCR2, QLFT(1,KSW), ISTAT, 'LINE', 1,' ')
	  ELSE
	    CALL XVREAD( SCR2, QLFT(1,KSW), ISTAT, 'LINE', L0+K,' ')
	  ENDIF
	ENDIF
	DO J=1,NX
	  M=FI*(QLFT(J,MSW)-VIMIN)+0.5
	  IF(M.LT.0) M=0
	  IF(M.GT.255) M=255
	  HPIC(M2-J)=M
	ENDDO
	CALL XVWRIT( OUN, HPIC, ISTAT,' ')
      ENDDO

      IF(ISW.NE.2) THEN
         ISW=2
         NY=NY-2
         IR0=2*NY+3
         L0=IR0
         IF(RSW.EQ.LSW) L0=1
         GO TO 10
      ENDIF

  800 CALL XVMESSAGE(' ',' ')
      CALL XVMESSAGE('*** FFTPIC TASK COMPLETED',' ')
      RETURN
      END

C********************************************************
      SUBROUTINE TVERT(NX,ISW,MODSW,ISIGN,THRESH,NUMP,NUMN,TAB,NAB,C,
     &OUT)
C  PROGRAM TO CONVERT COMPLEX DATA FOR DISPLAY
      COMPLEX C(1)
      INTEGER TAB(1),NAB(1)
      REAL OUT(1)
C
C     ISW = 1   AMPLITUDE
C           2   PHASE
C           3   REAL/COSINE
C           4   IMAGINARY/SINE
C           5   INTENSITY
C
C
C     MODSW = 0   LOG DISPLAY
C             1   LINEAR DISPLAY
C
C
      JSW=MODSW+1
      FACT=1.0/THRESH
      GO TO (1,6,8,14,20),ISW
C
C     AMPLITUDE CONVERSION
C
    1 CONTINUE
      DO 5 I=1,NX
         X=FACT*CABS(C(I))
         IF(X.LT.1.0) X=1.0
         Y=ALOG10(X)
         M=50.0*Y+1.5
         IF(M.LT.1) M=1
         IF(M.GT.800) M=800
         IF (JSW .EQ. 2) THEN
	    OUT(I) = X			! LINEAR
	 ELSE
            OUT(I)=Y			! LOG
	 ENDIF
         TAB(M)=TAB(M)+1
    5 CONTINUE
      NUMP=NUMP+NX
      RETURN
C
C     PHASE CONVERSION  (ALWAYS LINEAR)
C
    6 CONTINUE
      DO 7 I=1,NX
         X=REAL(C(I))
         Y=AIMAG(C(I))
         IF(X.EQ.0.0) THEN
            IF(Y.EQ.0.0) THEN
               X=0.0
            ELSE
               X=SIGN(1.570796,Y)
            ENDIF
         ELSE
            X=ATAN2(Y,X)
         ENDIF
         IF(ISIGN.EQ.0) X=ABS(X)
         OUT(I)=X
    7 CONTINUE
      RETURN
C
C     REAL/COSINE DISPLAY
C
    8 CONTINUE
      DO 13 I=1,NX
         X=FACT*REAL(C(I))
         IF(ABS(X).LT.1.0) X=SIGN(1.0,X)
         Y=ALOG10(ABS(X))
         M=50.0*Y+1.5
         IF(M.LT.1) M=1
         IF(M.GT.800) M=800
         IF (JSW .EQ. 2) THEN
	    OUT(I) = X			!LINEAR
	 ELSE
            OUT(I)=SIGN(Y,X)		!LOG
         ENDIF
         IF(X.LT.0.0) THEN
            NAB(M)=NAB(M)+1
            NUMN=NUMN+1
	 ELSE
            TAB(M)=TAB(M)+1
            NUMP=NUMP+1
	 ENDIF
   13 CONTINUE
      RETURN
C
C     IMAGINARY/SINE DISPLAY
C
   14 CONTINUE
      DO 19 I=1,NX
         X=FACT*AIMAG(C(I))
         IF(ABS(X).LT.1.0) X=SIGN(1.0,X)
         Y=ALOG10(ABS(X))
         M=50.0*Y+1.5
         IF(M.LT.1) M=1
         IF(M.GT.800) M=800
         IF (JSW .EQ. 2) THEN
            OUT(I) = X				! LINEAR
         ELSE
            OUT(I)=SIGN(Y,X)			! LOG
     	 ENDIF
         IF(X.LT.0.0) THEN
            NAB(M)=NAB(M)+1
            NUMN=NUMN+1
	 ELSE
            TAB(M)=TAB(M)+1
            NUMP=NUMP+1
         ENDIF
   19 CONTINUE
      RETURN
C
C     INTENSITY
C
   20 CONTINUE
      DO 24 I=1,NX
         X=REAL(C(I))
         Y=AIMAG(C(I))
         X=FACT*(X*X+Y*Y)
         IF(X.LT.1.0) X=1.0
         Y=ALOG10(X)
         M=50.0*Y+1.5
         IF(M.LT.1) M=1
         IF(M.GT.800) M=800
         IF (JSW .EQ. 2) THEN
	    OUT(I) = X				!LINEAR
	 ELSE
	    OUT(I) = Y				!LOG
	 ENDIF
         TAB(M)=TAB(M)+1
   24 CONTINUE
      NUMP=NUMP+NX
      RETURN
      END

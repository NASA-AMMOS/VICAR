process help=*
PARM INP TYPE=STRING
PARM OUT TYPE=STRING
PARM SIZE TYPE=INTEGER COUNT=4 DEFAULT=(1,1,0,0)
PARM SUTOL TYPE=INTEGER DEFAULT=20
PARM SLTOL TYPE=INTEGER DEFAULT=20
PARM CUTOL TYPE=INTEGER DEFAULT=20
PARM CLTOL TYPE=INTEGER DEFAULT=20
PARM DSUTOL TYPE=INTEGER DEFAULT=20
PARM DSLTOL TYPE=INTEGER DEFAULT=20
PARM DCUTOL TYPE=INTEGER DEFAULT=20
PARM DCLTOL TYPE=INTEGER DEFAULT=20
PARM TOL TYPE=INTEGER DEFAULT=20
PARM DN TYPE=INTEGER DEFAULT=-1
PARM BITS TYPE=INTEGER DEFAULT=-1 VALID=(-1:16)
PARM PRINTTOL TYPE=KEYWORD VALID=(PRINT,NOPRINT) COUNT=0:1 DEFAULT=NOPRINT
END-PROC
!# ANNOT ICON = adespike
.TITLE
VICAR2 Program ADESPIKE
.HELP
PURPOSE:

ADESPIKE will detect and remove single-pixel errors (spikes).  A pixel
is determined to be in error if it differs from its adjacent neighbors
by more than certain specifiable thresholds.  Pixel errors are replaced
by the average of adjacent pixels.

ADESPIKE was originally developed to remove random telemetry transmission
errors (bit-errors) from flight images.  However, the algorithm is
completely general and can be applied to any image containing random noise
affecting individual pixels.  Independent tests are applied in the horizontal
and vertical directions.  Consequently, ADESPIKE can also detect and remove
lines or columns one pixel in width which deviate significantly from
neighboring lines or columns (e.g. line drop-outs).

.page
EXECUTION:

         ADESPIKE  INP  OUT  user-parameters...
where
    INP is the input image (byte or halfword).
    OUT is the output image.
The input image may be of arbitrary size.  The output image will be the
same data format as the input.

.page
OPERATION:
  Let x0 be the DN value of a given pixel, and let x1, x2, x3, and x4 be
the DN values of its neighbors:

                          x3
                       x1 x0 x2
                          x4

A horizontal test is first applied by comparing x0 with x1 and x2.  If x0
fails this test, it is replaced by the average of x1 and x2 and processing
continues (however, see BITS and DN parameters below).  Otherwise a vertical
test is applied by comparing x0 with x3 and x4.  If x0 fails this test, it
is replaced by the average of x3 and x4 and processing continues.  Otherwise
x0 is accepted as a valid pixel.

The horizontal test is as follows:  Let avg=(x1+x2)/2.  Then x0 is in error
if:
                 x0 < A     or   B < x0
where
       A = min(avg-SLTOL, x1-DSLTOL, x2-DSLTOL)
       B = max(avg+SUTOL, x1+DSUTOL, x2+DSUTOL)
The thresholds SLTOL, SUTOL, DSLTOL, and DSUTOL are specifiable parameters.

The vertical test is as follows:  Let avg=(x3+x4)/2.  Then x0 is in error
if:
                 x0 < C     or   D < x0
where
       C = min(avg-CLTOL, x3-DCLTOL, x4-DCLTOL)
       D = max(avg+CUTOL, x3+DCUTOL, x4+DCUTOL)
The thresholds CLTOL, CUTOL, DCLTOL, and DCUTOL are specifiable parameters.

ADESPIKE processes the pixels in the same order as they are stored in the
input file.  I.e., the image lines are processed in ascending order, and
the pixels for a given line are processed in ascending sample order.  Note
that when a pixel is corrected, the corrected value is used when testing
and replacing adjacent pixels (to the immediate right and below).

The pixel replacement value may be modified via the BITS or DN parameters.
Specifying BITS=n (where n is a positive integer) specifies that only the
n most-significant-bits of error-pixels are to be replaced.  For example,
BITS=3 specifies that the 3 most-significant-bits of x0 are to
be replaced, while the 5 least-significant-bits (assuming byte data)
remain unchanged.  If BITS=0 is specified, then the appropriate number
of bits to replace is automatically determined from the specified
thresholds.  The default (BITS=-1) is to replace all bits.

Specifying DN=m causes all error-pixels to be replaced by m.

.page
BINARY LABEL SUPPORT

References:  1) "Tracking GLL SSI Bad-Data Values, Binary Label Design"
  G. Yagi, MSD:384-89-152, May 22, 1989.
             2) "Tracking GLL SSI Bad-Data Values, Software Requirements"
  G. Yagi, MSD:384-89-157, June 30, 1989.

If the input image contains binary labels (Ref. 1), then ADESPIKE will copy
the binary labels to the output file and add information regarding all spikes
that it has identified and removed. If the binary labels contain information
regarding data drop-outs, ADESPIKE will use this information to avoid using
data drop-outs in the detection and interpolation process.

.page
TIMING:

The following times were measured for an 800x800 byte image:
    5.8 CPU sec on 8650
    32.5 CPU sec on 780

WRITTEN BY: P. L. Jepsen	12 March 74
CONVERTED TO VAX BY: L. W. Kamp,  12 April 1983
COGNIZANT PROGRAMMER: Gary Yagi
REVISIONS:
 21 JUL 95  A. Scop      (CRI) As per FR87387 misspelled variable INU
                         corrected to IUN in XVTRANS call.
 16 MAR 95  A. Scop      (CRI) updated tst pdf as per FR85748.  Tst pdf
                         presently can't run on ANDES because galsos not
                         ported to ANDES because sybase is not present.
  1 JUL 94  M. Cox       (CRI) Made portable for UNIX
  6 APR 93  H. Mortensen Initialize LASTPIX buffer with nso and not 0.
                         Added printing of tolerance values. Zeroed out
                         bdv_rec after each XVWRIT. Added call to DUMP_BDV
          	         from the subroutine AUTSAR and fixed branching to 
                         to the subroutine DUMP_BDV call in the subroutine 
                         HUTSAR.
 21 Aug 91  W.P. Lee     Modified Test PDF for REDR processing 
 28 Mar 91  W.P. Lee     Enabled ADESPIKE to work on BYTE image with BINARY
                         Labels retained and updated 
 15 Oct 90  L.W.Kamp     Fixed bug in end-of-line test in AUTSAR;  removed
			 U_FORMAT=HALF for binary labels & added byte buffer
			 to WORKB.
 30 Aug 89  A. Runkle	 Read, copy and generate binary label information.
			 Ignore data drop-outs when enumerated in binary label.
 15 Feb 89  G. Yagi	 Major revisions to help file.
			 Fixed minor bug in BITS parameter.
			 Fixed processing of second line.
 31 May 85  L. Kamp	 Conversion to Vicar2; added STACKA
  7 MAY 85  B. Barkan	 ASSEMBLERIZED PART OF CODE
 10 JAN 84  C. Avis	 BUG FIXED FOR FR
 12 APR 83  L. Kamp	 CONVERT TO VAX: REMOVE BAL CODE (USE UCL AUTSAR)
		         MOVE PARAM CALL BEFORE OPEN CALL
		         READ BYTE DATA AS HALFWORD
 12 MAR 80  G. Yagi      REWRITE TO SPEED UP EXECUTION
 27 JUN 75  DAH		 CHANGES FOR CONVERSION TO 360/OS
 16 MAR 74               MVM73 MODIFICATIONS
 12 MAR 74   ...VIKING LANDER VERSION...   INITIAL RELEASE
.LEVEL1
.VARI INP
Input filename.
.VARIABLE OUT
Output filename.
.VARI SIZE
Image size field.
.VARI SUTOL
Hor. upper dev. from mean
.VARI SLTOL
Hor. lower dev. from mean
.VARI CUTOL
Vert. upper dev. from mean
.VARI CLTOL
Vert. lower dev. from mean
.VARI DSUTOL
Upper deviation from left or
right adjacent pixels.
.VARI DSLTOL
Lower deviation from left or
right adjacent pixels.
.VARI DCUTOL
Upper deviation from top or
bottom adjacent pixel.
.VARI DCLTOL
Lower deviation from top or
bottom adjacent pixel.
.VARI TOL
Ex: TOL=n
Set all thresholds to n.
.VARI DN
Replacement DN
.VARI BITS
# of bits replaced
.VARI PRINTTOL
Prints tolerance values.
For debugging purposes.
.LEVEL2
.VARI INP
Ex:	INP=A
where A is the input image (byte or halfword) in standard VICAR format
and of arbitrary size.
.VARIABLE OUT
Ex:	OUT=B
where B is the output image.  The output image will be the same data format
and size as the input image.
.VARI SIZE
	SIZE=(sl,ss,nl,ns).
is the standard VICAR2 image size field, specifying the area of the input
on which processing is to be applied (starting-line, starting-sample,
number-of-lines, number-of-samples).  The output image size will be nlxns.
If defaulted, the entire input image is processed.
.VARI SUTOL
Horizontal upper deviation from mean (default=20).  Parameters SUTOL,
SLTOL, DSUTOL, and DSLTOL are thresholds applied to the horizontal pixel test:
Let x0 be the pixel to be tested, and let x1 and x2 be its left and right
adjacent neighbors.  Let avg=(x1+x2)/2.  Then x0 is in error if:
                 x0 < A     or   B < x0
where
       A = min(avg-SLTOL, x1-DSLTOL, x2-DSLTOL)
       B = max(avg+SUTOL, x1+DSUTOL, x2+DSUTOL)
.VARI SLTOL
Horizontal lower deviation from mean (default=20).  See SUTOL for details.
.VARI DSUTOL
Horizontal upper deviation from neighbor (default=20).  See SUTOL for details.
.VARI DSLTOL
Horizontal lower deviation from neighbor (default=20).  See SUTOL for details.
.VARI CUTOL
Vertical upper deviation from mean (default=20).  Parameters CUTOL
CLTOL, DCUTOL, and DCLTOL are thresholds applied to the vertical pixel test:
Let x0 be the pixel to be tested, and let x3 and x4 be its upper and lower
adjacent neighbors.  Let avg=(x3+x4)/2.  Then x0 is in error if:
                 x0 < C     or   D < x0
where
       C = min(avg-CLTOL, x3-DCLTOL, x4-DCLTOL)
       D = max(avg+CUTOL, x3+DCUTOL, x4+DCUTOL)
The thresholds CLTOL, CUTOL, DCLTOL, and DCUTOL are specifiable parameters.
.VARI CLTOL
Vertical lower deviation from mean (default=20).  See CUTOL for details.
.VARI DCUTOL
Vertical upper deviation from neighbor (default=20).  See CUTOL for details.
.VARI DCLTOL
Vertical lower deviation from neighbor (default=20).  See CUTOL for details.
.VARI TOL
All eight thresholds (SUTOL,...,DCLTOL) are set to this value.
.VARI DN
Ex:	DN=n
Specifies the DN value for replacement pixels.  All pixel errors are
replaced by n (rather then the average of adjacent pixels).
A negative value is ignored (default of -1), i.e. the average of adjacent
pixels is used to replace pixel errors.
.VARI BITS
This parameter determines number of bits to replace in spikes. 
The valid range is -1 to 16 (values from 9-16 are meaningful
only for HALF format, and are ignored for BYTE).

Let x0 be the erroneous pixel, and let avg=(x1+x2)/2 where x1 and x2 are
its adjacent neighbors.  If BITS>0, then the BITS most significant bits
(MSB) of pixel x0 are replaced with the BITS MSBs of avg and the remaining
LSBs of x0 are not changed.

If BITS=0, then the number of MSBs to be changed when a pixel spike is
detected is determined by the mean deviation allowed.

If BITS=-1, then the entire pixel DN is changed.  (This is equivalent
to BITS=8 for BYTE data.)

For example (using byte data):
If BITS=3, the 3 MSBs of x0 are replaced with the 3 MSBs of avg.
If BITS=0, then:
  If the default tolerances are used (20 DN), then the 4 MSBs will be
  replaced, because 2**4-1 < 20 < 2**5-1.
  If all tolerances are 40 DN, then the 3 MSBs will be replaced, because
  2**5-1 < 40 < 2**6-1.
.VARI PRINTTOL
Prints all 8 tolerance thresholds.  For debugging purposes.  Default is NOPRINT.
.end

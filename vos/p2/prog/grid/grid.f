      INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44
      IMPLICIT NONE
C
c     10 Jan 2013 -lwk- fixed continued error msgs for new compiler flag on Solaris
C     26 FEB 01     BUG FIX                     BY REA
C     13 JUL 94     FIX: INITIALIZE TOP         BY CRS (CRI)
C     25 AUG 86     FIX HELP FILE (FR 16800)    BY FFM
C     16 AUG 85     MODIFY HELP AND BUFFER SIZE
C     08 MAR 85     CONVERSION TO VICAR2   	BY MXM
C     13 JUN 72     REVISED			BY A.A. SCHWARTZ
C     27 MAR 69     INITIAL RELEASE	 	BY E.F. DOBIES
C

      COMMON  /C1/  INUNIT,OUTUNIT,SL,SS,NL,NS,
     &		    IMGNL,IMGNS,REP,MUL,ADD,LIM,MODE,
     &		    BLI,LFS,SFS,LFL,SFL,
     &              TOP,RMUL
      INTEGER*4     INUNIT,OUTUNIT,STATUS
      INTEGER*4     SL,SS,NL,NS,IMGNL,IMGNS,PIX_SIZ
      INTEGER*4     REP,MUL,ADD,LIM,MODE,TOP
      INTEGER*4     BLI,LFS,SFS,LFL,SFL
      REAL*4        RMUL
C
C     DISPLAY PROGRAM NAME
C
      CALL IFMESSAGE('GRID version 10-Jan-2013')
 
C
C     OPEN INPUT FILE
C
      CALL XVUNIT(INUNIT,'INP',1,STATUS,' ')
      CALL XVOPEN(INUNIT,STATUS,'U_FORMAT','HALF','OPEN_ACT','SA',' ')
      CALL XVGET(INUNIT,STATUS,'PIX_SIZE',PIX_SIZ,' ')
      IF (PIX_SIZ.NE.1) THEN
	 CALL XVMESSAGE('Image must be in byte format.',' ')
	 CALL ABEND
      ENDIF

      CALL PARAMS

C
C     OPEN OUTPUT FILE
C
      CALL XVUNIT(OUTUNIT,'OUT',1,STATUS,' ')
      CALL XVOPEN(OUTUNIT,STATUS,'OPEN_ACT','SA','OP','WRITE',
     $		  'U_FORMAT','HALF','U_NL',NL,'U_NS',NS,' ')
      CALL GRID
C
C     CLOSE FILES
C
      CALL XVCLOSE(INUNIT,STATUS,' ')
      CALL XVCLOSE(OUTUNIT,STATUS,' ')
      RETURN
      END



      SUBROUTINE  PARAMS
      IMPLICIT NONE
      COMMON  /C1/  INUNIT,OUTUNIT,SL,SS,NL,NS,
     &		    IMGNL,IMGNS,REP,MUL,ADD,LIM,MODE,
     &		    BLI,LFS,SFS,LFL,SFL,
     &              TOP,RMUL
      INTEGER*4     INUNIT,OUTUNIT
      INTEGER*4     SL,SS,NL,NS,IMGNL,IMGNS
      INTEGER*4     ADD,REP,MUL,LIM,MODE
      INTEGER*4     BLI,LFS,SFS,LFL,SFL
      INTEGER*4     INT(4),GEO(5)
      INTEGER*4     ICOUNT,IDEF,MULDEF
      INTEGER*4     NLMAX,NSMAX,TOP
      REAL*4        RMUL
C
C     DEFINE SIZE PARAMETERS
C
      CALL XVSIZE(SL,SS,NL,NS,IMGNL,IMGNS)
      IF (NS.GT.20000) THEN
   	 CALL XVMESSAGE('MAXIMUM NUMBER OF SAMPLES IS 20000.',' ')
	 CALL ABEND
      ENDIF
C
C     CHECK RANGES FOR LINES AND SAMPLES
C
      IF (SL.LE.IMGNL)  GO TO 10
         CALL XVMESSAGE('SL greater than image NL',' ') 
         CALL ABEND
   10 IF (SS.LE.IMGNS)  GO TO 20
         CALL XVMESSAGE('SS greater than image NS',' ')
         CALL ABEND
   20 NLMAX=SL+NL-1
      IF (NLMAX.LE.IMGNL) GO TO 30
         CALL XVMESSAGE('NL too large',' ')
         CALL ABEND
   30 NSMAX=SS+NS-1
      IF (NSMAX.LE.IMGNS) GO TO 40
         CALL XVMESSAGE('NS too large',' ')
         CALL ABEND
C
C     DEFINE INTENSITY PARAMETERS
C
   40 CALL XVPARM('INT',INT,ICOUNT,IDEF,4)
      REP = INT(1)
      MUL = INT(2)
      ADD = INT(3)
      LIM = INT(4)
      CALL XVPARM('REP',INT(1),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) REP=INT(1)
      CALL XVPARM('MUL',INT(2),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) MUL=INT(2)
      CALL XVPARM('ADD',INT(3),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) ADD=INT(3)
      CALL XVPARM('LIM',INT(4),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) LIM=INT(4)
C
C     PARAMETER CONSISTENCY CHECK
C
      MULDEF=0
      IF (REP.NE.0) MULDEF=MULDEF+1
      IF (MUL.NE.0) MULDEF=MULDEF+1
      IF (ADD.NE.0) MULDEF=MULDEF+1
      IF (MULDEF.LE.1) GO TO 50
         CALL XVMESSAGE('REPLACE, MULTIPLY, and ADD may not be used together.',' ')
         CALL ABEND
   50 IF (MULDEF.EQ.0) THEN
 	 MODE=1
	 REP=255
      ENDIF
      IF (REP.NE.0) THEN
         MODE=1
         IF ((REP.LT.1).OR.(REP.GT.255)) THEN
	    CALL XVMESSAGE('REPLACE value must be a legal DN value.',' ')
	    CALL ABEND
	 ENDIF
      ELSE IF (MUL.NE.0) THEN
         MODE=2
      ELSE IF (ADD.NE.0) THEN
	 MODE=3
      ENDIF
      IF (MODE.EQ.2) GO TO 60
         IF (LIM.EQ.0) GO TO 60
            CALL XVMESSAGE('LIMIT may be used only with MULTIPLY option. ',' ')
  	    CALL ABEND
   60 IF ((LIM.EQ.0).AND.(MODE.EQ.2)) LIM=64
C
C     DEFINE GEOMETRIC PARAMETERS
C
      CALL XVPARM('GEO',GEO,ICOUNT,IDEF,5)
      BLI = GEO(1)
      LFS = GEO(2)
      SFS = GEO(3)
      LFL = GEO(4)
      SFL = GEO(5)
      CALL XVPARM('BLI',GEO(1),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) BLI = GEO(1)
      CALL XVPARM('LFS',GEO(2),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) LFS = GEO(2)
      CALL XVPARM('SFS',GEO(3),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) SFS = GEO(3)
      CALL XVPARM('LFL',GEO(4),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) LFL = GEO(4)
      CALL XVPARM('SFL',GEO(5),ICOUNT,IDEF,1)
      IF (IDEF.EQ.0) SFL = GEO(5)
      IF (BLI.EQ.0)  BLI=100
      IF (BLI.LT.NL) GO TO 70
         CALL XVMESSAGE('BLI must be less than NL.',' ')
         CALL ABEND
   70 IF (LFS.EQ.0)  LFS=BLI
      IF (SFS.EQ.0)  SFS=LFS
      RETURN
      END



      SUBROUTINE  GRID
      IMPLICIT NONE
      COMMON  /C1/  INUNIT,OUTUNIT,SL,SS,NL,NS,
     &		    IMGNL,IMGNS,REP,MUL,ADD,LIM,MODE,
     &		    BLI,LFS,SFS,LFL,SFL,
     &              TOP,RMUL
      INTEGER*2     INBUF(20000),OUTBUF(20000)
      INTEGER*4     INUNIT,OUTUNIT,STATUS
      INTEGER*4     SL,SS,NL,NS,IMGNL,IMGNS
      INTEGER*4     REP,MUL,ADD,LIM,MODE
      INTEGER*4     BLI,LFS,SFS,LFL,SFL
      INTEGER*4     I,J,K,L,M,N1,N2,N3,N4,N5
      INTEGER*4     BMOD,LMOD,SMOD,TOP
      REAL*4        RMUL

      N1=BLI-LFL
      N2=BLI-SFL
      N3=BLI-1
      N4=2*LFL
      N5=2*SFL
      RMUL=FLOAT(MUL)/100.0
      TOP=255-LIM
      DO I=1,NL
          CALL XVREAD (INUNIT,INBUF,STATUS,'LINE',I+SL-1,'SAMP',SS,
     &		       'NSAMPS',NS,' ')
	  CALL MVE(2,NS,INBUF,OUTBUF,1,1)
          BMOD=MOD(I,BLI)
          LMOD=MOD(I,LFS)
          SMOD=MOD(I,SFS)
C
C     UPDATE INTENSITY VALUE EVERY BLI LINES
C
          IF (BMOD.EQ.0) THEN
	      DO J=1,NS
		  CALL UPDATE(INBUF(J),OUTBUF(J))
	      END DO
C
C     UPDATE INTENSITY VALUE EVERY LFS LINES
C
          ELSE IF (LMOD.EQ.0) THEN
	      K=1
	      L=LFL
	      DO M=K,L
		  CALL UPDATE(INBUF(M),OUTBUF(M))
	      END DO
	      DO J=BLI,NS,BLI
		  K=J-LFL
		  L=MIN(K+N4,NS)
		  DO M=K,L
		      CALL UPDATE(INBUF(M),OUTBUF(M))
		  END DO
	      END DO
C
C     UPDATE INTENSITY VALUE EVERY SFS LINES
C
          ELSE IF (SMOD.EQ.0) THEN
	      K=1
	      L=SFL
	      DO M=K,L
		  CALL UPDATE(INBUF(M),OUTBUF(M))
	      END DO
	      DO J=BLI,NS,BLI
		  K=J-SFL
		  L=MIN(K+N5,NS)
		  DO M=K,L
		      CALL UPDATE(INBUF(M),OUTBUF(M))
		  END DO
	      END DO
C
C     UPDATE INTENSITY VALUE EVERY BLI SAMPLES
C
	  ELSE
	      DO J=BLI,NS,BLI
		  CALL UPDATE(INBUF(J),OUTBUF(J))
	      END DO
	  END IF
C
C     UPDATE INTENSITY VALUE EVERY SFS SAMPLES
C
	  IF (((BMOD.GE.N2).AND.(BMOD.LE.N3)) .OR.
     &	      ((BMOD.LE.SFL).AND.(BMOD.GE.1))) THEN
	      DO J=SFS,NS,SFS
		  CALL UPDATE(INBUF(J),OUTBUF(J))
	      END DO
	      IF (MOD(LFS,SFS).NE.0) THEN
		  DO J=LFS,NS,LFS
		      CALL UPDATE(INBUF(J),OUTBUF(J))
		  END DO
	      END IF
C
C     UPDATE INTENSITY VALUE EVERY LFS SAMPLES
C
          ELSE IF (((BMOD.GE.N1).AND.(BMOD.LT.N2)) .OR.
     &		   ((BMOD.LE.LFL).AND.(BMOD.GT.SFL))) THEN
	      DO J=LFS,NS,LFS
		  CALL UPDATE(INBUF(J),OUTBUF(J))
	      END DO
	  END IF
	  CALL XVWRIT(OUTUNIT,OUTBUF,STATUS,' ')
      END DO
      RETURN
      END


      SUBROUTINE  UPDATE(INPIX,OUTPIX)
      IMPLICIT NONE
      COMMON  /C1/  INUNIT,OUTUNIT,SL,SS,NL,NS,
     &		    IMGNL,IMGNS,REP,MUL,ADD,LIM,MODE,
     &		    BLI,LFS,SFS,LFL,SFL,
     &              TOP,RMUL
      INTEGER*2     INPIX,OUTPIX
      INTEGER*4     INUNIT,OUTUNIT
      INTEGER*4     SL,SS,NL,NS,IMGNL,IMGNS
      INTEGER*4     REP,MUL,ADD,LIM,MODE
      INTEGER*4     BLI,LFS,SFS,LFL,SFL
      INTEGER*4     TOP,IDATA
      REAL*4        RMUL

C
C     UPDATE DN VALUE ACCORDING TO THE INTENSITY PARAMETER VALUE
C
      GO TO (100,110,120), MODE
C
  100 CONTINUE
      OUTPIX=REP
      RETURN
C
  110 CONTINUE
      IDATA = NINT(INPIX*RMUL)
      OUTPIX = MIN(TOP,MAX(LIM,MOD(IDATA,255)))
      RETURN 
C
  120 CONTINUE
      OUTPIX = MOD(INPIX+ADD,255)
      RETURN
      END

PROCESS HELP=*
PARM INP     TYPE=STRING
PARM OUT     TYPE=STRING
PARM SIZE    TYPE=INTEGER COUNT=4   VALID=(0:100000)	DEFAULT=(1,1,0,0)
PARM NL      TYPE=INTEGER COUNT=0:1 VALID=(0:100000)	DEFAULT=0
PARM NS      TYPE=INTEGER COUNT=0:1 VALID=(0:100000)	DEFAULT=0
PARM SB      TYPE=INTEGER DEFAULT=1
PARM NB      TYPE=INTEGER DEFAULT=0
PARM BANDS   TYPE=INTEGER COUNT=2 DEFAULT=(1,0)
PARM AREA    TYPE=INTEGER COUNT=0:4 VALID=(0:100000)	DEFAULT=--
PARM IOFFSET TYPE=INTEGER COUNT=0:2 VALID=(-100000:100000) DEFAULT=--
PARM NOIN    TYPE=KEYWORD COUNT=0:1 VALID=NOIN		DEFAULT=--
PARM ZOOM    TYPE=REAL    COUNT=0:1 VALID=(-100000:100000) DEFAULT=--
PARM LZOOM   TYPE=REAL    COUNT=0:1 VALID=(-100000:100000) DEFAULT=--
PARM SZOOM   TYPE=REAL    COUNT=0:1 VALID=(-100000:100000) DEFAULT=--
PARM SCALE   TYPE=REAL    COUNT=1			DEFAULT=1.0
PARM LIMITS  TYPE=INTEGER COUNT=0:2			DEFAULT=--
PARM OFORM   TYPE=KEYWORD COUNT=0:1 VALID=(BYTE,HALF,FULL,REAL,DOUB) DEFAULT=--
PARM DEBUG   TYPE=KEYWORD           VALID=(DEBUG,NODEBUG) DEFAULT=NODEBUG
END-PROC
.TITLE
VICAR program SIZE
.HELP
PURPOSE:
SIZE is a VICAR applications program which may be used to magnify or compress
the size of an image and/or change its aspect ratio.  The program may also
be used to re-scale the input DN values and to change the data format
(e.g. byte-to-halfword).  Note, however, that if image size or aspect ratio
manipulation is not required, these latter two operations are more efficiently
accomplished via program CFORM.  The program will work on 3-dimensional (cube)
files (unless they are in BIP format), but no magnification or compression is
allowed in the third dimension;  the same operation is performed on each band.

EXECUTION STATEMENT:

      SIZE  INP=IPIC  OUT=OPIC  user-parameters...

where IPIC is the input image and OPIC is the output image.  IPIC and OPIC
may be in byte, halfword (16-bit integer), fullword (32-bit integer), or
floating point (REAL*4 or REAL*8) data format.

OPIC will normally have the same data format as IPIC.  Use the OFORM parameter
to change the output format.

SIZE performs  bilinear interpolation to magnify or compress the image.
The 'NOIN keyword may be used to suppress interpolation.  See sections on image
magnification and reduction below.

.page
OPERATION:

The size of the output image is specified in one of two ways:

(1) Explicitly specifying it with the NL and NS parameters:

        SIZE  INP  OUT  NL=500  NS=500
    or  SIZE  INP  OUT  SIZE=(1,1,500,500)

(2) Specifying a magnification or compression (zoom) factor:

        SIZE  INP  OUT  ZOOM=3		! 3x magnification
        SIZE  INP  OUT  ZOOM=-2         ! 2x compression
    or  SIZE  INP  OUT  ZOOM=0.5        ! 2x compression

The ZOOM factor can be a floating point value.
A negative ZOOM results in image compression.  I.e. ZOOM= -2.5 is the
same as ZOOM=0.4

Note the if both NL,NS ans ZOOM are specified, the ZOOM parameter will
determine the magnification/compression factor and NL,NS will determine the
size of the output image.

Independent zooms may be specified in the line (vertical) and sample
(horizontal) directions:

        SIZE  INP  OUT  LZOOM=2  SZOOM=3
        SIZE  INP  OUT  LZOOM=3  SZOOM=-2

As the last example implies, the image may be magnified in one direction
and compressed in the other.

The AREA parameter may be used to restrict processing to an area of the
input image.  For example:

		SIZE  IPIC  OPIC  ZOOM=-3  AREA=(10,10,100,100)
is equivalent to
		COPY  IPIC  IDS  (10,10,100,100)
		SIZE  IDS  OPIC  ZOOM=-3

The output data format may be different from the input format (see OFORM
keyword).  The image DNs may be optionally rescaled at this point via parameter
SCALE.  Note that rescaling may be necessary when converting to a smaller data
format (e.g. halfword-to-byte).  If a sample value is outside the range of the
output format (e.g. 0 to 255 DN for byte data), the output DN will be truncated.
The output DN range may be further limited via the LIMITS parameter.

.page
SPECIFYING THE SIZE OF THE OUTPUT IMAGE:

The size of the output image is specified either by entering the number of
lines and samples in the VICAR size field, or by specifying a magnification
or compression factor via the ZOOM, LZOOM, or SZOOM parameters:

Ex:  Enlarging a 3x3 image to a 9x9 image can be achieved in the
     following equivalent ways:

		SIZE  A  B  SIZE=(1,1,9,9)
        or      SIZE  A  B  NL=9  NS=9
	or	SIZE  A  B  ZOOM=3
        or      SIZE  A  B  LZOOM=3  SZOOM=3

If the output image size is specified by entering the number of lines and
samples, then the ZOOM factor is determined by computing the ratio between
the output and input picture dimensions.  Independent ZOOM factors are
computed in the line and sample dimensions, and may result in a change in
the image aspect ratio:

	z1=NLO/NLI		z2=NSO/NSI

where the input image size is NLI x NSI and the output image size is NLO x NSO.
The computations are performed in floating point, so that the output picture
size is not necessarily a multiple of the input picture size (i.e. z1 and
z2 are floating-point numbers).

The ZOOM factors may be specified via the ZOOM parameter,
		    ZOOM=z
where z1=z2=z, or independently via the LZOOM and SZOOM parameters:
		LZOOM=z1  SZOOM=z2

When the zoom factor is an integer, it is identical in function to the ZOOM
option in program XVD.  If z is positive, the input picture size
is multiplied by z.  If z is negative, the picture size is divided by -z.
Note that z=-2 is equivalent to z=0.5.

Specification of a zoom factor does not override the corresponding NL and/or 
NS values in the VICAR SIZE field.  If a value of NL or NS is specified that 
is smaller than ZOOM*(input NL or NS), then the image will be truncated in
that dimension.  If greater, then a blank area will be appended on the
bottom or right edge, respectively.

The IOFFSET parameter may be used to start the output image at a (line,sample)
coordinate other than (1,1).  Let the input image be:

                           1  2  3
                           2  3  4
                           3  4  5

then
		SIZE  INP  OUT  NL=8  NS=8  ZOOM=2  IOFFSET=(2,2)  'NOIN

will result in the following:

                    0  0  0  0  0  0  0  0
                    0  1  1  2  2  3  3  0
                    0  1  1  2  2  3  3  0
                    0  2  2  3  3  4  4  0
                    0  2  2  3  3  4  4  0
                    0  3  3  4  4  5  5  0
                    0  3  3  4  4  5  5  0
                    0  0  0  0  0  0  0  0

.page
IMAGE MAGNIFICATION:

The following example illustrates how image magnification is treated. Let
the input picture A be a 3x3 image as follows:

			       2  5  8
			A  =   5  8 11
			       8 11 14

The statement
		SIZE  A  B  SIZE=(1,1,9,9)  'NOIN
	or	SIZE  A  B  ZOOM=3  'NOIN

will produce a 9x9 output image B by replicating each input sample into a
3x3 pixel area:

		       2  2  2  5  5  5  8  8  8
		       2  2  2  5  5  5  8  8  8
		       2  2  2  5  5  5  8  8  8
		       5  5  5  8  8  8 11 11 11
		B  =   5  5  5  8  8  8 11 11 11
		       5  5  5  8  8  8 11 11 11
		       8  8  8 11 11 11 14 14 14
		       8  8  8 11 11 11 14 14 14
		       8  8  8 11 11 11 14 14 14

The statement
		SIZE  A  B  SIZE=(1,1,9,9)  ZOOM=3

will produce a 9x9 output image by interpolating between the four nearest
neighbors and extrapolating around the picture borders.

		       0  1  2  3  4  5  6  7  8
		       1  2  3  4  5  6  7  8  9
		       2  3  4  5  6  7  8  9 10
		       3  4  5  6  7  8  9 10 11
		B  =   4  5  6  7  8  9 10 11 12
		       5  6  7  8  9 10 11 12 13
		       6  7  8  9 10 11 12 13 14
		       7  8  9 10 11 12 13 14 15
		       8  9 10 11 12 13 14 15 16

As in the no-interpolation case above, each input sample has been "blown up"
to fill a 3x3 area.  However, because interpolation is performed, the input
sample values equal the output sample values only at the geometric centers
of these 3x3 areas.

Note that the magnified image output by SIZE differs slightly from what one
might obtain using GEOM, MGEOM, or GEOMA. The user may find it instructive
to attempt to achieve an identical result as the example above by using GEOM
or GEOMA.

.page
IMAGE COMPRESSION:

Image compression is treated as the functional inverse of image magnification.
Unless the keyword 'NOIN is specified, the compression is performed via area
averaging.  To illustrate, let picture B be the 9x9 image of our previous
example:

		       0  1  2  3  4  5  6  7  8
		       1  2  3  4  5  6  7  8  9
		       2  3  4  5  6  7  8  9 10
		       3  4  5  6  7  8  9 10 11
		B  =   4  5  6  7  8  9 10 11 12
		       5  6  7  8  9 10 11 12 13
		       6  7  8  9 10 11 12 13 14
		       7  8  9 10 11 12 13 14 15
		       8  9 10 11 12 13 14 15 16

The statement:
		SIZE  B  C  ZOOM=-3

will cause each output pixel to be computed by averaging a 3x3 area of
the input image.  For example, output pixel (1,1) = (0+1+2+1+2+3+2+3+4)/9
The resulting output image C will be identical to our original input image A:

			       2  5  8
			C  =   5  8 11
			       8 11 14

The area averaging operation is extended to non-itegral zoom factors by
assigning fractional weights to samples around the area margins, and unit
weights to interior samples. The output sample is then the weighted samples
divided by the sum of their weights.

If the keyword 'NOIN is specified,

		SIZE  IPIC  OPIC  ZOOM=-N  'NOIN

then no pixel interpolation is performed.  The output image is generated
by selecting every Nth image line from IPIC, and every Nth pixel of each of
these lines, begining with pixel (1,1).  Note that when the output picture
is several times smaller than the input picture, most of the samples in the
input image are ignored in the generation of the output image.

To illustrate, let picture B be the 9x9 image of our previous example:

		       0  1  2  3  4  5  6  7  8
		       1  2  3  4  5  6  7  8  9
		       2  3  4  5  6  7  8  9 10
		       3  4  5  6  7  8  9 10 11
		B  =   4  5  6  7  8  9 10 11 12
		       5  6  7  8  9 10 11 12 13
		       6  7  8  9 10 11 12 13 14
		       7  8  9 10 11 12 13 14 15
		       8  9 10 11 12 13 14 15 16

The statements:
		SIZE  B  C  ZOOM=-3  'NOIN
		SIZE  B  D  ZOOM=-3  'NOIN  AREA=(2,2,8,8)

will generate 3x3 output images C and D of the form:

		    0  3  6		       2  5  8
	 C  =	3  6  9		D  =   5  8 11
		    6  9 12		       8 11 14

Note the use of the AREA parameter to begin the resampling at a point other
than pixel (1,1).

The input image may be compressed by a non-integral zoom factor r:

		SIZE  IPIC  OPIC  ZOOM=r  'NOIN

where r is a floating point number between 0 and 1.  Each output sample is
generated by determining where it comes from in the input image and selecting
the sample closest to this point.

.page
UPDATING OF MAP PROJECTION LABEL INFORMATION:

If the input image has map projection labels, the projection information
will be updated to reflect changes in the geometry as a result of size
changes and image offsets (see AREA and IOFFSET parameters).  A new map
projection history label is added and the map projection property label
is updated.

If the map projection is POINT PERSPECTIVE, the following label items are
recomputed:

    FOCAL_PLANE_SCALE
    OPT_AXIS_INTERCEPT_LINE
    OPT_AXIS_INTERCEPT_SAMPLE
    PLANET_CENTER_LINE
    PLANET_CENTER_SAMPLE

For all other projections, the following label items are recomputed:

    LINE_PROJECTION_OFFSET
    SAMPLE_PROJECTION_OFFSET
    MAP_SCALE
    MAP_RESOLUTION

If either MAP_SCALE or MAP_RESOLUTION is missing from the input projection
label, it is computed from the other using the relationship: 

                      PI
     MAP_RESOLUTION = --- * A_AXIS_RADIUS/MAP_SCALE
                      180

.page
EXAMPLES:

Let the input image be a 100 x 100 byte picture. The following equivalent
statements will magnify the input image by a factor of 2.5:

		SIZE  A  B  SIZE=(1,1,250,250)
		SIZE  A  B  ZOOM=2.5

To blow up a 50x50 area from the center of the picture by a factor of 4:

		SIZE  A  B  ZOOM=4  AREA=(26,26,50,50)

To average all the lines of an image together, use

		SIZE  A  B  NL=1

The following equivalent statements magnify the line direction by 2 and
shrinks the sample direction by 2:

		SIZE  A  B  SIZE=(1,1,200,50)
		SIZE  A  B  LZOOM=2  SZOOM=-2

.page
PROGRAM RESTRICTIONS:

Now internal buffers allow up to 100.000 samples in byte, half, full or real
including Double

PROGRAM HISTORY:

Written by: Gary Yagi, 26 January 1976
Cognizant programmer: Ray Bambery
Revision history:
  
  1983-11-18 HBD - deleted stacka and restructured code made vax compatible

  1984-07-11 HBD - fix bug in shrink and shrinz

  1984-09-04 SP - doubled buffer sizes to allow lines up to 20000;
    converted to use vicar2 calls (xvread...); added statement to change
    szoom=-1 to szoom=1; deleted format parameter (always using format
    from label.)

  1985-01-01 FFM - converted subroutine intrp,intrpv,iout,shrink,
    shrinz from fortran to assembly language

  1987-01-26 AXW - added fullword capability and translation tables
    for the magellan project.  specified by the size.pdf file keyword
    oform='magellan'. code modifications are marked by '! axw'.

  1988-01-22 AXW - changed keyword oform from 'magellan' to 'lookup'.

  1988-11-22 GMY - major code modification and reorganization:
    consolidated magellan option to subroutines smgn and
    mgnsizeinit. lookup now a separate keyword. added fullword and real*4
    capability. rewrote help file.

  1988-12-22 GMY - mgn lookup table resolution increased 10x. added
    smgn1 to handle zoom=-3 as special case.

  1989-02-11 GMY - fixed image compression with no interpolation
    algorithm to agree with documentation (start with pixel 1,1).

  1989-11-26 GMY - added volts keyword.  program now uses size field
    to determine size of lookup tables.

  1989-11-26 GMY - fix bug in volts option (max index=2249)

  1991-11-09 LWK - update map labels if present

  1993-11-16 FFM - ported to unix. the major changes are : 1. modify
    xv,xl routines 2. change int, byte equivalence to int2byte, byte2int,
    add "include fortport" to all related subroutines 3. change logical*1
    to byte (if pixel) 4. divide real*4 eps/1.e-6/ into real*4, and data
    statement 5. change hex number to integer in data statement 6. change
    mvl to mvlc, add to addv 7. make optional arguments to required
    arguments for addv, mvlc, and mve 8. change qprint to xvmessage
    9. remove /list from include statement 10. add all include files to
    imake file 11. remove "implicit statement" from slookup include file
    12. create common/c3/iunit, so iunit will pass to subroutine sread
    properly, because sgi doesn't default value to 0. 13. add new mp
    interface 14. modify test pdf to be automated for vax, sunos, & sgi.

  1994-10-25 FFM - fix fr 85697: 1. add keyword debug to print the
    informational message for routine mp_label_read. 2. enlarge buffer to
    handle output image up to 50,000 samples. if larger than 50,000
    samples, size will abend with a message to inform user the cause of
    the abend.

  1995-04-28 FFM - fix fr 82982: 1. fixed dcl delete statement in test
    pdf. 2. corrected error in test #2 about m.dat. 3. removed a test case
    in test #7 which needs too much disk space. 4. fixed an error in
    xvmessage in routine getsize. so it will not print out a blank line or
    a line has meaningless infor on andes.

  1995-09-12 LWK - corrected the scaling of the
    line/samp_projection_offset label items: these are defined with
    respect to (1,1), not (0,0)!

  1995-06-14 SMC - fr 89272: fixed abend when lzoom=-2 on odd number
    line images fr 89275: fixed image output so that lzoom=-2 will begin
    processing on the first line instead of the second

  1995-06-26 SMC - fr 89394: undo fr 89272/89275, because it caused
    problems. and fixed it another way

  1997-07-06 LWK - added ioffset parameter

  1997-09-04 LWK - corrected computation of effect of zoom on mp
    line/samp items, since only (0.5,0.5) is fixed in zoom.

  1997-12-03 LWK - changed entry's to subroutine to avoid alpha compiler bug

  1998-02-04 GMY - changed samp from i*2 to i*4 to fix bug when ns > 32767

  1998-05-21 BAM - increased buffer sizes to allow lines up to
    50000. fixed pdf.

  1998-06-24 LWK - corrected map_resolution update: it should be
    multiplied by zoom, but pgm was dividing!

  1998-07-09 LWK - changed printout of zoom factor for integer
    reduction from "zoom -n" to "zoom 1/n"

  1999-08-19 EMS - fixed bug that was giving invalid values around the
    edges of the output image

  1999-12-07 GMY - (day of infamy) major reorganization of code and
    rewritting of test script. fixed ioffset problem for interpolation
    case. when updating map projection labels, if resolution or scale is
    missing, it is computed from the other.

  2000-04-24 GMY - fix bug when zoom, nl, ns are specified for case
    where nl,ns specifies output is to be same size as input.

  2000-08-22 GMY - fix bug when zoom not specified and nl is same as
    input. (ar 104590)

  2003-05-29 AXC - fixed abend when lzoom is specified but not
    szoom. (ar-108538) initialized a character buffer. (ar-104344)

  2003-12-18 DLR - increased buffer sizes to allow lines up to
    100000. fixed pdf.

  2004-01 LWK - added support for 3-d (cube) files; removed magellan
    option (which will live on as pgm. sizemgn)

  2009-04-14 PKIM - increased image size to 100,000 from 50000

  2009-08-24 SMYTH - fixed nsi parameters in several routines

  2010-02-05 R. J. Bambery - full 64-bit compliance on macosx
    (intel/powerpc) gfortran version 4.4.2 reworked internals to perform
    in real*4 processing, massive failures for half and full word images
    in 'noin calls due to equivalencing internal buffers to byte, half,
    full and real. apparently, the internal routines called via snoin.f
    had gotten older code mixed in with new after afids build 562

  2010-02-10 R. J. Bambery - extensive reworking of internal code to
    remove final conflicts between real/full buffers on linux systems (g77
    version 3.4.6)

  2010-02-14 R. J. Bambery - fix scale parameter for case where input
    is byte but output scale requires half, full, or real (signed byte to
    integer/real conversion) in 'noin or for half to full and half to real
    in 'noin

  2010-03-07 R. J. Bambery - remove residual ocode/icode debug messages for 'noin

  2011-05-06 R. J. Bambery - remove warning messages from gfortran 4.4.4 compiler

  2012-06-06 R. J. Bambery - gfortran 4.6.3 changed all dimension (1)
    values to (*) in subroutines to avoid "fortran runtime error: index
    '2' of dimension 1 of array 'id' above upper bound of 1"

  2012-12-09 R. J. Bambery - fixed include in update label with .fin
    extension to work with new vicar build system in cartlab

  2013-08-22 R. J. Bambery - fixed runtime error in buf array in
    sread.f by zeroing out all arrays in size.f

  2017-11-21 W. L. Bunch - added support for double-precision float.

.LEVEL1
.VARI INP
Input image.
.VARI OUT
Output image.
.VARI SIZE
Output picture size.
.VARI NL
Output number of lines
picture.
.VARI NS
Output number of samples
picture.
.VARIABLE BANDS
Standard Vicar Bands field:
  (SB,NB)
You can enter SB and NB together
as BANDS, OR enter the SB and NB
parameters separately.
By default, the entire input
image is used if these
.VARIABLE SB
Starting band number
.VARIABLE NB
Number of bands
.VARI OFORM
Output data format.
Valid keywords are BYTE, HALF,
FULL, REAL, or DOUB.
.VARI AREA
Input image area to be SIZEd
.VARI IOFFSET
Offset output image:
  OFFSET=(SLO,SSO)
.VARI NOIN
Specifies no interpolation.
.VARI ZOOM
Specifies the ZOOM factor.
.VARI LZOOM
Vertical zoom factor.
.VARI SZOOM
Horizontal zoom factor.
.VARI SCALE
Scale applied to output values.
.VARI LIMITS
Lower and upper limits of DN
range.
.VARI DEBUG
Print status message.

.LEVEL2
.VARI INP
    Ex:  INP=IPIC
where IPIC is the input image file specification.  IPIC may be in
byte, halfword (16-bit integer), fullword (32-bit integer), or
floating point (REAL*4 or REAL*8) data format.  IPIC may be up to
20,000 pixels in width (sample size) and of arbitrary length (line or
vertical dimension), and may be located on disk or magnetic tape.
.VARI OUT
    Ex:  OUT=OPIC
where OPIC is the output image file specification.  The output data format is
specified by the OFORM parameter.  OPIC may be up to 20,000 pixels in width
(sample size) and of arbitrary length (line or vertical dimension), and must
be located on random-access disk storage.
.VARI SIZE
    SIZE=(1,1,NL,NS) 
where NL and NS specify the number of lines and samples in the output image.
If the SIZE parameter is ommitted, the output image size should be specified
via the ZOOM, LZOOM, and/or SZOOM parameters.

    Ex: Enlarging a 3x3 image to a 9x9 image can be achieved in the
        following ways:

		SIZE  A  B  SIZE=(1,1,9,9)
        or      SIZE  A  B  NL=9  NS=9
	or	SIZE  A  B  ZOOM=3
        or      SIZE  A  B  LZOOM=3  SZOOM=3
.VARI NL
    NL=n
where n is an integer specifying the number of lines in the output image.
The parameters NL and NS may be used instead of the SIZE parameter to specify
the size of the output image.
.VARI NS
    NS=n
where n is an integer specifying the number of samples in the output image.
The parameters NL and NS may be used instead of the SIZE parameter to specify
the size of the output image.
NOTE: The same restrictions that pertain to the SIZE parameter also pertain
to NL and NS.(See HELP SIZE)
.VARI OFORM
Keyword OFORM specifies the data format of the output image.  Valid
values are BYTE for byte output, HALF for halfword (16-bit integer)
output, FULL for fullword (32-bit integer) output, REAL for 32-bit
floating-point, and DOUB for 64-bit floating-point output.  If
defaulted, the output data format is set equal to the input data
format.
.VARI AREA
    AREA=(SL,SS,NL,NS)
where SL, SS, NL, and NS are all integers specifying the starting line,
starting sample, number of lines, and number of samples, respectively, of
the input area. The input area defaults to (1,1,NLI,NSI) where NLI and NSI
are the number of lines and number of samples in the input image.

.VARI IOFFSET

The IOFFSET parameter may be used to start the output image at a (line,sample)
coordinate other than (1,1).  Let the input image be:

                           1  2  3
                           2  3  4
                           3  4  5

then
		SIZE  INP  OUT  NL=8  NS=8  ZOOM=2  IOFFSET=(2,2)  'NOIN

will result in the following:

                    0  0  0  0  0  0  0  0
                    0  1  1  2  2  3  3  0
                    0  1  1  2  2  3  3  0
                    0  2  2  3  3  4  4  0
                    0  2  2  3  3  4  4  0
                    0  3  3  4  4  5  5  0
                    0  3  3  4  4  5  5  0
                    0  0  0  0  0  0  0  0

Generating blank margins may be useful in a mosaic or for writing an OVERLAY
grid.

.VARI NOIN
NOIN specifies that no interpolation is to be performed.  A nearest
neighbor is used to compute each output sample value. The default is to
perform interpolation.
.VARI ZOOM
    ZOOM=z
where z is an integer or floating point number specifying the output image
size as a ratio of the input image size (the zoom factor).  The image size
is scaled by the factor z in both line and sample dimensions.  Note that
the line and sample zoom factors may be specified independently via the
LZOOM and SZOOM parameters.  I.e. ZOOM=2 is equivalent to LZOOM=2 SZOOM=2.

The zoom factor is identical in function as in VIDS or IDX. If z is
positive, the input picture size is multiplied by z.  If z is negative,
the picture size is divided by -z.  Note that z=-2 is equivalent to z=0.5.
Specification of a zoom factor overrides the corresponding NL and/or NS
values in the VICAR SIZE field.  If a zoom factor is not specified the
output picture size defaults to the corresponding NL and/or NS value in
the SIZE field.
.VARI LZOOM
    LZOOM=z
where z is an integer or floating point number specifying the magnification
or reduction factor of the image in the line (vertical) dimension.  If z is
positive, the line dimension is multiplied by z.  If z is negative, the line
dimension is divided by -z.  Note that z=-2 is equivalent to z=0.5.

Specifying LZOOM overrides the corresponding NL value in the VICAR SIZE
field.  If LZOOM is not specified the output line dimension defaults to the
corresponding NL value in the SIZE field.
.VARI SZOOM
    SZOOM=z
where z is an integer or floating point number specifying the magnification
or reduction factor of the image in the sample (horizontal) dimension.  If z
is positive, the sample dimension is multiplied by z.  If z is negative, the
sample dimension is divided by -z.  Note that z=-2 is equivalent to z=0.5.

Specifying SZOOM overrides the corresponding NS value in the VICAR SIZE
field.  If SZOOM is not specified the output line dimension defaults to the
corresponding NS value in the SIZE field.
.VARI SCALE
    SCALE=s
where s is an integer or floating point number specfying an optional
scaling to be applied to the output DN values: OUTDN=s*OUTDN.  If SCALE
is not specified, no scaling is performed.
.VARI LIMITS
  LIMITS=(I1,I2)
where I1 and I2 are integers specifying the lower and upper limits of the
output DN range. All DN's outside this range are set equal to ILO and IHI.
The defaults are 0 and 255 for byte output, -32768 and 32767 for halfword
output, and -2147483648 and 2147483647 for fullword data.  This DN range
check is applied to floating point output.
.VARI DEBUG
Print the following message while the status returned from routine MP_LABLE_READ
is less than MP_SUCCESS: "error reading MP labels or MP labels do not exist"
.END

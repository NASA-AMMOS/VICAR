procedure option=selftutor help=*

	parm A_VEVERKA_temp	 real count=0:1 		def=0.5
	parm B_VEVERKA_temp	 real count=0:1 		def=0.6
	parm C_VEVERKA_temp	 real count=0:1 		def=0.003
	parm D_VEVERKA_temp	 real count=0:1 		def=0.14
	parm MO_EXP1_temp	 real count=0:1 		def=0.5
	parm MO_EXP2_temp	 real count=0:1 		def=0.1

	parm A_VEVERKA	 real count=0:1 	def=--
	parm B_VEVERKA	 real count=0:1 	def=--
	parm C_VEVERKA	 real count=0:1 	def=--
	parm D_VEVERKA	 real count=0:1 	def=--
	parm MO_EXP1	 real count=0:1 	def=--
	parm MO_EXP2	 real count=0:1 	def=--

	PARMSET name=pho_mosher_sub help=*

	    parm A_VEVERKA	 real count=0:1 def=--
	    parm B_VEVERKA	 real count=0:1 def=--
	    parm C_VEVERKA	 real count=0:1 def=--
	    parm D_VEVERKA	 real count=0:1 def=--
	    parm MO_EXP1	 real count=0:1 def=--
	    parm MO_EXP2	 real count=0:1 def=--

	END-PROC

body

	if (_tutor=1)

	  restore-parm pho_mosher.par


	  if ($count(A_VEVERKA)=0)
	 						let A_VEVERKA_temp=0.5
	  else
	 	let A_VEVERKA_temp=&A_VEVERKA
	  end-if

	  if ($count(B_VEVERKA)=0)
	 						let B_VEVERKA_temp=0.6
	  else
	 	let B_VEVERKA_temp=&B_VEVERKA
	  end-if

	  if ($count(C_VEVERKA)=0)
	 						let C_VEVERKA_temp=0.003
	  else
	 	let C_VEVERKA_temp=&C_VEVERKA
	  end-if

	  if ($count(D_VEVERKA)=0)
	 						let D_VEVERKA_temp=0.14
	  else
	 	let D_VEVERKA_temp=&D_VEVERKA
	  end-if

	  if ($count(MO_EXP1)=0)
	 						let MO_EXP1_temp=0.5
	  else
	 	let MO_EXP1_temp=&MO_EXP1
	  end-if

	  if ($count(MO_EXP2)=0)
	 						let MO_EXP2_temp=0.1
	  else
	 	let MO_EXP2_temp=&MO_EXP2
	  end-if




	   tutor pho_mosher_sub 				+
		|restore=pho_mosher.par, save=pho_mosher.par|	+
			A_VEVERKA=&A_VEVERKA_temp		+
			B_VEVERKA=&B_VEVERKA_temp		+
			C_VEVERKA=&C_VEVERKA_temp		+
			D_VEVERKA=&D_VEVERKA_temp		+
			MO_EXP1=&MO_EXP1_temp                   +
			MO_EXP2=&MO_EXP2_temp     



	   return

	else
	   write " "
	   write "*********************************************************"
	   write " "
	   write " This program is only intended to be run "
	   write " as tutor from other programs needs "
	   write " photometric function parameters "
	   write " for the MOSHER function."
	   write " "
	   write "*********************************************************"
	   write " "
	end-if

end-proc

.title
'PHO_MOSHER' sub-menu (for a photometry VICAR application program)

.help

PURPOSE:

In this PDF, the user is asked for the only parameters needed for the Mosher's
photometric function.

.page
MATHEMATICAL BACKGROUND :

bidirectional reflectance [1/str] :

r(i,e,g) = (A + B * g + 
C * exp(- D * g)) * pow(cos(i) * cos(e), MO_EXP1 + MO_EXP2 * g) / cos(e)

with:
i 	incidense angle
e 	emission angle
g 	phase angle 
A 	A_VEVERKA
B 	B_VEVERKA
C 	C_VEVERKA
D 	D_VEVERKA	

REFERENCE :
old VICAR Photometry programs
!
.page
PROGRAMMER:

Friedel Oschuetz
Institute of Planetary Exploration
DLR
12484 Berlin (FRG)

.level1

.VARI A_VEVERKA 
Veverka parameter

.VARI B_VEVERKA
Veverka parameter

.VARI C_VEVERKA
Veverka parameter

.VARI D_VEVERKA
Veverka parameter

.VARI MO_EXP2
Mosher's exponent

.VARI MO_EXP1
Mosher's exponent

.level2

.VARI A_VEVERKA 
Parameter of the Veverka photometric function.

.VARI B_VEVERKA
Parameter of the Veverka photometric function.

.VARI C_VEVERKA
Parameter of the Veverka photometric function.

.VARI D_VEVERKA
Parameter of the Veverka photometric function.

.VARI MO_EXP1
Modification of the coefficient k in the Minnaert part 
of Mosher's photometric function (goes along with MO_EXP2).

.VARI MO_EXP2
Modification of the coefficient k in the Minnaert part 
of Mosher's photometric function (goes along with MO_EXP1).

.end

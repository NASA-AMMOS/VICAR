procedure
refgbl $echo
parm version string def="ibis-1"
parm org string def="column"
body
!let _onfail="continue"
let $echo="yes"


!   TEST SCRIPT FOR GEOMV


! Now generate BYTE input data set
 
gen mgtest 10 10 SINC=40 LINC=40
 
! Verify existence of input file
list mgtest

!  Try some copies.
!  Check case of grid bigger than image.
geomv mgtest mgtest1 + 
   TIEPOINT=(1.,1.,1.,1.,   1.,20.,1.,20.,+
            20.,1.,20.,1., 20.,20.,20.,20.)
difpic (mgtest1 mgtest)

 
! Perform simple enlargement to 2X size
geomv mgtest mgenlarg + 
   SIZE=(1,1,20,20)+
   TIEPOINT=(1.,1.,1.,1.,1.,20.,1.,10.,+
                20.,1.,10.,1.,20.,20.,10.,10.)

! Print it out
list mgenlarg

 
! Perform 45 degree rotation clockwise with 1.4 times enlargement
geomv mgtest mgrotat + 
   SIZE=(1,1,20,20)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)

! Print it out
list mgrotat


!   SUBSET OF ABOVE CASE, THIS WAS AN ERROR CASE UNTIL FIXED 05/00

gen xxxim1 10 10 SINC=40 LINC=40

! Perform 45 degree rotation clockwise with 1.4 times enlargement

GEOMV xxxim1 xxxim3 sl=7 ss=1 +
         nl=6 ns=6 interp=bilin +
         TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)
 
list xxxim3 'zer





! Perform test of size field handling 
geomv mgtest mgrotat1 + 
   SIZE=(1,1,20,10)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
             20.,1.,15.,5.,20.,20.,5.,15.)

geomv mgtest mgrotat2 + 
   SIZE=(1,11,20,1)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)

geomv mgtest mgrotat3 + 
   SIZE=(1,12,20,9)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)

! Concatenate the three images.  
mss (mgrotat1,mgrotat2,mgrotat3) mgrotatA 
difpic (mgrotatA,mgrotat) 


! Perform the same operation, but without interpolation
geomv mgtest mgrotat + 
   SIZE=(1,1,20,20)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
            20.,1.,15.,5.,20.,20.,5.,15.)+
   INTERP=NOIN

! Print it out
list mgrotat


! Perform the same operation, but without interpolation
gen mgtest 10 10 SINC=64 LINC=64
list mgtest
geomv mgtest mgrotat + 
   SIZE=(1,1,20,20)+
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)+
   'ZNOIN

! Print it out
list mgrotat
 
! Now generate BYTE input data set
 
gen mgtest2 1000 1000 SINC=1 LINC=1
 
! Verify existence of input file
list mgtest2 SIZE=(1,1,15,15)
 
! DO LONG THIN CASE WITH 45 DEG ROTATION.

geomv mgtest2 mgenthin + 
   SIZE=(1,1,2,1000)+
   TIEPOINT=(1.,1.,1000.,1.,1.,1000.,1.,1000.,+
            2.,1.,1001.,2.,2.,1000.,2.,1001.)

! Print it out
list mgenthin 'NOEJECT
 

! Now do simple tests for half
! Now generate HALF input data set
 
gen mgtest 10 10 SINC=40 LINC=40 'HALF
 
! Verify existence of input file
list mgtest
 

!  Try some copies.
!  Check case of grid bigger than image.
geomv mgtest mgtest1 + 
   TIEPOINT=(1.,1.,1.,1.,   1.,20.,1.,20.,+
            20.,1.,20.,1., 20.,20.,20.,20.)
difpic (mgtest1 mgtest)


! Perform simple enlargement to 2X size
geomv mgtest mgenlarg + 
   SIZE=(1,1,20,20)   +
   TIEPOINT=(1.,1.,1.,1.,1.,20.,1.,10.,+
                20.,1.,10.,1.,20.,20.,10.,10.)
 
! Print it out
list mgenlarg
 
! Perform 45 degree rotation clockwise with 1.4 times enlargement
geomv mgtest mgrotat + 
   SIZE=(1,1,20,20)  +
   TIEPOINT=(1.,1.,5.,-5.,1.,20.,-5.,5.,+
                20.,1.,15.,5.,20.,20.,5.,15.)

! Print it out
list mgrotat


! big case with offsets
gen mgtest2 1000 1000 SINC=3 LINC=7

geomv mgtest2 mgenthin + 
   SIZE=(1,1,1000,1000)+
   TIEPOINT=(1.,1.,7.,7.,1.,1000.,1.,1022.,+
            1000.,1.,970.,22.,1000.,1000.,1050.,1060.)

list mgenthin linc=199 sinc=199

! ibis file grid input


! small grid small image testing ibis file pass to geomv

gen mgtest2 400 400 SINC=3 LINC=7
ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=444
mf a func=("c1=sqrt(index*17+3743)","c2=sqrt(index*7+4431)")
mf a func=("c1=mod(c1,0.0001)*4000000","c2=mod(c2,0.0001)*4000000")
mf a func=("c3=c1*1.1","c4=c2*1.1")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=30,NAV=30,MINL=1.,MINS=1.,MAXL=400.,MAXS=400. +
    'GEOMV

geomv INP=(mgtest2,b) OUT=mgenlarg + 
   SIZE=(1,1,400,400)

list mgenlarg linc=39 sinc=39

! parms file use by GEOMV... have to use the MGEOM version to
! get a parms file since GEOMV keyword to tieconv produces an IBIS
! file in the output, the LGEOM version produces an unevenly spaced
! grid

ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=44
mf a func=("c1=sqrt(index*17+3743)","c2=sqrt(index*7+4431)")
mf a func=("c1=mod(c1,0.0001)*1000000","c2=mod(c2,0.0001)*1000000")

mf a func=("c3=c1*1.1","c4=c2*1.1")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=7,NAV=6,MINL=1.,MINS=1.,MAXL=10.,MAXS=10. +
    'MGEOM

geomv INP=mgtest OUT=mgenlarg PARMS=b + 
   SIZE=(1,1,10,10)
list mgenlarg


! ibis file grid input large grid and large image

gen mgtest2 1000 1000 SINC=3 LINC=7
ibis-gen a version=&version org=&org  datacol=(1,2,3,4) +
    nc=4 nr=444
mf a func=("c1=sqrt(index*17+3743)","c2=sqrt(index*7+4431)")
mf a func=("c1=mod(c1,0.0001)*10000000","c2=mod(c2,0.0001)*10000000")
mf a func=("c3=c1*1.1","c4=c2*1.1")

tieconv INP=a COLS=(1,2,3,4)  OUT=b +
      NAH=200,NAV=200,MINL=1.,MINS=1.,MAXL=1000.,MAXS=1000. +
    'GEOMV

geomv INP=(mgtest2,b) OUT=mgenlarg + 
   SIZE=(1,1,1000,1000)

list mgenlarg linc=199 sinc=199

theend>
end-proc

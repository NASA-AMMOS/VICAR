procedure
local   afidsroot   type=string count=1
local   aftestdata  type=string count=1

local testmin1 real count=1 init=2.0 
local testmax1 real count=1 init=4.144700E+04

local testmin2 real count=1 init=2.0
local testmax2 real count=1 init=4.027336E+06

local testmin3 real count=1 init=2.0
local testmax3 real count=1 init=4.014217280E+08

local casmin1 real count=1 init=3.000000000000e+00
local casmax1 real count=1 init=4.204830000000e+05

local casmin2 real count=1 init=3.000000000000e+00
local casmax2 real count=1 init=7.009883000000e+06

local casmin3 real count=1 init=3.000000000000e+00
local casmax3 real count=1 init=2.159928400000e+07

local casmin4 real count=1 init=3.000000000000e+00
local casmax4 real count=1 init=7.477808000000e+07

local minval  real count=1 
local maxval  real count=1 

! Aug 22, 2013 - RJB
! TEST SCRIPT FOR LTGEN   
! tests BYTE and HALF images
!
! Vicar Programs:
!   gen label-list f2 label-replace copy createfile
!   maxmin addtofile reset list hist flot momgen typetext  
!
! External programs
!       <none>
!
! Parameters:
!       <none>           
!
! Requires external test data: 
!   cartlab or mipl dependent pointers
!            
!   Cartlab defines env var $AFIDS_ROOT, mipl doesn't
!   The test data in cartlab is on /raid1/test_data 
!   but in other facilities it might be somewhere else. 
!   
!   To facilitate this test you can define an
!   environment variable $AFIDS_TESTDATA to point to
!   that data. The cartlab system does not. In the git archive
!   on pistol there is softlink to the test data in vdev that
!   allows this test to pass 
!
!!
! Note: Previous tests of Cassini data only tested
! the 0-filled initial generation of the ltgen file
! This new test fills it in with real data             
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
refgbl $echo
refgbl $autousage
refgbl $syschar

body
enable-log

!let _onfail="stop"
let _onfail="stop"
let $echo="no"

!check to see if mipl or cartlab for certain programs
!cartlab defines env var $AFIDS_ROOT, mipl doesm't
translog INP=AFIDS_ROOT TRANS=afidsroot
translog INP=AFIDS_TESTDATA TRANS=aftestdata
if (afidsroot = "")
!MIPL        
    ush ln -s data cas 
else         
!CARTLAB
    if (aftestdata = "")    
       ush ln -s ../test_data/vicar_test_images/testdata/cassini/iss cas
    else
       ush ln -s $AFIDS_TESTDATA/vicar_test_images/testdata/cassini/iss cas
    end-if
end-if       
           
let _onfail="goto rm"
 
write "*******************"
write "   TEST 1         *"
write "*******************"
let $echo="yes"
 
! TEST 1 - GENERAL TEST:  BYTE 0-dn Image
gen a.img 800 800
ltgen a.img ltf.out 'DBUG EXPO=(0.,50.,66.67,100.,133.33,200.,266.67) +
            AREA=(15,15,10,10) GRES=(3,12,13) NI=3

let $echo="no" 
WRITE "Verify from file: zeroed place holders"
let $echo="yes"
list ltf.out 'nousrtim

maxmin ltf.out maxival=maxval minival=minval
let $echo="no"
write "Data set  max = &maxval should be 0.000"
write "Data set  min = &minval should be 0.000"
write "  "
WRITE "Verify the NUM_AREA, AREAS, NUM_EXP, and EXPOSURES labels"
let $echo="yes"
label-list ltf.out 'nousrtim

! TEST 2 - noisy image HALF image
!
let $echo="no"
write "*******************"
write "   TEST 2         *"
write "*******************"
let $echo="yes"
gausnois d1.img mean=10.5 sigma=1.023  nl=500 ns=500 form=half seed=82651
hist d1.img 'nohist
flot d1.img d2.img 'coun


gausnois a1.img mean=100.5 sigma=3.1623 nl=500 ns=500 form=half seed=987654
hist a1.img 'nohist
flot a1.img a2.img 'coun
gausnois b1.img mean=1000.5 sigma=10 nl=500 ns=500 form=half seed=876543
hist b1.img 'nohist
flot b1.img b2.img 'coun
ltgen a1.img ltf1.out 'grid ni=2 exp=(0,10,20)  !CREATE LTF
momgen (d1.img,d2.img) ltf1.out  exp=0                    !LOAD LTF
momgen (a1.img,a2.img) ltf1.out  exp=10                   !LOAD LTF
momgen (b1.img,b2.img) ltf1.out  exp=20                   !LOAD LTF

! get min and max for exp=0
maxmin ltf1.out sl=1 nl=1 maxival=maxval minival=minval 
let $echo="no"
write "Data set line 1 max = &maxval should be &testmax1"
write "Data set line 1 min = &minval should be &testmin1"
    if (&maxval = testmax1  and &minval = testmin1) write "          ******* Line 1 passes *******"
let $echo="yes"
maxmin ltf1.out sl=2 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 2 max = &maxval should be &testmax2"
write "Data set line 2 min = &minval should be &testmin2"
    if (&maxval = testmax2  and &minval = testmin2) write "          ******* Line 2 passes *******"
let $echo="yes"

maxmin ltf1.out sl=3 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 3 max = &maxval should be &testmax3"
write "Data set line 3 min = &minval should be &testmin3"
    if (&maxval = testmax3  and &minval = testmin3) write "          ******* Line 3 passes *******"

write " "
write " "
write "**********************"
write "   TEST 3  - Cassini *"
write "**********************"
let $echo="yes"

! TEST 3 - Cassini summation mode image
!---------------------------
! Make a test light transfer file which has exposure levels of
! 0,10,20,40 and each input frame was 10,110,210,410 dn respectively.
! Each level will have 3 frames associated with it.
 
!Using a frame with Cassini labels, set dns and exposures
!Set dns to 10 and replicate -  set exposure to 0
f2 cas/sum2.1 l1.a func="in1+10"
label-rep l1.a 'PROP property="CASSINI-ISS" item="EXPOSURE_DURATION=0"
copy l1.a l1.b
copy l1.a l1.c
 
!Set dns to 110 and replicate - set exposure to 10
f2 cas/sum2.1 l2.a func="in1+110"
label-rep l2.a 'PROP property="CASSINI-ISS" item="EXPOSURE_DURATION=10."
copy l2.a l2.b
copy l2.a l2.c
 
!Set dns to 210 and replicate - set exposure to 20
f2 cas/sum2.1 l3.a func="in1+210"
label-rep l3.a 'PROP property="CASSINI-ISS" item="EXPOSURE_DURATION=20."
copy l3.a l3.b
copy l3.a l3.c
 
!Set dns to 410 and replicate - set exposure to 40
f2 cas/sum2.1 l4.a func="in1+410"
label-rep l4.a 'PROP property="CASSINI-ISS" item="EXPOSURE_DURATION=40."
copy l4.a l4.b
copy l4.a l4.c
 
!Create list of the files created (in SRCH-format)
createfile l.list
addtofile l.list "NEXT FILE=0001"
addtofile l.list "l1.a"
addtofile l.list "l1.b"
addtofile l.list "l1.c"
addtofile l.list "l2.a"
addtofile l.list "l2.b"
addtofile l.list "l2.c"
addtofile l.list "l3.a"
addtofile l.list "l3.b"
addtofile l.list "l3.c"
addtofile l.list "l4.a"
addtofile l.list "l4.b"
addtofile l.list "l4.c"
reset l.list
typetext l.list
 
!Initialize Light Transfer File
ltgen l1.a out=casltf.out list=l.list 'GRID
momgen (l1.a,l1.b,l1.c) casltf.out  exp=0                    !LOAD LTF
momgen (l2.a,l2.b,l2.c) casltf.out  exp=10                   !LOAD LTF
momgen (l3.a,l3.b,l3.c) casltf.out  exp=20                   !LOAD LTF
momgen (l4.a,l4.b,l4.c) casltf.out  exp=40                   !LOAD LTF
let $echo="no" 
WRITE "Verify from file:  zeroed place holders"
let $echo="yes"

! get min and max for exp=0
maxmin casltf.out sl=1 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 1 max = &maxval should be &casmax1"
write "Data set line 1 min = &minval should be &casmin1"
    if (&maxval = casmax1  and &minval = casmin1) write "          ******* Line 1 passes *******"
let $echo="yes"
maxmin casltf.out sl=2 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 2 max = &maxval should be &casmax2"
write "Data set line 2 min = &minval should be &casmin2"
    if (&maxval = casmax2  and &minval = casmin2) write "          ******* Line 2 passes *******"
let $echo="yes"
maxmin casltf.out sl=3 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 3 max = &maxval should be &casmax3"
write "Data set line 3 min = &minval should be &casmin3"
    if (&maxval = casmax3  and &minval = casmin3) write "          ******* Line 3 passes *******"
let $echo="yes"
maxmin casltf.out sl=4 nl=1 maxival=maxval minival=minval
let $echo="no"
write "Data set line 4 max = &maxval should be &casmax4"
write "Data set line 4 min = &minval should be &casmin4"
    if (&maxval = casmax4  and &minval = casmin4) write "          ******* Line 4 passes *******"
let $echo="yes"

list casltf.out sl=1 ss=1 nl=4 ns=10 'nousrtim

let $echo="no"
WRITE "Verify NUM_AREA, AREAS, NUM_EXP, and EXPOSURES labels." 
let $echo="yes"

label-list casltf.out 'nousrtim

rm>
let $echo="no"
ush rm cas

ush rm a1.img a2.img a.img b1.img b2.img casltf.out d1.img d2.img l1.a l1.b l1.c
ush rm l2.a l2.b l2.c l3.a l3.b l3.c l4.a l4.b l4.c l.list ltf1.out ltf.out

disable-log
end-proc

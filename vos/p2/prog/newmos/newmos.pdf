process help=*
PARM INP    TYPE=STRING      COUNT=(1:80)
PARM OUT    TYPE=STRING      COUNT=1
PARM SIZE   TYPE=INTEGER     COUNT=4                         DEFAULT=(1,1,0,0)
PARM SL     TYPE=INTEGER     COUNT=1                         DEFAULT=1
PARM SS     TYPE=INTEGER     COUNT=1                         DEFAULT=1
PARM SB     TYPE=INTEGER     COUNT=1                         DEFAULT=1
PARM NL     TYPE=INTEGER     COUNT=1                         DEFAULT=0
PARM NS     TYPE=INTEGER     COUNT=1                         DEFAULT=0
PARM NB     TYPE=INTEGER     COUNT=1                         DEFAULT=0
PARM PIXL   TYPE=INTEGER     COUNT=(2:80)                    DEFAULT=(0,0)
PARM LCP    TYPE=INTEGER                                     DEFAULT=0
PARM SCP    TYPE=INTEGER                                     DEFAULT=0
PARM THRESH TYPE=INTEGER     VALID=(-32767:32768)            DEFAULT=1
PARM LTHRESH TYPE=INTEGER    VALID=(-32767:32768)            DEFAULT=1
PARM RTHRESH TYPE=INTEGER    VALID=(-32767:32768)            DEFAULT=1
PARM ETHRESH TYPE=INTEGER  COUNT=0:1  VALID=(0,-32767:32768) DEFAULT=--
PARM NSEQ   TYPE=INTEGER                                     DEFAULT=1
PARM LSEQ   TYPE=INTEGER                                     DEFAULT=1
PARM RSEQ   TYPE=INTEGER                                     DEFAULT=1
PARM ADAPT  TYPE=KEYWORD     COUNT=0:1     VALID=ADAPT       DEFAULT= --
PARM NOMIN  TYPE=KEYWORD     COUNT=0:1     VALID=NOMIN       DEFAULT= --
PARM NIBB   TYPE=INTEGER                                     DEFAULT=0
PARM LNIB   TYPE=INTEGER                                     DEFAULT=0 
PARM RNIB   TYPE=INTEGER                                     DEFAULT=0
PARM DCLEV  TYPE=INTEGER                                     DEFAULT=0
PARM INCR   TYPE=INTEGER                   VALID=(1:9999999) DEFAULT=10
PARM FORMAT TYPE=KEYWORD     COUNT=0:2     VALID=(BYTE,HALF) DEFAULT=--
PARM AVER   TYPE=KEYWORD     COUNT=0:1     VALID=AVER        DEFAULT= --
PARM MAP2   TYPE=KEYWORD     COUNT=0:1     VALID=MAP2        DEFAULT= --
PARM RADIUS TYPE=REAL                                        DEFAULT=0.
PARM REQ    TYPE=REAL                                        DEFAULT=0.
PARM RPOL   TYPE=REAL                                        DEFAULT=0.
PARM TARGET TYPE=KEYWORD     COUNT=0:1      DEFAULT= --  +
 VALID=(MOON,MCRY,IO,J1,EURO,J2,GANY,J3,CALL,J4,JUPI)
PARM SMOOTH TYPE=KEYWORD     COUNT=0:1      VALID=SMOOTH    DEFAULT=--
PARM WEIGHT TYPE=REAL        COUNT=(0:80)                   DEFAULT=--
!
!# parm inp(3-80) hints=default
!
END-PROC
.TITLE
  NEWMOS
.HELP
 PURPOSE:

 NEWMOS is a VICAR application program which is able to mosaic up to
 thirty pictures.  If the frames have been map- projected using VICAR
 program MAP3, then NEWMOS can automatically determine the required
 size of the output image and the offsets of all the input images.

 EXECUTION:
   There are two ways to call newmos. The simplest mosaics or averages
   all of the inputs:

        NEWMOS  INP=(inputs...)  OUT=output  SIZE  PARAM

   The second mode includes an additional set of mask images:

        MASKMOS INP=(inputs...)  OUT=(outputs...)
        NEWMOS  INP=(inputs...,outputs...)  OUT=output  SIZE  PARAM

.page  
 OPERATION:

 NEWMOS calculates where each input picture is to be replaced in the 
 output frame from the offset parameters. The program takes each line
 of the output picture and determines which input frames have lines
 which map to this line in the output. The program scans along these
 input lines from left to the right and right to the left using the 
 edge detection parameters to find the left and right extents of
 valid picture data in each of the inputs. The data between these
 points whose DN are greater than THRESH, N1 are copied to the output.

 There are three methods of weighting the input images:

Default method:

 In reverse input data set order with an earlier input overlaying
 a subsequent input much as a person mosaicking prints by hand
 will put one print on top of another (with IN1 on top). 
 No weighting is performed.
 In this method ALL THE INPUT IMAGES ARE MOSAICKED which is NOT the case
 for the SMOOTH option.

Average method:  (AVER keyword)
 
 All the images which overlap are averaged to produce the output. 
 Weighting is performed based upon the WEIGHT keyword.
 DNout=sum(DNin*WEIGHTin)/sum(WEIGHTin).
 In this method ALL THE INPUT IMAGES ARE MOSAICKED which is NOT the case
 for the SMOOTH option.

Smooth method:  (SMOOTH keyword)

 Only THE FIRST HALF OF THE INPUT IMAGES ARE MOSAICKED. The second half 
 are masks which control the weighting for the first half. The masks
 can be generated automatically with the MASKMOS program. There is
 a 1:1 correspondence between images such that for M inputs image
 M/2+1 is the mask for image 1, image M/2+2 is the mask for image 2, etc.
 The output DN value is the sum of overlapping frames weighted by their
 mask values at that point including the WEIGHT keyword.
 DNout=sum(DNin*MASKin*WEIGHTin)/sum(MASKin*WEIGHTin).
 Note that the MAP3 labels must be present for the masks too.

In general:

 All data
 in an input picture which lies outside of the output frame are
 ignored.  If from the offset parameters and the size field any
 input has been determined to lie entirely outside the output 
 frame, a warning is printed and that frame is discarded. If
 no input data has been provided to cover a particular pixel
 in the output, the program will set that output pixel to DCLEVEL.

 NEWMOS can compute the output image size and the offsets of the input
 images automatically, if the inputs have been map-projected using
 MAP3.  This option is invoked by the keyword ADAPT.

.PAGE
 
 PROGRAM HISTORY:

 WRITTEN BY: Joel Mosher        March, 12 1976
 CONVERTED TO VAX BY:  Florance Moss   Feburary, 1 1984
 CONVERTED TO VICAR2 BY:  L.W.Kamp,    27 Oct. 1985
 COGNIZANT PROGRAMMER:  L. W. Kamp
 REVISIONS:
  18 AUG 03  ntt  Enabled 3D image capability.
  02 FEB 99  rrp/hbm Modified newmos to work with upto 80 input images.
                  The current solaris system only supports a maximum
                  of 64 input files so newmos was modified to close
                  unnecessary files or close file if a max of 45 have
                  been reached.
  04 Jun 98  rrp  Removed implicit variables from main44. Declared RLCP and
                  RSCP as real*8. Also changed loop parameter in OFFSET from
                  mp_max_keywd_length to mp_number_of_keywords. Prevented
                  the use of tlat vector in any test other then CHICK.
                  Updated the call to xvparm for weight to have maxcnt of
                  60 and not 1. Initialized all variables to avoid unexpected
                  program behavior.
  10 Jul 95  crs (CRI) made portable for UNIX
  1  mar 93  jjl  New smooth option.
  22 Feb 93  LWK  Fixed AVER (when no SMOOTH) bug
  20 Feb 93  LWK  Use TRANV vice CONVEV for Simple Cylindrical because of
                  RECTPATCH problem when ADD360 has been used
  11 Dec 92  LWK  Call CONVEV instead of TRANV in order to support PERSPECTIVE
  16 Oct 92  LWK  Enabled map codes 10-16 (but NO special code added to
                  handle these -- use at your own risk!);  revised SMOOTH
		  algorithm to ignore regions where >2 images overlap
  20 Nov 91  LWK  Removed NOMIN code from Simple Cylindrical (not needed as
                   TRANV does not truncate). Also added 1 to SAMP for Mercator.
  13 Nov 91  LWK  Used NOMIN to suppress call to TRANV, in order to allow 
                   range beyond (0,360) for Cylindrical
  ???        JRY  Added parameter SMOOTH
  07 Aug 89  GMY  Fix integer overflow when averaging pixels
  22 Feb 88  SP   COMPLETED CHANGE OF 87-12-8.  ADDED 1 TO SAMP FOR 
                      NORMAL CYLINDRICAL.
  22 Feb 88  SP   CORRECTED MAP LABEL INFO FOR OUTPUT FILE.
  22 Feb 88  SP   ADDED NOMIN KEYWORD TO ALLOW MORE THAN 360 DEGREES
                      OF LONGITUDE FOR CERTAIN PROJECTIONS.  
  11 Dec 87  SP   CORRECTED SUBR. OFFSET TO USE TRANV IF LAT AND LONG
                      IN MAP2 LABEL ARE VARIABLE.
  08 Dec 87  LWK  FIXED PROBLEM WITH HALFWORD DATA:  SINCE ALL WORK
                      IS DONE IN HALFWORD, REMOVE ALL REFERENCE TO BYTES!
  30 Oct 87  LWK  INITIALIZE 'WORK' ARRAY FOR SEARCV2, REMOVED TBUF STUFF
  11 Oct 87  LWK  FIXED BUGS READING IMAGE WITH LSTART<0, & IN ADAPT
  27 Mar 87  SP   FIXED PROBLEM WHERE INPUT IMAGES WERE ALL OFFSET 1 PIXEL
                      TO THE RIGHT OF CORRECT POSITION.
  15 Jan 87  LWK  FIXED BUG IN SUBR. ADAPT
  26 Mar 86  LWK  FIXED ISWTCH BUG IN SUBR.OFFSET
  27 Oct 85  LWK  CONVERTED PARAMETER PROCESSING TO VICAR2 
                      (REQUIRED BECAUSE NI>10)
  15 Oct 85  LWK  FINISHED VICAR2 CONVERSION (I/O ONLY) 
                      INCREASE # INPUT FILES TO 30
  26 Sep 85  HBD  CONVERTED I/O TO VICAR2
  24 Jan 84  FFM  CONVERT TO VAX
  Joel Mosher changes:
     10/8/75 FIX BUG IN WRITEING LABEL INTO PIX DATA
     10/16/75 PUT IN INCREMENT IN EDGE SEARCH
     10/30/75 FIX BUG IN BCDBIN(NOSAMP CONFUSED WOTH NOLINE)
     12/12/75 OS VERSION SET ALL VARIABLES TO ZERO
     1/26/76 FIX BUG IN INITIALIZING NSI
     1/26/76 PUT IN ERROR MESSAGE FOR NUMBER OF OFFSETS VS INPUTS
     6/2/76 FIX BUG IN ALLOCATION OF BUFFER SPACE
     1/29/78 PUT IN LABEL SEARCHING FOR OFFSETS
     1/30/78 LET SYSTEM ALLOCATE OUTPUT ALTERNATE BUFFER
     2/7/78 FIXED NIBBLE MISTAKE ,LNIB&RNIB REVERSED
     2/7/78 PUT IN THRESH TEST FOR OUTPUT BUFFER
     2/7/78 CHANGED THRESHOLDING
     2/19/78 PUT IN MAP2 LABEL UPDATE
     2/20/78 PUT IN PICTURE COMPATABILITY CHECKING
     3/26/78 PUT IN AVERAGING OPTION
     8/9/78 OVERLAID
     8/14/78 FIXED HALFWORD WRITE BUG
     12/31/78 PUT IN JUPITER RADIUS
     2/10/79 PUT IN CYLINDRICAL PROJECTION
     5/27/80 FIXED BUG IN OVERRIDE OF RADII
     12/28/80 USE 77 LABEL FORMAT TO GET NL AND NS
     12/29/80 CHANGE ALL CLOSES FROM 0 TO 1 TO BACKSPACE POSSIBLE
             TAPE INPUT DATA SETS
     4/19/81 PUT IN NORMAL CYLINDRICAL PROJECTION
     7/17/81 CHANGE RADII OF JUPITERS SATELLITES
     11/25/81 READ FORMAT PARAMTER IN SYSTEM LABEL AGAIN
     12/23/81 FIX ERROR IN HALF/BYTE SWITCH
     6/20/82 FIX WRAPAROUND PROBLEM IN ADAPT SUBROUTINE
     12/23/82 PUT IN FIX TO GIVE SCP LESS THAN 1 CIRCUMFERENCE
     2/20/83 FIX WRAPAROUND PROBLEM IN ADAPT AGAIN

.LEVEL1 
.VARIABLE INP
  input VICAR labelled files
.VARIABLE OUT
  output VICAR labelled file
.VARIABLE SIZE
  standard VICAR size field
.VARIABLE SL
  starting line of the SIZE
  field
.VARIABLE SS
  starting sample of the size
  field
.VARIABLE SB
  starting band of the size
  field
.VARIABLE NL
  number of lines of the size 
  field
.VARIABLE NS
  number of samples of the size
  field.
.VARIABLE NB
  number of bands of the size
  field.
.VARIABLE PIXL
  locations of the common point
  in the input files
.VARIABLE LCP
  the line of the common point
  in OUT
.VARIABLE SCP
  the sample of the common point
  in OUT
.VARIABLE THRESH
  the lower DN used in finding
  the input's edge
.VARIABLE LTHRESH
  left threshold DN value
.VARIABLE RTHRESH
  right threshold DN value
.VARIABLE ETHRESH
  both the left and right
  thresholds
.VARIABLE NSEQ
  the number of consecutive
  elements >= THRE
.VARIABLE LSEQ
  the number of consecutive
  elements >= LTHR 
.VARIABLE RSEQ
  the number of consecutive
  elements >= RTHR
.VARIABLE ADAPT
 Common points and output image
 size are computed automatically.
.VARIABLE NOMIN
 Used to prevent minimizing the
 output number of samples.
.VARIABLE NIBB
  the number of edge pixels to
  be nibbled
.VARIABLE LNIB
  the number of left edge pixels
  to be nibbled
.VARIABLE RNIB
  the number of right edge 
  pixeles to be nibbled
.VARIABLE DCLEV
  the background DN value
.VARIABLE INCR
  sample increment to find
  an edge
.VARIABLE FORMAT
  output file data format
.VARIABLE AVER
  average the DN in the output
  overlapping area
.VARIABLE MAP2
  indicates all inputs have MAP2
  labels.
.VARIABLE RADIUS
  specifies the radius of the
  target planet.
.VARIABLE REQ
  specifies the equatorial
  radius of the body.
.VARIABLE RPOL
  specifies the polar radius of
  the body.
.VARIABLE TARGET
  Target body.
  Valid: MOON,MCRY,IO,J1,
  EURO,J2,GANY,J3,CALL,J4.
.VARIABLE SMOOTH
  the overlapping area is
  weighted in its calculation
.VARIABLE WEIGHT
  Weight for each input.
  Defaults to 1.
.LEVEL2
.VARIABLE INP
  input file names (can be byte,halfword). The order
  in which the input data sets are specified determines
  the order of preference of the data at any pixel, i.,e.,
  the data in INP(1) has precedence over all other data
.VARIABLE OUT
  output file name (can be byte, halfword)
.VARIABLE SIZE
  the standard VICAR size field (only NL and NS are used
  and refer to the output picture size.) In the adaptive
  mode NL and NS refer to the maximum size of the output
  picture
.VARIABLE SL
  Starting line of the size field--ignored
.VARIABLE SS
  Starting sample of the size field--ignored
.VARIABLE NL
  Number of lines in the size field or maximum size of the
  output picture.
.VARIABLE NS
  Number of samples in the size field or maximum size of the
  output picture.
.VARIABLE PIXL
  PIXL=(line1,samp1,line2,samp2,....,lineN,sampN)  

  where (lineI,sampI) are the location in integer line and sample
  in the Ith input picture of a point common to all the pictures.

  (See LCP, SCP, which give the corresponding location in the output
  picture.)
.VARIABLE LCP
  lcp=line     LCP is a keyword followed by an integer specifying
  the line position in the output picture of the common point referred
  to by the PIXL param
.VARIABLE SCP
  scp=samp     SCP is a keyword followed by an integer specifying the 
  sample position in the output picture of the common point referred
  to by the PIXL param
.VARIABLE THRESH
  thre=n1      the integer N1 is the lower threshold DN value used
  in finding the edge of the input picture. (the default is 1) 
  a valid picture edge is not found until NSEQ=N4 consequtive
  pixels of DN greater than THRE=N1 have been found. 
.VARIABLE LTHRESH
  lthr=n2      control the left/right threshold DN values individually.
  The program searches the picture inward from each edge to find
  a specified number of consecutive pixels above a certain threshold
  DN. The nominal threshold is specified by the keyword THRESH. If
  either of the keywords LTHRESH/RTHRESH is specified, it overrides
  the nominal value only for the left/right edge of the picture. 
.VARIABLE RTHRESH
  rthr=n3      control the left/right threshold DN values individually.
  The program searches the picture inward from each edge to find
  a specified number of consecutive pixels above a certain threshold
  DN. The nominal threshold is specified by the keyword THRESH. If
  either of the keywords LTHRESH/RTHRESH is specified, it overrides
  the nominal value only for the left/right edge of the picture. 
.VARIABLE ETHRESH
  ethr=n3       sets both the left and right thresholds. ETHRESH can be
  used when the edge detection thresholds are to be different from 
  the picture threshold THRESH=N1.
.VARIABLE NSEQ
  nseq=n4       the integer N4 is the number of consecutive picture 
  elements which must be greater than or equal to the lower threshold
  DN for a valid picture edge to be found. 
.VARIABLE LSEQ
  lseq=n5       the parameters LSEQ/RSEQ allow the user to control the
  left/right threshold triggers individually. The program searches each
  input picture inward from the left/right edge until it finds LSEQ/RSEQ
  consecutive pixels which are greater than the threshold DN LTHR/RTHR. 
  The nominal search values are specified by the parameter NSEQ. If either
  of the keywords LSEQ/RSEQ is specified, then it overrides the nomial
  (NSEQ) search value only for the left/right edge of the picture.
.VARIABLE RSEQ
  rseq=n6       the parameters LSEQ/RSEQ allow the user to control the
  left/right threshold triggers individuallt. The program searches each
  input picture inward from the left/right edge until it finds LSEQ/RSEQ
  consecutive pixels which are greater than the threshold DN LTHR/RTHR. 
  The nominal search values are specified by the parameter NSEQ. If either
  of the keywords LSEQ/RSEQ is specified, then it overrides the nomial
  (NSEQ) search value only for the left/right edge of the picture.
.VARIABLE ADAPT
  ADAPT is a keyword which specifies that the input pictures have
  been map projected by MAP2 and that NEWMOS should attempt to just fit
  all the input pictures into the output picture.   The ADAPT keyword is
  similar to  the MAP2 keyword and implies the MAP2 keyword.  The difference
  between the ADAPT and MAP2 keywords is that when ADAPT is specified, NEWMOS 
  will determine the LCP and SCP parameters and change the size of the output
  picture to whatever size is necessary to fit all input pictures.  This 
  size will not be greater than the size specified in the VICAR size field.
  The default is to specify LCP, and SCP and create an output picture 
  of the size specified in the VICAR size field. If the output picture 
  should be bigger than NL * NS to contain all the input pictures the number 
  of lines and samples will be truncated.

  For Mercator, normal cylindrical, and simple cylindrical projections,
  the number of samples for the output image is determined by one of two
  ways.  By default, the program searches for the largest gap between the
  input images in the longitude direction.  It then uses the ends of the gap
  as the left and right edges of the output image.  Thus the output image
  contains all longitudes except for those in the largest gap.  This is done to
  minimize the size of the output image.  If there is no gap, the number of
  samples is set to correspond to 360 degrees of longitude.  However, if the
  NOMIN keyword is specified, no attempt to minimize the number of samples is
  made, and it is possible to have more than 360 degrees of longitude in the
  output image. 
.VARIABLE NOMIN
  If the NOMIN keyword is specified, no attempt to minimize the number of
  samples is made, and it is possible to have more than 360 degrees of
  longitude in the output image.  This applies to both adaptive algorithm
  (see HELP ADAPT) and to the Normal Cylindrical case.  For other map
  projections, the range of longitudes can exceed 0-360 degrees by 
  adjusting the SAMPLE value of the MAP labels, but for Normal Cyl., this
  does not suffice:  NOMIN must also be specified.
.VARIABLE NIBB
  nibb=n7            The integer N7 specifies the number of pixels in from
  the edge of the picture to be set to a DCLEVEL. This parameter is designed
  to remove the interpolation at picture edges caused when LGEOM interpolates
  across a step function. (The default=0)
.VARIABLE LNIB
  lnib=n8            The integers N8/N9 specify the number of pixels to be 
  set to zero or to DCLEVEL at the left/right edge of the picture.  These para-
  meters override the parameter NIBB. (The default is N8=N9=N7) 
.VARIABLE RNIB
  rnib=n9            The integers N8/N9 specify the number of pixels to be 
  set to zero or to DCLEVEL at the left/right edge of the picture.  These para-
  meters override the parameter NIBB. (The default is N8=N9=N7) 
.VARIABLE DCLEV
  dcle=n10           The integer N10 specifies the background DN level N10 
  of all the pixels in the output picture which are not overlaid by input
  picture data. (The default=0)
.VARIABLE INCR
  incr=n11           The integer N11 specifies the frequency of sampling
  pixels in each line of each input picture to test for an edge. (The default
  is to sample every tenth pixel.) This option was put in to speed up the
  program.

.VARIABLE FORMAT
  FORMAT is a keyword which specifies the data type of the output
  files (HALF or BYTE). Default is that the output file has the same
  format as the input files.

.VARIABLE AVER
  AVER is a keyword specifying that the output mosaic should use the average
  of the DN's of pixels which have DN's greater then THRESH.
  Weighting is performed according to the weight keyword.
  DNout=sum(DNin*WEIGHTin)/sum(WEIGHTin).

.VARIABLE SMOOTH
  Invokes the smooth option. In this mode the first half of the images
 are mosaicked using the second half of the images as weighting masks.
 See program MASKMOS to create the masks for you.
 DN_out= sum( DN_in * DN_mask *Weight_in) / sum( DN_mask * Weight_in)

.VARIABLE WEIGHT
  Specifies the weighting of input images in the mosaic.
  Only used in the AVER and SMOOTH options.
  Specify only one weight per input image. 
  In the SMOOTH option weights need only be
  provided for the first 1/2 of the images.
  Defaults to 1.0 for each input.
  For usage see the AVER and SMOOTH keywords.
  Example:  weight=(1.0,2.0,1.2)

.VARIABLE MAP2
  MAP2 is a keyword specifying that all the inputs have VICAR labels which
 contain all the information necessary to define the cartography of the input
 pictures. If this keyword is specified the user should not have done any
 other geometric transformation on the pictures after the MAP2 projection
 (including size field operations). The output label will be updated. 
 (See also the ADAPT parameter.)  If MAP2 is specified but ADAPT is not 
 specified, then LCP and SCP should be specified but PIXL should not be
 specified.   (For normal and simple cylindrical projections, LCP and SCP
 correspond to LAT=0 and LONG=0.)
 The default is to specify all the offsets for all the input pictures.
.VARIABLE RADIUS
  radi=r1              RADIUS is a keyword and R1 is a floating point number
  specifying the radius (in km.) of the planet being mosaicked. This is
  necessary only when the MAP2 keyword is specified and the frames are
  Mercator projected. 
.VARIABLE REQ
  req=r2              REQ and RPOL are keywords similar to RADIUS but refer to 
  the Equatorial and Polar Radius. 
.VARIABLE RPOL
  rpol=r2              REQ and RPOL arre keywords similar to RADIUS but refer
  to the Equatorial and Polar Radius. 
.VARIABLE TARGET
 Specifies the target body and thereby the radii used by the program.
 Valid: MOON,MCRY,IO,J1,EURO,J2,GANY,J3,CALL,J4,JUPI.

  MOON: specifies that REQ and RPOL are 1738.09 km 
  MCRY: specifies that REQ and RPOL are 2439.0 km (the radius of Mercury)
  IO or J1: specify that REQ and RPOL are set to 1829. km (the radius of Io)
  EURO or J2: specify that REQ and RPOLE are set to 1500. km (the radius
    of Europa)
  GANY or J3: specify that REQ and RPOL are set to 2635. km (the radius
    of Ganymede)
  CALL or J4: specify that REQ and RPOL are set to 2500. km (the radius
    of Callisto)
  JUPI: specified that REQ = 71,400 km, and RPOL = 66,773 (the values for
    Jupiter)
.end

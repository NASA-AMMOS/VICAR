C*   08 MAY 95   ...CRI...    MSTP S/W CONVERSION (VICAR PORTING)
C*   10 JUL 91   ...CCA...    Modified to use new VOLABV2
C*   19 AUG 88   ...HBM...    Fixed intercept for LO gain images
C*   10 JUN 84   ...CCA...    CONVERT TO VAX
C*   10 APR 81   ...GMY...    FIX ASTRTCH OPTION FOR LOW GAIN
C*   19 OCT 79    ...GMY...    INITIAL RELEASE
	INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44
C         SOS (A,COEF) (B,HIS)
      IMPLICIT INTEGER(A-Z)
      COMMON/C1/SCALE,SKALE,LPER,HPER,LEXC,HEXC
      COMMON/C1/CAMERA,FILTER,GAIN,OFFSET,NOISE,IHIST,PRINT,DCODE,I,DBUG
      COMMON/C1/MODE,ISCALE,K,Y1,Y2,LINC,SINC,NLRC,REC,VIKING
      COMMON/C1/SLO,SSO,NLO,NSO,NI,NO
      COMMON/C1/BUF(1820),OBUF(1820),LINE,COEF(3641),HIS(4096)
      CHARACTER*72 LBL
      INTEGER*2 BUF,OBUF,COEF,LINE
      REAL*4 SCALE,SKALE,LPER,HPER,S,INTER
      INTEGER LMASK,RMASK
C
C  THE GENERAL FORM OF THE TRANSFORMATION IS
C
C          OUT =  S * ( M*(IN-K) + 256*(B-Y1) )
C
C        WHERE S  = SCALE/4096,    IF MODE=1 (SCALE OPTION)
C              Y1 = 0
C
C              S  = 1/(Y2-Y1)      IF MODE=2 (ASTRETCH OPTION)
C
C              M,B ARE THE SOSGEN COEFFICIENTS (4096*SLOPE,16*OFFSET)
C              K IS THE DC OFFSET
C              Y1,Y2 ARE 16*UPPER AND 16*LOWER BOUNDS FOR ASTRETCH
C
      DATA LMASK/35/,RMASK/1170/

      CALL IFMESSAGE('SOS version 08-MAY-95')
      CALL XVUNIT(IU,'INP',1,IST,' ')
      CALL XVOPEN(IU,IST,'U_FORMAT','HALF','IO_ACT','SA',
     +                  'OPEN_ACT','SA',' ')
      CALL XVGET(IU,IST,'PIX_SIZE',ICODE,'NL',NLO,'NS',NSO,' ')
      IF(ICODE .NE. 1) THEN
	CALL XVMESSAGE('SOS WORKS ON BYTE DATA ONLY',' ')
	CALL XVCLOSE(IU,IST,' ')
	CALL ABEND
      END IF
C
      OCODE = 1
      NLEV = 256
      CALL SOSPAR(IU,CU,*990)

      IF(DBUG.EQ.1) CALL PRNT(7,4,SCALE,'SCALE.')
      IF(DBUG.EQ.1) CALL PRNT(4,26,CAMERA,'CAMERA.')
      NS4 = 2 * NSO + 1
C-------OPEN OUTPUT FILE
      CALL XVUNIT(OU,'OUT',1,IST,' ')
      CALL XVOPEN(OU,IST,'U_NL',NLO,'U_NS',NSO,'OP','WRITE',
     +          'IO_ACT','SA','OPEN_ACT','SA',
     +          'O_FORMAT','BYTE','U_FORMAT','HALF',' ')
C
      LBL='SOS - SCALE='
      IF (DBUG .EQ. 1) CALL PRNT(2,30,COEF,'COEF.')
      IF (MODE .EQ. 2) GOTO 70
C
C          NOSTRETCH
      ISCALE = ISCALE * SCALE
      IF (SKALE .NE. 0.) THEN
        SCALE = 1024. * SKALE / ISCALE
        ISCALE = 1024. * SKALE
      END IF
      S = SCALE / 4096.
      GOTO 90
C
C          ASTRETCH
   70 IF (Y1 .NE. 0 .OR. Y2 .NE. 0) GOTO 88
      HSS = 1
      HNS = NSO
      IF (VIKING .EQ. 0) GOTO 72
      HSS = LMASK 
      HNS = RMASK - LMASK + 1
C
C------------------------------------------------------------------
C-----COMPUTE HISTOGRAM
C-----IT WILL BE 16 TIMES NORMAL LENGTH NLEV=4096
C
72    LL = 0
      DO 82 L=LINC,NLO,LINC
        LL = LL + LINC
	CALL XVREAD(IU,BUF,IST,'LINE',LL,'NSAMPS',NSO,'SAMP',HSS,' ')
	CALL XVREAD(CU,LINE,IST,'LINE',REC+LL,'NSAMPS',NS4,' ')
        IF(LINE.NE.LL) GOTO 910
        IF(GAIN.EQ.0)then
	  hns1 = hns/(2*sinc)	! DIV takes number of operations
	  CALL DIVV(-6,HNS1,2,COEF(2*HSS),0,2*SINC)
	endif
   82 CALL HTRAN(BUF,COEF(HSS),HIS,K,SINC,HNS)
C
C-----CALC UPPER AND LOWER LIMITS (16 TIMES NORMAL VALUES)
   84 CALL ASTRCH(HIS,Y1,Y2,LPER,HPER,16*NLEV)
      IF(IHIST.EQ.0) GOTO 88
      II = 0
C
C-----SQUEEZE HISTOGRAM TO NORMAL SIZE
      DO 86 I=1,4096,16
        II = II + 1
   86 CALL SUMV(4,16,HIS(I),HIS(II),1,1)
C
C-----PRINT CORRRECTED BUT UNSTRETCHED HISTOGRAM
      CALL SUMV(4,NLEV,HIS,NFREQ,1,1)
      CALL PHIST(HIS,NFREQ,0,NLEV-1,0,0)
C
   88 S = 1. / (Y2-Y1)
      LBL(19:33)='STRETCH ***-***'
      WRITE (LBL(27:29),'(I3)') Y1/16
      WRITE (LBL(31:33),'(I3)') Y2/16
C
C-----ADD HISTORY LABEL
   90 WRITE (LBL(13:17),'(F5.2)') ISCALE/1024.
      CALL XLADD(OU,'HISTORY','COMMENT',LBL,IST,'ULEN',72,
     1           'FORMAT','STRING',' ')
C
C-----------------------------------------------------------------
C-----PERFORM CORRECTION AND COLLECT OUTPUT HISTOGRAM
      IF(NO .EQ. 2 .OR. PRINT .EQ. 1) CALL ZIA(HIS,NLEV)
      LL = 0
      IF(GAIN .EQ. 0) Y1 = 2 * Y1
C
      CALL XVMESSAGE('OUT =  S * ( M*(IN-K) + INTERCEPT*(B-Y1) )',' ')
      INTER = 256.
      IF (GAIN .EQ. 0) INTER = 128.
      call prnt(7,1,S,'S = .')
      call prnt(4,1,K,'K = .')
      call prnt(7,1,INTER,'INTERCEPT = .')
      call prnt(4,1,Y1,'Y1 = .')
      call prnt(4,1,NOISE,'NOISE = .')

      DO L = 1, NLO
        LL = LL + 1
	CALL XVREAD(IU,BUF,IST,'LINE',LL,'NSAMPS',NSO,' ')
	CALL XVREAD(CU,LINE,IST,'LINE',REC+LL,'NSAMPS',NS4,' ')
        IF(LINE.NE.LL) GOTO 910
        CALL STRAN(BUF,COEF,OBUF,NSO,Y1,K,S,NOISE,INTER)
        IF(NO.EQ.2.OR.PRINT.EQ.1) CALL HSUB(OCODE,NSO,OBUF,HIS,0,255)
        CALL XVWRIT(OU,OBUF,IST,'NSAMPS',NSO,' ')
      END DO
C-------------------------------------------------------------------
C-----EXCLUDE PARTS OF HISTOGRAM
      N = HEXC - LEXC + 1
      IF(LEXC.GE.0 .AND. N.GT.0) CALL ZIA(HIS(LEXC+1),N)
      CALL SUMV(4,NLEV,HIS,NFREQ,1,1)
      IF (PRINT .EQ. 1) CALL PHIST(HIS,NFREQ,0,NLEV-1,0,0)
      IF (NO .EQ. 2) THEN
		CALL XVUNIT(HU,'OUT',2,IST,' ')
		CALL XVOPEN(HU,IST,'U_NL',1,'U_NS',256,'OP','WRITE',
     +			    'O_FORMAT','FULL','U_FORMAT','FULL',' ')
		CALL XVWRIT(HU,HIS,IST,'NSAMPS',256,' ')
		CALL XVCLOSE(HU,IST,' ')
      END IF
      CALL XVMESSAGE('SOS TASK COMPLETED',' ')
      CALL XVCLOSE(IU,IST,' ')
      CALL XVCLOSE(CU,IST,' ')
      CALL XVCLOSE(OU,IST,' ')
      RETURN
C
  910 CALL XVMESSAGE('**LINE SEQUENCING ERR--COEF',' ')
      CALL PRNT(2,NS4,LINE,'LINE.')
  990 CALL PRNT(4,26,CAMERA,'CAMERA.')
      CALL XVMESSAGE('**SOS TASK CANCELLED',' ')
      CALL XVCLOSE(IU,IST,' ')
      CALL XVCLOSE(CU,IST,' ')
      CALL XVCLOSE(OU,IST,' ')
      CALL ABEND
      END
C************************************************************************
      SUBROUTINE SOSPAR(IU,CU,*)
      IMPLICIT INTEGER(A-Z)
      COMMON/C1/SCALE,SKALE,LPER,HPER,LEXC,HEXC
      COMMON/C1/CAMERA,FILTER,GAIN,OFFSET,NOISE,IHIST,PRINT,DCODE,I,DBUG
      COMMON/C1/MODE,ISCALE,K,Y1,Y2,LINC,SINC,NLRC,REC,VIKING
      COMMON/C1/SLO,SSO,NLO,NSO,NI,NO
      COMMON/C1/BUF(1820),OBUF(1820),LINE,COEF(3641),HIS(4096)
      CHARACTER*20 DUM(2)
      INTEGER*2 BUF,OBUF,COEF,LINE,FILTAB(7),CAMTAB(5),DCTAB(5)
      INTEGER PAR(40),Y(2),SECS
      REAL*4 SCALE,SKALE,LPER,HPER,R,LOW(5),HIGH(5)
C      EQUIVALENCE (PAR,OBUF)
C
C          DEFAULT PARAMETERS
      DATA FILTAB/0,0,4,0,0,0,0/,CAMTAB/0,0,1,2,3/
      DATA DCTAB/35,0,42,52,57/
      DATA LOW/2.,2.,2.,2.,1./
      DATA HIGH/2.,2.,1.,2.,1./
      LOGICAL XVPTST

      CALL ZIA(CAMERA,20)
      NOISE = 0
      DCFLG = 0
      LPER = -1.
      HPER = -1.
      SCALE = 1.
      SKALE = 0.
      SLO = 1
      SSO = 1

C-------GET NUMBER OF INPUTS AND OUTPUTS
      CALL XVPARM('INP',DUM,NI,IDEF,2)
      CALL XVPARM('OUT',DUM,NO,IDEF,2)

C-----CHECK FOR VIKING LABEL
      CALL VOLABV2(IND,IU,PAR)			! Get info from label.
      IF (IND .EQ. 0) THEN
         IF(PAR(2).LT.4.OR.PAR(2).GT.8.OR.PAR(2).EQ.5) GOTO 1
         VIKING = 1
         CAMERA = PAR(2)
         FILTER = PAR(8)
         GAIN = PAR(11)
         OFFSET = PAR(12)
      END IF
C
1     continue
      IF(XVPTST('ASTRETCH')) MODE = 2		! ASTRETCH mode. Default mode.
      IF(XVPTST('NOSTRETC')) MODE = 1		! NOSTRETCH mode.
      DBUG  = XVPTST('DBUG')			! DEBUG mode.
      PRINT = XVPTST('PHIST')			! Print Histogram
      IHIST = XVPTST('IHIST')			!
C
      IF(XVPTST('NOISE')) THEN		!MAKE RAN SEED
        CALL XVPARM('TNOISE',I,ICNT,IDEF,1)	! get test noise value if
        IF(IDEF .EQ. 0) THEN			! present
          NOISE = I
        ELSE
	   CALL GET_SECONDS(SECS)		!GET SECONDS SINCE 12
	   NOISE = 120135. + FLOAT(SECS)	!ADD TO LARGE NUMBER
	   NOISE = 2 * NOISE + 1		!MAKE SURE IS ODD
        END IF
      END IF
C
      CALL XVPARM('CAMERA',I,ICNT,IDEF,1)	! Override CAMERA S/N from
      IF(IDEF .EQ. 0) THEN			! label
        CAMERA = I
	VIKING = 1
      END IF
C
      CALL XVPARM('FILTER',I,ICNT,IDEF,1)	! Override FILTER from label
      IF(IDEF .EQ. 0) FILTER = I
C
      CALL XVPARM('GAIN',I,ICNT,IDEF,1)		! Override GAIN from label
      IF(IDEF .EQ. 0) GAIN = I
C
      CALL XVPARM('OFFSET',I,ICNT,IDEF,1)
      IF(IDEF .EQ. 0) OFFSET = I
C
      CALL XVPARM('DC',I,ICNT,IDEF,1)		! DC value to subtract if
      IF(IDEF .EQ. 0) THEN			! DC offset was off
	K = I
	DCFLG = 1
      END IF
      CALL XVPARM('LPERC',R,ICNT,IDEF,1)	! Stretch lower percent of DN's
      IF(IDEF .EQ. 0) LPER = R
C
      CALL XVPARM('HPERC',R,ICNT,IDEF,1)	! Stretch upper percent of DN's
      IF(IDEF .EQ. 0) HPER = R
C
      CALL XVPARM('STRETCH',Y,ICNT,IDEF,2)
      IF(IDEF .EQ. 0) THEN
	Y1 = 16*Y(1)
	Y2 = 16*Y(2)
	MODE = 2 
      END IF

      CALL XVPARM('LINC',LINC,ICNT,IDEF,1)
      CALL XVPARM('SINC',SINC,ICNT,IDEF,1)
      CALL XVPARM('EXCLUDE',LEXC,ICNT,IDEF,2)
C
      CALL XVPARM('SCALE',R,ICNT,IDEF,1)
      IF(IDEF .EQ. 0) THEN
	SCALE = R
	MODE = 1
      END IF
C
      CALL XVPARM('SKALE',R,ICNT,IDEF,1)
      IF(IDEF .EQ. 0) THEN
	SKALE = R
	MODE = 1
      END IF
C
C          CHECK VIKING CALIBRATION FILE
      CALL XVUNIT(CU,'INP',2,IST,' ')
      CALL XVOPEN(CU,IST,'IO_ACT','SA','OPEN_ACT','SA',' ')
      CALL XVREAD(CU,COEF,IST,'LINE',1,'NSAMPS',30,' ')
      REC = 1
      IF (VIKING .NE. 0) THEN
        IF (CAMERA.LT.4 .OR. CAMERA.GT.8) GOTO 900
        IF (LPER .LT. 0.) LPER = LOW(CAMERA-3)
        IF (HPER .LT. 0.) HPER = HIGH(CAMERA-3)		! If HPER not given
        IF (OFFSET .EQ. 1) K = 0			! If offset off
        IF (OFFSET .EQ.0 .AND. DCFLG.EQ.0) K = DCTAB(CAMERA-3)*(GAIN+1)
        ICAM = CAMTAB(CAMERA-3)
        IF (COEF(1).NE.4 .OR. COEF(2).NE.4) GOTO 40
        REC = 1057*(FILTAB(FILTER)+ICAM) + 1
        CALL XVREAD(CU,COEF,IST,'LINE',REC,'NSAMPS',30,' ')
      END IF
C
   40 ISCALE = COEF(15)
      IF (LPER .LT. 0.) LPER = 3.
      IF (HPER .LT. 0.) HPER = 3.
      IF (DCODE .EQ. 0) DCODE = COEF(17)
      RETURN
C
  900 CALL XVMESSAGE('**INVALID CAMERA S/N',' ')
      RETURN1
      END
************************************************************************
	SUBROUTINE STRAN(BUF,COEF,OBUF,NSO,Y1,K,S,SEED,INTER)
C-------THIS ROUTINE IS THE PIXEL LOOP WHICH COMPUTES THE
C-------OUTPUT PIXEL VALUES FROM THE COEF, INPUT, SCALE ETC
C-------IF THE SEED IS NOT ZERO, A FRACTION OF A DN OF RANDOM
C-------NOISE WILL BE ADDED TO THE OFFSET.  IF GAIN=0 USE AN
C-------INTERCEPT OF 128.
	INTEGER*2 COEF(3641),BUF(1820),OBUF(1820)
	INTEGER*4 K,Y1,SEED
	REAL*4 M,INTER,RANNUM
C
	DO I=1,NSO
	   J = 2*I
	   M = float(COEF(J-1))
	   B = float(COEF(J)-Y1)
	   IF(SEED .NE. 0) THEN
              CALL RANGEN(SEED,RANNUM)
              B = B + RANNUM
           END IF
	   X = float(BUF(I) - K)
	   E = S * (M*X + INTER*B) + 0.5
	   IF(E .GT. 255.) E = 255.
	   IF(E .LT. 0.)   E = 0.0
	   OBUF(I) = E
	END DO
       	RETURN
	END
	SUBROUTINE HTRAN(BUF,COEF,HIS,K,SINC,NS)
C-------THIS ROUTINE WILL COMPUTE A HISTOGRAM OF A SUBSET OF
C-------THE CORRECTED PIXEL VALUES.  THE VALUES ARE CALCULATED
C-------AS 16 TIMES THEIR NORMAL VALUES, SO THE HISTOGRAM IS 
C-------16 TIMES THE NORMAL SIZE AND UPPER AND LOWER LIMITS
C-------DERIVED FROM IT ARE 16 TIMES NORMAL.
	INTEGER*2 COEF(3641),BUF(1820)
	INTEGER*4 HIS(4096),SINC
	REAL*4 M
C
	DO I=SINC,NS,SINC
		J = 2*I
		M = float(COEF(J-1))
		B = float(COEF(J))
		X = BUF(I) - K
		N = nint(M * X / 256. + B + 0.5)
		IF(N .LT. 0) N = 0
		IF(N .GT. 4095) N = 4095
	 	HIS(N+1) = HIS(N+1) + 1
	END DO
	RETURN
	END

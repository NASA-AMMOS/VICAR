process help=*
PARM	INP	TYPE=STRING	
PARM	OUT	TYPE=STRING
PARM	SIZE	TYPE=INTEGER	COUNT=4        DEFAULT=(1,1,0,0)
PARM	SL	TYPE=INTEGER			DEFAULT=1
PARM	SS	TYPE=INTEGER			DEFAULT=1
PARM	SB	TYPE=INTEGER			DEFAULT=1
PARM	NL	TYPE=INTEGER			DEFAULT=0
PARM	NS	TYPE=INTEGER			DEFAULT=0
PARM	NB	TYPE=INTEGER			DEFAULT=0
PARM	NLW	TYPE=INTEGER			DEFAULT=15
PARM	NSW 	TYPE=INTEGER			DEFAULT=15
PARM	RANGE	TYPE=INTEGER	COUNT=(0:2)	DEFAULT=--
PARM	SCALE	TYPE=INTEGER	COUNT=2		DEFAULT=(0,1)
PARM	DIVIDE	TYPE=INTEGER	COUNT=0:1	DEFAULT=--
PARM 	WEIGHTS	TYPE=INTEGER	COUNT=0:500	DEFAULT=--
PARM	SYMM KEYWORD VALID=(NONSYMME,ASYMMETR) COUNT=(0:1) DEFAULT=--
PARM	DNMAX	TYPE=INTEGER	COUNT=0:1	DEFAULT=--
PARM	DNMIN	TYPE=INTEGER	COUNT=0:1	DEFAULT=--
PARM    OFORM   KEYWORD  COUNT=0:1   VALID=(BYTE,HALF)  DEFAULT=--
PARM    PARMS   TYPE=(STRING,100) COUNT=0:1   DEFAULT=--
END-PROC
.TITLE
VICAR1 PROGRAM "FILTER"
.HELP
PURPOSE:

"FILTER" is a VICAR applications program which performs two-dimensional
convolution filtering.  For each output sample, the program computes
a weighted average of a rectangular set of input pixels followed by
a linear transformation.  "FILTER" may be used to perform high-pass or 
low-pass filtering.

The following system procedure will invoke "FILTER":

  FILTER2 - first invoked program "FIL2", which generates a proper set
        of weights, and then "FILTER".

It is recommended that the user normally calls the above procedure
rather than "FILTER" directly.

.page
EXECUTION:

   The following is the execution statement format for "FILTER":

             FILTER INP=PIX OUT=OPIX PARAMS

   where INP, OUT, and PARAMS are parameters discussed in their res-
pective parameter sections. 

OPERATION:

Before "FILTER" can be used a proper set of weights must be generated for
the camera system which took the picture.  These weights are usually 
generated by the weight generator program "FIL2" (invoked by procedure
"FILTER2").
.page
"FILTER" accepts as input a rectangular set of weights and calculates each
output point FP(l,s) as follows:
               nlw nsw 
    TP(l,s) = SUM SUM  P[l-(nlw+1)/2 + i , s-(nsw+1)/2 + j] * W(i,j)
               i=1 j=1
and
    FP(l,s) = A + B * TP(l,s) /  D
where
	P  	is the input file
	W	is the weight matrix
	nlw 	is the number of lines in the weight matrix
	nsw  	is the number of samples in the weight matrix
	A,B	are the two scaling inputs
	D	is the parameter for scaling
.PAGE
RESTRICTIONS:

1) Maximum number of output samples per line is 4096.
2) For asymmetric FILTERs, NW = NLW*NSW must not exceed 4096.
3) For symmetric or vertically symmetric FILTERs, NW = NSW * (NLW+1)/2
	must not exceed 4096.
.PAGE
EXAMPLES:

1) FILTER IN OUT
   The file will be filtered by the default set of weights.

2) FILTER IN OUT NLW=3 NSW=5 WEIGHTS=(0,-1,-2,-1,-2,10)
   The file will be filtered with the weight table shown below:
         0   -1   -2   -1   0
	-1   -2   10   -2   -1
	 0   -1   -2   -1   0
   The final linear transformation is
		FP(L,S) = 0 + 1*TP(L,S) / 6
   where 6 is the default for the DIVIDE parameter, (i.e., the sum of the
   entries in the weight table).

3) FILTER IN OUT NLW=3 NSW=5 SCALE=(-30,1) DIVIDE=3 +
	WEIGHTS=(0,-1,-2,-1,-2,10)
   This is the same as the example above except the final transformation is 
   given by:
		FP(L,S) = -30 + 1*TP(L,S) / 3

4) FILTER IN OUT NLW=3 NSW=5 'NONS 'HALF DNMIN=-15 +
	WEIGHTS=(-2,5,4,3,-1,-5,20,3,1,1)
   These parameters generate the horizontally nonsymmetric weights shown
   below:
   	 -2   5   4   3   -1
	 -5  20   3   1    1
	 -2   5   4   3   -1
   and the halfword output will be computed as follows:  If the output is less
   than or equal to -15 dn, it is set to -15 dn.  If the output is greater than
   or equal to 32767 dn, then it is set to 32767 dn.  If the output is between
   -15 and 32767 dn, then no linear transformation is applied.

5) FILTER IN OUT NLW=3 NSW=3 'ASYM WEIGHTS=(-1,0,0,0,0,0,0,0,1)
   These parmeters will produce a diagonal gradient picture using this weight
   matrix:  
  	-1   0   0
	 0   0   0
	 0   0   1
.PAGE
TIMING:
  TBD

AP VERSION WRITTEN BY:  H. J. FREIDEN,   27 MAY 1981

EMULATION VERSION IMPLEMENTED BY:  L.W.KAMP,  11 OCT. 1984

COGNIZANT PROGRAMMER:  L. W. KAMP

REVISIONS:  
        27 MAY 81   ...HJF...   INITIAL RELEASE - ARRAY PROCESSOR
        6/81        ...HJF... CORRECT DIVIDE ERROR (MAKE IT I*4)
        30 JUNE 81  ... ? ...    MAKE DIVIDE I*4, DEL SPACE,ADD ASYM
        7/81        ...HJF... REMOVE APWD AND APWR (USE NEW DAPEX)
        13 JULY 81  ...HJF...   FIX BUG - DIVISOR > 32768 NOW WORKS
        01 NOV  83  ...CCA...    CONVERT TO VAX
        01 JAN  84  ...CCA...    MAKE HALFWORD RANGE -32768 TO 32767
        84-10-11    ...LWK...  AP EMULATION VERSION
        85-4-18     ...LWK...  CONVERTED TO VICAR2
        85-8-18     ...LWK...  BUG FIXES

        95-02-01    A. Scop (CRI)   Made portable for UNIX
        95-1-28     ...SP....  Modified for name change: from VADD to VADDEM.
        95-10-22    F. Moss    Rename FILTEREM to FILTER throughout
                               the entire com file, make programs
                               FILTERAP, APFLAG, FILTEREM, & proc
                               FILTER obsolete at a later date.
        96-10-11    ...BAM...  Removed all checks for the physical size of the
                                memory of the array processor which we dont
                                have any more. I left in the checks for 4096
                                samples, however, which really could be changed
                                to a much bigger number at any time when required.
                                size.          
        03-08-14    ...NTT...  Enabled 3D image capability.  Reads are
                                no longer sequential.  BIP images prohibited.
                                Internal processing in HALF format
        09-09-09    ...RJB...  Allow images up to 8196 samples
        2010-02-10  R. Bambery    Fixes for 64-bit Linux, MacOSX (Intel/PowerPC)
        2010-02-14  R. Bambery  Reincorporate changes of smyth for XVPTST from
                                09-21-09
        2010-08-13  R. Bambery  Changed apinit call with parameters to apinit
                                without parameters to avoid errors on MacOSX:
                                (gfortran 4.4.4 vsl g77 3.4.6 on linux)
                                filter filter.X filter.Y (41,41,100,100)
                                Beginning VICAR task filter
                                ** FILTER 14-FEB-2010 (64-bit) - RJB
                                ??E - APINIT ERR
                                 ** ABEND called **


.LEVEL1
.VARI INP
Input image file
.VARI OUT
filtered image file
.VARI SIZE
Vicar size field
.VARI SL
size field starting line
.VARI SS
Size field starting sample
.VARI SB
Size field starting band
.VARI NL
Size field number of lines
.VARI NS
Size field number of samples
.VARI NB
Size field number of bands
.VARI NLW
Number of lines of weights
.VARI NSW
Number of samples of weights
.VARI SYMM
Horizontally nonsymmetric or 
asymmetric weights?
.VARI WEIGHTS
Defines the weight matrix
.VARI DIVIDE
Scaling paramater upon output
.VARI SCALE
Linear output scaling:
(offset,scale)
.VARI DNMAX
Defines maximum output dn
.VARI DNMIN
Defines minimum output dn
.VARI RANGE
DN interval to which output
will be clipped.
.vari OFORM
Output data format.
(Default: input format)
.VARI PARMS
 Parameter data set name 
.LEVEL2
.VARI INP
A VICAR labeled image file
.VARI OUT
A file to write the filtered product into
.VARI SIZE
The standard size field defining the area of the input picture that is to
be filtered.
.VARI SL
Starting line of the area to be filtered.
.VARI SS
Starting sample of the area to be filtered
.VARI SB
Starting band to be filtered
.VARI NL
Number of lines in the area to be filtered.
.VARI NS
Number of samples in the area to be filtered.
.VARI NB
Number of bands to be filtered.
.VARI NLW
This specifies the number of lines of weights. Must be odd. Default = 15
.VARI NSW
This specifies the number of samples in each line of the weight matrix.
Must be odd. Always refers to samples not bytes. Default = 15
.VARI SYMM
This keyword parameter has 2 valid values:  NONSYMME and ASYMMETR.

If it is null (default), then the weight matrix is assumed to be
  symmetric, i.e., only one quadrant containing (NLW+1)/2*(NSW+1)/2 weights
  is input.

NONSYMME indicates horizontally nonsymmetric weights, i.e., the weights to
  be input will consist of ( NSW * (NLW+1)/2 ) integers representing the
  upper half of the vertically symetric FILTER weight matrix.  

ASYMMETR indicates that NLW*NSW weights for the asymmetric FILTER will be 
  input.
.VARI WEIGHTS
This keyword is followed by ( (NLW+1) * (NSW+1) / 4 ) integers, representing 
the upper left quadrant of the four-way symmteric matrix of weights.  

If NONSYMMETRIC or ASYMMETRIC was specified, then the upper half or all
of the weight matrix must be specified, respectively.

Each value must be less than 32767 in absolute value.  

Default is the SURVEYOR high-pass FILTER (15*15 weights, symmetric).
.VARI DIVIDE
This is used in the final transformation equation.  Each output point O(l,s)
is given by:

        O(l,s) = A + B*T(l,s) / DIVIDE

where A and B are defined by SCALE and T is the output of the convolution.
The default is that the sum of the weights is used.  If this sum is zero, 
then 1 is used.
.VARI SCALE
This keyword specifies the application of a linear transformation to each
output point T(l,s):

         O(l,s) = A + B*T(l,s) / DIVIDE

where SCALE=(A,B).  Default is SCALE=(0,1).
See also DIVIDE.
.VARI DNMAX
All pixels with DN greater than DNMAX upon output are set to DNMAX. 

DNMAX is synonymous with RANGE(1).

The default depends on the output data format: 255 for byte data, 
and 32767 for halfword.
.VARI DNMIN
All pixels with DN less than DNMIN upon output are set to DNMIN. 

DNMIN is synonymous with RANGE(2).

The defaults depends on the output data format: 0 for byte, and 
-32768 for halfword.

DNMIN must be positive for byte data.  
.VARI RANGE
The pair of values (a,b) specifies the range of DN to which the output will
be clipped.

RANGE is synonymous with (DNMIN, DNMAX).  If both RANGE and DNMIN or DNMAX
are specified, then RANGE will take precedence.

The default depends on the output data format: it is (0,255) for Byte data,
and (32768,32767) for Halfword.
.vari OFORM
This specifies the data format of the output.  Valid: BYTE, HALF.

Default is that the output has the same format as the input.
.VARI PARMS
 PARMS can be used to specify the name of an optional parameter data
 set. Any combination of the allowable parameters may be given. If
 any of the parameters are given interactively, the interactive value
 takes precedence.

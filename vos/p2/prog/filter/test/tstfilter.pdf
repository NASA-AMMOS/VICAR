procedure
parm    mode    type=keyword count=(0:1) valid=(batch,nobatch,inter) default=batch

local oldsfi type=integer count=1 init=0
local oldskey type=string count=1 init=""

! Jun 22, 2012 - RJB
! TEST SCRIPT FOR FILTER
! tests BYTE, HALF images
!
! Vicar Programs:
!       gen list difpic cform xvd
! 
! External Programs:
!   <none>
!
! Parameters:
!   mode - method for processing: 
!       1) batch provides no xvd display
!       2) interactive or nobatch is used for xvd 
!           display requiring user interaction.
!           
!
! Requires NO external test data: 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
refgbl $echo
refgbl $autousage
refgbl $SFI
refgbl $SKEY

body
let $echo="no"
let $autousage="none"
let _onfail= "goto erry"        !if command abends

write "*******************************************************"
write "THIS IS A TEST OF MODULE filter"
write "WE WILL SPATIALLY filter AN IMAGE AND LIST THE RESULTS"
write "AFTER EACH RUN."
write "*******************************************************"
write " "
!
write "Generate a picture"
let $echo="yes"
gen A nl=64 ns=64 ival=0 linc=1 sinc=1 modulo=6
list A size=(1,1,10,10)
f2 A filter.A func=("in1*51")

list filter.A size=(1,1,10,10)
let $echo="no"
!write "List  a small 10X10 area of the input"
!
write "TEST 1 - Do a default filter  (Surveyor Footpad Filter Kernel)"
let $echo="yes"
filter filter.A filter.Y1 
list filter.Y1 size=(1,1,10,10)
difpic (filter.A,filter.Y1) filter.dif1
list filter.dif1 size=(1,1,10,10)
if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.A
    xvd filter.Y1
    xvd filter.dif1
end-if

!
let $echo="no"
write "TEST 2 - Do default filter using size field"
let $echo="yes"
!filter filter.A filter.Y2 (41,41,100,100)
filter filter.A filter.Y2 (7,7,39,39)
list filter.Y2 size=(1,1,10,10)
!difpic (filter.X,filter.Y2) filter.dif2
!list filter.dif1 size=(1,1,10,10)

if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.A
    xvd filter.Y2
end-if

!
let $echo="no"
write "TEST 3 - Now filter with halfword input and output"
let $echo="yes"
!insert filter.A filter.Y2 (41,41,100,100)
cform filter.A filter.Z oform=half
filter filter.Z filter.W 
list filter.W size=(1,1,10,15) 
difpic (filter.Z,filter.W) filter.dif2
list filter.dif2 size=(1,1,10,10)
if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.Z
    xvd filter.W
    xvd filter.dif2
end-if

!
let $echo="no"
write "TEST 4 - Now filter with nonsymmetric weights"
let $echo="yes"
filter filter.A filter.V nlw=5 nsw=5 'nons +
   weights=(-60,10,10,10,-50,   +
	    -10,60,40,50,-20,   +
	     -5,80,100,70,-10)
list filter.V size=(1,1,10,10)
difpic (filter.A,filter.V) filter.dif3
list filter.dif3 size=(1,1,10,10)
if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.A
    xvd filter.V
    xvd filter.dif3
end-if

!
let $echo="no"
write "TEST 5 - Now do same with a scale factor to multiply values by 2"
let $echo="yes"
filter filter.A filter.U nlw=5 nsw=5 'nons scale=(0,2) +
   weights=(-60,10,10,10,-50,   +
	    -10,60,40,50,-20,   +
	     -5,80,100,70,-10)
list filter.U size=(1,1,10,10)
difpic (filter.A,filter.U) filter.dif4
list filter.dif4 size=(1,1,10,10) 'zer

if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.A
    xvd filter.U
    xvd filter.dif4
end-if


let $echo="no"
write "TEST 6 - Now filter with asymmetric weights"
let $echo="yes"
filter filter.A filter.R nlw=3 nsw=3 'asym +
	weights=(-20,50,20      +
	           5,100,0      +
	         -10,20,-10)
list filter.R size=(1,1,10,10)
difpic (filter.A,filter.R) filter.dif5
list filter.dif5 size=(1,1,10,10)

if (mode = "nobatch" or mode = "inter")
    let $echo="no"
    xvd filter.A
    xvd filter.R
    xvd filter.dif4
end-if

!
! Test a 3D image
!
gen filter.3X nl=100 ns=100 nb=3 ival=10 sinc=15 linc=20 binc=30
list filter.3X size=(41,41,10,10)
let $echo="no"
write "TEST 7 - Test a 3D image"
let $echo="yes"

filter filter.3X filter.3Y 
list filter.3Y size=(1,1,10,10) sb=1 nb=3
let $echo="no"
goto endit
!!!!!!
! ERROR ROUTINES
!!!!!!
erry>
let $echo="no"
let _onfail = "continue"               ! continue even if command abends
let oldsfi = $SFI                       ! we want a fail log
let oldskey = $SKEY

write "### abend SFI = &$SFI  SKEY = &$SKEY"

! if there are no other errors (ie, sfi > -1) then if the
! following commands fail, ie, if no files are found, then
! they return sfi = 1
! if sfi = -1 and oldsfi = -1 then pdf is a fail
!!!!!!
! WRAPUP
!!!!!!
endit>
write "### endit> | SFI = &$SFI   SKEY = &$SKEY | oldSFI = &oldsfi oldSKEY = &oldskey"

!!let $echo = "yes"
if ($SFI = 1 and oldsfi < 0) let $SFI = &oldsfi
if ($SFI < 0 and oldsfi = 0) let $SFI = 0
if ($SKEY = "1000") return $SFI=1000
return

end-proc

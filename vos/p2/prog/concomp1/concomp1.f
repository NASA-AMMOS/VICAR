       PROGRAM  CONCOMP1
C#######################################################################
C  NAME OF ROUTINE
C      CONCOMP1 ( CONnected COMPonents )
C
C  PURPOSE
C      THIS IS THE STANDARD MAIN PROGRAM USED FOR TAE/VICAR PROGRAMS.
C      THIS MODULE CALLS SUBROUTINE MAIN44 TO ENTER INTO THE BODY OF THE
C      PROGRAM.
C      Program CONCOMP1 removes high frequency noise from classified or
C      stratified images such as those produced by program FASTCLAS.
C  PREPARED FOR USE ON MIPL SYSTEM BY
C      STEVE POHORSKY   INFORMATICS GENERAL CORPORATION    DECEMBER 1983
C  FOR
C      EARTH RESOURCES APPLICATIONS
C
C  ORIGINAL CONCOMP1 PROGRAM BY
C      STEVE FRIEDMAN 
C
C  ENVIRONMENT
C      VAX 11/780    VMS  with TAE/VICAR2 EXECUTIVE       FORTRAN-77
C     
C  CALLING SEQUENCE (TAE COMMAND LINE)
C      The following command line formats show the major allowable forms:
C
C      CONCOMP1 INP=a OUT=b SIZE=(sl,ss,nl,ns) optional parameters
C      CONCOMP1 INP=a OUT=b SL=sl SS=ss NL=nl NS=ns optional parameters
C      CONCOMP1 a b (sl,ss,nl,ns) optional parameters
C      CONCOMP1 a b optional parameters
C 
C      CONCOMP1 INP=a OUT=(b,m) SIZE=(sl,ss,nl,ns) optional parameters
C      CONCOMP1 INP=a OUT=(b,m) SL=sl SS=ss NL=nl NS=ns optional parameters
C      CONCOMP1 a (b,m) (sl,ss,nl,ns) optional parameters
C      CONCOMP1 a (b,m) optional parameters
C 
C       Here 'a' represents the input image file names,
C       'b' represents the output image file name,
C       and 'm' represents the mask file name.
C
C  INPUT PARAMETERS (listed by keyword)
C      INP    - Input file names.
C      OUT    - Output file name.
C      SIZE   - Standard Vicar size field:  (SL,SS,NL,NS)
C               SL = Starting line number.
C               SS = Starting sample number.
C               NL = Number of lines.
C               NS = Number of samples.
C      THRESH - Threshold of connectivity factor for pixel replacement.
C      REPLACE- New DN value for pixels that are replaced.
C      MODE   - To use the mode of DNs in the window as the new DN
C               value for pixels that are replaced.
C      RANGE  - Range of DNs to consider in finding the mode.
C  OUTPUT PARAMETERS
C      The output image produced is written to the output file.
C      The mask file is produced if requesed.
C  PROGRAM LIMITATIONS
C      1. The input, output, and mask images must be byte data.
C  SUBROUTINES CALLED
C      MAIN44
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                      ORIGINAL HEADER COMMENTS
C  VICAR PROGRAM CONCOMP1        S.Z. FRIEDMAN      FEBRUARY 1980
C
C   13 JAN 80   ...SZF...   INITIAL RELEASE
C
C   03 SEP 94   ...CRI...   MSTP S/W CONVERSION
C
C  PROGRAM CONCOMP1 IS A BASIC CONNECTED COMPONENTS ROUTINE THAT
C  SEARCHES FOR AND REMOVES ISOLATED PIXELS AND/OR SMALL GROUPS OF
C  PIXELS.  A 3 BY 3 MOVING WINDOW IS USED TO FIND ISOLATED
C  PIXELS BY COMPARING THE CENTRAL PIXEL OF THE WINDOW WITH ITS ADJACENT
C  PIXELS.  THE NUMBER OF SIMILAR PIXELS ARE COUNTED TO DETERMINE
C  THE CONNECTIVITY FACTOR.  IF THE FREQUENCY OF OCCURANCE IS LESS THAN
C  A SUPPLIED THRESHOLD CONNECTIVITY FACTOR, THE CENTRAL PIXEL
C  IS REPLACED EITHER BY A GIVEN VALUE OR BY THE MODE OF THE
C  DISTRIBUTION WITHIN THE WINDOW.
C  A MASK OF CHANGED PIXELS CAN BE GENERATED ON REQUEST.
C
C
C  PARAMETERS
C     THRESH(VAL)      THRESHOLD LIMIT OR MINIMUM CONNECTIVITY FACTOR
C                      TO BE MET FOR NO REPLACEMENT.
C                      A CONNECTIVITY FACTOR OF LESS THAN THRESH WILL
C                      CAUSE A REPLACEMENT.  (ACCEPTABLE VALUES
C                      FOR THRESH ARE 0-8,DEFAULT=1)
C     RANGE(LO,HI)     DN RANGE:  LODN,HIDN (DEFAULT=0,255)
C     REPLACE(NEW)     REPLACEMENT DN SPECIFICATION:  IF THRESH IS
C                      NOT MET, THE CENTRAL PIXEL IS REPLACED WITH 'NEW'
C                      (DEFAULT=255)
C     REPLACE MODE     REPLACEMENT MODE SPECIFICATION:  SAME
C                      AS ABOVE EXCEPT THAT WHEN THRESH IS NOT MET, THE
C                      REPLACEMENT IS MADE WITH THE MODE OF THE
C                      DISTRIBUTION (NO DEFAULT)
C     DBUG(L)          DIAGNOSTIC PARAMETER AND PRINT LEVEL  (**removed)
C
C                      END OF ORIGINAL HEADER COMMENTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44 
C#######################################################################
C  NAME OF ROUTINE
C     MAIN44 (name for top level subroutine by VICAR convention)
C
C  PURPOSE
C      MAIN44 processes parameters entered by the user and calls
C      WORK via STACKA to make any changes to the image.
C      
C  CONVERTED FOR USE ON MIPL SYSTEM BY   
C      STEVE POHORSKY   INFORMATICS GENERAL CORPORATION     DECEMBER 1983
C  FOR
C      EARTH RESOURCES APPLICATIONS
C  ENVIRONMENT
C      VAX 11/780    VMS  with TAE/VICAR2 EXECUTIVE       FORTRAN-77
C     
C  REVISION HISTORY
C
C    12-83  SP   CONVERTED FROM IBM VICAR VERSION: MISCELLANEOUS CLEANUP.
C    12-83  SP   MODIFIED SO THAT RDCHEK AND WRCHEK USED FOR I/O ERROR MESSAGES
C    12-83  SP   CHANGED ALL LINE BUFFERS TO INTEGER*2 TO AVOID IV AND ITL.
C    12-83  SP   MADE IN ARRAY TWO-DIMENSIONAL FOR READABILITY. DECREASED THE
C                NUMBER OF BUFFERS IN IN ARRAY FROM NLW+2 TO NLW.
C    12-83  SP   CHANGED WRITES TO ASYNCHRONOUS I/O.
C     5-84  SP   INCREASED BUFFER SIZE FOR LABELC SINCE OREC NOW IS 0.
C     6-87  REA  CONVERT TO FULL VICAR2
C    03-SEP-94   CRI... MSTP S/W CONVERSION
C
C  CALLING SEQUENCE
C      Standard subroutine call and return.
C  INPUT AND OUTPUT PARAMETERS     
C      SEE UNDER PROGRAM CONCOMP1.
C      
C  CALLED BY
C      CONCOMP1
C  SUBROUTINES CALLED
C      WORK plus the library routines STACKA, XVOPEN, XVPARM, XVPCNT,
C      XVPTST, XVSIZE, XVUNIT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        implicit none
C      IMPLICIT INTEGER(A-Z)

      ! THE PROGRAM IS GENERALIZED FOR MODIFIABILITY SO THAT ONLY THE FOLLOWING
      ! TWO PARAMETERS NEED TO BE CHANGED TO CHANGE THE WINDOW DIMENSIONS. 
      ! EACH DIMENSION SHOULD BE AN ODD INTEGER.  (RANGE OF VALID THRESH VALUES
      ! WOULD NEED CHANGING TOO.  FOR LARGER WINDOWS, CHECKING IS NOT BASED ON
      ! GEOMETRICAL CONNECTIVITY SINCE JUST USING A HISTOGRAM.)

      INTEGER*4 WWIDTH_PAR,WLENGTH_PAR
      PARAMETER (WWIDTH_PAR=3)    ! WINDOW WIDTH IN SAMPLES.
      PARAMETER (WLENGTH_PAR=3)   ! WINDOW LENGTH IN LINES.
      EXTERNAL WORK
C
      INTEGER*4 SL,SS,NL,NS,NLW,NSW,LODNP1,ICNT,IDEF,INUNIT
      INTEGER*4 HIDNP1,DELTAS,NEWVAL,THRESH, INSIZE, HALFW 
      INTEGER*4 IOUT1,IOUT2,ISTAT,MSIZE,NDSOUT,NLIN,NSIN,OSIZE
      INTEGER*4 IPARM(2)
      INTEGER*8 O8SIZE,M8SIZE,IN8SIZE
      LOGICAL*4  MASK,MODE,XVPTST
C

      COMMON /VAL/ SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,
     &             DELTAS,NEWVAL,THRESH, INSIZE, HALFW
      COMMON /LOGCAL/ MASK,MODE
C
      CALL IFMESSAGE('CONCOMP1 version 2017-05-31')
C
C=================START OF EXECUTABLE CODE===============================
C  INITIALIZATION

      NLW = WLENGTH_PAR       ! STORE WINDOW DIMENSIONS.
      NSW = WWIDTH_PAR
      HALFW = NLW * NSW / 2   ! HALF THE NUMBER OF PIXELS IN THE WINDOW.

C  PARAMETER PROCESSING

      MODE = XVPTST('MODE')
      CALL XVPARM('REPLACE',NEWVAL,ICNT,IDEF,1)
      CALL XVPARM('THRESH',THRESH,ICNT,IDEF,1)
      CALL XVPARM('RANGE',IPARM,ICNT,IDEF,2)
      LODNP1 = IPARM(1)+1
      HIDNP1 = IPARM(2)+1
C
C  OPEN DATA SETS
C
      CALL XVPCNT('OUT',NDSOUT)
      MASK = (NDSOUT.EQ.2)
      CALL XVUNIT(INUNIT,'INP',1,ISTAT,' ')
      CALL XVOPEN(INUNIT,ISTAT,'U_FORMAT','HALF',' ')
      CALL XVSIZE(SL,SS,NL,NS,NLIN,NSIN)
      CALL XVUNIT(IOUT1,'OUT',1,ISTAT,' ')
      CALL XVOPEN(IOUT1,ISTAT,'U_NL',NL,'U_NS',NS,
     +            'U_FORMAT','HALF','OP','WRITE',' ')
      IF (MASK) THEN
	  CALL XVUNIT(IOUT2,'OUT',2,ISTAT,' ')
	  CALL XVOPEN(IOUT2,ISTAT,'U_NL',NL,'U_NS',NS,
     +                'U_FORMAT','HALF','OP','WRITE',' ')
      END IF
C
C  DETERMINE MINIMUM SIZES NEEDED FOR DATA SETS
C  NOTE THAT IN BUFFER IS USED FOR INPUT AND LABEL PROCESSING
C
      INSIZE = (NS+NSW-1)*NLW*2
      OSIZE = 2 * NS
      MSIZE = 4
      IF(MASK) MSIZE = OSIZE

      O8SIZE = INT8(OSIZE)
      M8SIZE = INT8(MSIZE)
      IN8SIZE = INT8(INSIZE)
C  CALL SPECIAL LIBRARY SUBROUTINE STACKA TO ALLOCATE THE NECESSARY BUFFERS
C  AND TO CALL SUBROUTINE WORK. (WE ALLOCATE NLW LINE BUFFERS TOGETHER IN A
C  TWO-DIMENSIONAL ARRAY.

      CALL STACKA(9,WORK,3,O8SIZE,M8SIZE,IN8SIZE,INUNIT,IOUT1,IOUT2)
      RETURN
      END
C
      SUBROUTINE WORK(OUT,IOUT,MSK,IMSK,IN,IIN,INUNIT,IOUT1,IOUT2)
C#######################################################################
C  NAME OF ROUTINE
C     WORK ( do the WORK )
C
C  PURPOSE
C      WORK removes high frequency noise from classified or
C      stratified images such as those produced by program FASTCLAS.
C      
C  CONVERTED FOR USE ON MIPL SYSTEM BY   
C      STEVE POHORSKY   INFORMATICS GENERAL CORPORATION     DECEMBER 1983
C  FOR
C      EARTH RESOURCES APPLICATIONS
C  ENVIRONMENT
C      VAX 11/780    VMS  with TAE/VICAR2 EXECUTIVE       FORTRAN-77
C     
C  REVISION HISTORY
C    12-83  SP   CONVERTED FROM IBM VICAR VERSION: MISCELLANEOUS CLEANUP.
C                (SEE UNDER MAIN44.)
C    03-SEP-94   CRI... MSTP S/W CONVERSION
C  CALLING SEQUENCE
C      CALLED VIA LIBRARY SUBROUTINE STACKA.
C  INPUT PARAMETERS 
C      IN(I,J)           - LINE BUFFERS FOR NLW LINES WHERE NLW IS THE
C       array              WINDOW LENGTH. (I = 1 TO NLW.)  THE PIXEL INDEX 
C                          GOES FROM 1 TO NS+NSW-1.  
C                          THE DATA FROM A LINE OF THE INPUT IMAGE
C                          BEGINS WITH IN( (NSW+1)/2, I ) AND GOES THROUGH
C                          IN(NS + NSW/2, I).  SPACE IS LEFT AT BOTH ENDS OF A
C                          LINE BUFFER SO THAT A FULL WINDOW CAN BE DEFINED FOR
C                          THE ENDPOINTS OF THE LINE. THIS SPACE IS FILLED BY
C                          REFLECTING DATA ABOUT THE ENDPOINTS.  
C                          FOR NSW=3,
C                          THE LINE DATA IS IN  IN(2,I) THROUGH IN(NS+1,I).
C                          IN(1,I) IS THE SAME AS IN(3,I), AND IN(NS+2,I) IS
C                          THE SAME AS IN(NS,I).
C      IIN               - NUMBER OF BYTES ALLOCATED BY STACKA FOR IN.
C      OUT(J) array      - line buffer for output image.
C      IOUT              - NUMBER OF BYTES ALLOCATED BY STACKA FOR OUT.
C      MSK(J) array      - line buffer for mask output image.
C      IMSK              - NUMBER OF BYTES ALLOCATED BY STACKA FOR MSK.
C      INUNIT		 - UNIT NUMBER OF THE INPUT DATASET
C      OUT1		 - UNIT NUMBER OF THE FIRST OUTPUT DATASET
C      OUT2		 - UNIT NUMBER OF THE SECOND OUTPUT DATASET (IF USED)
C  CALLED BY
C      STACKA
C  SUBROUTINES CALLED 
C      CONCHK plus the library routines MVE, OUTCON, XLADD, XVREAD, XVWRIT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                 COMMENTS FROM ORIGINAL HEADER
C
C  VICAR PROGRAM CONCOMP1      S.Z. FRIEDMAN       FEBRUARY 1980
C
C  SUBROUTINE WORK HANDLES ALL I/O & CALLS CONCHK ROUTINE
C
C     IN      INPUT BUFFER
C     OUT     OUTPUT ARRAY FOR LINE N
C     MSK     OPTIONAL ARRAY FOR MASK OUTPUT DS FOR LINE N
C     CURRLN  BUFFER NUMBER, CURRENT LINE
C     RELLIN  RELATIVE LINE READ (W/O REFERENCE TO LABEL)
C     DELTAS,SAM1,FROML,FILLL,FROMR,FILLR
C             ARE ALL SAMPLE POINTERS
CCCCCCCCCCC

        implicit none
C      IMPLICIT INTEGER(A-Z)
C
      INTEGER*2 IN(NS+NSW-1,NLW),  OUT(NS), MSK(NS)
      INTEGER*4 SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,DELTAS
      INTEGER*4 NEWVAL,THRESH, INSIZE, HALFW
      INTEGER*4 INUNIT,IOUT1,IOUT2,CURRLN,FILLL
      INTEGER*4 FILLR,FROML,FROMR,SAM1,IBUF,ILINE,ISTAT
      INTEGER*4 RELLIN,STRTRD
      INTEGER*4 I
      INTEGER*8 IOUT,IMSK,IIN
      LOGICAL*4 MASK,MODE

      CHARACTER*80 L1
 
      COMMON /VAL/ SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,
     &             DELTAS,NEWVAL,THRESH, INSIZE, HALFW
      COMMON /LOGCAL/ MASK,MODE

C      LOGICAL*1 MSG1(72),L1(69)
C      DATA L1(69)/69*' '/
C
C=================START OF EXECUTABLE CODE===============================     
C
C  PROCESS LABEL INFORMATION
C
C      CALL OUTCON(THRESH,L1,1)
      L1 = ' '
      WRITE (L1(69:69),'(I1)') THRESH
      CALL XLADD(IOUT1,'HISTORY','THRESHLD',L1,ISTAT,'ERR_ACT',
     +           'SA','FORMAT','STRING','ULEN',1,' ')
      IF(MASK)  THEN
	  CALL XLADD(IOUT2,'HISTORY','MASK',
     +		     '0 for changed; =255 for no change',ISTAT,
     +		     'ERR_ACT','SA','FORMAT',
     +               'STRING','ULEN',33,' ')
      END IF
C
C SET VARIABLES CONTROLLING INPUT AND BUFFERING
C
                         ! VALUE FOR 3x3 WINDOW      REMARKS
      STRTRD = SL-1
      RELLIN = 1-NLW/2      !     0
      DELTAS = NSW/2        !     1    LINE DATA IS OFFSET DELTAS SAMPLES FROM
                            !          BEGINNING OF BUFFER.
      SAM1 = (NSW+1)/2      !     2    LINE DATA STARTS IN IN(SAM1,I).
      FROML = SAM1+1        !     3    FOR MIRRORING DATA AT BEGINNING OF LINE.
      FILLL = SAM1-1        !     1    FOR MIRRORING DATA AT BEGINNING OF LINE.
      FROMR = SAM1+NS-2     !     NS   FOR MIRRORING DATA AT END OF LINE.
      FILLR = SAM1+NS       !     NS+2 FOR MIRRORING DATA AT END OF LINE.
      CURRLN = (NLW+1)/2    !     2    LINE BUFFER NUMBER FOR CENTER OF WINDOW.
      IBUF  = 0             !          LINE BUFFER NUMBER FOR READS.
C
C  READ INITIAL LINES INTO CORE, MIRROR IMAGE AT BOUNDARIES.  (MIRRORING
C  DEFINES THE WINDOW FOR PIXELS ALONG THE EDGES OF THE IMAGE AND MAKES
C  SUCH WINDOWS SYMMETRIC WITH RESPECT TO THE EDGES.)

      DO 100 I = 1, NLW-1
      ILINE = RELLIN
      RELLIN = RELLIN+1
70    IF(ILINE .LT. 1) ILINE = 2-ILINE
      IF(ILINE .GT. NL) ILINE = NL+NL-ILINE
      IF(ILINE .LT. 1) GOTO 70
      IBUF = 1 + MOD(IBUF,NLW) ! FORMULA FOR CYCLING THROUGH THE BUFFERS OF IN.
C  READ
      CALL XVREAD(INUNIT,IN(SAM1,IBUF),ISTAT,'LINE',STRTRD+ILINE,
     +	          'SAMP',SS,'NSAMPS',NS,' ')

C  MIRROR
      IF (NSW .EQ. 3) THEN        ! FOR 3x3 WINDOW, MIRRORING IS SIMPLE.
          IN(1,IBUF) = IN(3,IBUF)
          IN(NS+2,IBUF) = IN(NS,IBUF)
      ELSE IF (NSW .GT. 3)  THEN
         CALL MVE(2,DELTAS,IN(FROML,IBUF),IN(FILLL,IBUF),1,-1)
         CALL MVE(2,DELTAS,IN(FROMR,IBUF),IN(FILLR,IBUF),-1,1)
      END IF

100   CONTINUE

C     MAIN LOOP, LOOPING THROUGH EACH OUTPUT LINE.  SINCE THE ALGORITHM DOES
C     NOT DEPEND ON THE GEOMETRY OF PIXELS IN THE WINDOW, WE DO NOT HAVE TO
C     KEEP THE LINES OF THE WINDOW IN ANY ORDER.  WE JUST READ THE NEXT LINE
C     INTO THE OLDEST BUFFER.  CURRLN IS THE LINE INDEX FOR THE IN ARRAY OF THE
C     CENTER LINE.
C
C  BEGIN CONNECTED COMPONENTS CHECK
C  READING IN LAST LINE OF WINDOW BEFORE CALLING CONCHK.
      DO 200 I = 1,NL
      ILINE = RELLIN
      RELLIN = RELLIN+1
150   IF(ILINE .LT. 1) ILINE = 2-ILINE
      IF(ILINE .GT. NL) ILINE = NL+NL-ILINE
      IF(ILINE .LT. 1) GOTO 150
      IBUF = 1 + MOD(IBUF,NLW) ! FORMULA FOR CYCLING THROUGH THE BUFFERS OF IN.
C  READ
      CALL XVREAD(INUNIT,IN(SAM1,IBUF),ISTAT,'LINE',STRTRD+ILINE,
     +	          'SAMP',SS,'NSAMPS',NS,' ')

C  MIRROR
      IF (NSW .EQ. 3) THEN
          IN(1,IBUF) = IN(3,IBUF)
          IN(NS+2,IBUF) = IN(NS,IBUF)
      ELSE IF (NSW .GT. 3)  THEN
         CALL MVE(2,DELTAS,IN(FROML,IBUF),IN(FILLL,IBUF),1,-1)
         CALL MVE(2,DELTAS,IN(FROMR,IBUF),IN(FILLR,IBUF),-1,1)
      END IF

      CALL CONCHK(IN, CURRLN, OUT, MSK)    ! CHECK CONNECTIVITY FOR EACH 
                                           ! PIXEL IN THE LINE.
      CURRLN = MOD(CURRLN,NLW)+1           ! SET FOR NEXT LINE.

C  OUTPUT DATA

      CALL XVWRIT(IOUT1,OUT,ISTAT,'NSAMPS',NS,' ')
      IF (MASK) CALL XVWRIT(IOUT2,MSK,ISTAT,'NSAMPS',NS,' ')

200   CONTINUE

      RETURN
      END
C
      SUBROUTINE CONCHK(IN, CURRLN, OUT, MSK)
C#######################################################################
C  NAME OF ROUTINE
C     CONCHK (CONnectivity CHecK)
C
C  VICAR PROGRAM CONCOMP1      S.Z. FRIEDMAN      FEBRUARY 1980
C  PURPOSE:
C  SUBROUTINE CONCHK BUILDS AND MAINTAINS A HISTOGRAM TO DETERMINE
C  THE CONNECTIVITY FACTOR FOR EACH PIXEL WITH ITS SURROUNDING
C  PIXELS  AND CHANGES DNS FOR PIXELS NOT MEETING THE THRESHOLD CRITERIA.
C      
C  CONVERTED FOR USE ON MIPL SYSTEM BY   
C      STEVE POHORSKY   INFORMATICS GENERAL CORPORATION     DECEMBER 1983
C  FOR
C      EARTH RESOURCES APPLICATIONS
C  ENVIRONMENT
C      VAX 11/780    VMS  with TAE/VICAR2 EXECUTIVE       FORTRAN-77
C     
C  REVISION HISTORY
C    12-83  SP   CONVERTED FROM IBM VICAR VERSION: MISCELLANEOUS RESTRUCTURING.
C                (SEE UNDER MAIN44.)
C    12-83  SP   CORRECTED TO NOT PUT A -2 (=254) IN IMAGE IF MODALV DOES NOT
C                FIND A VALUE.
C    03-SEP-94   CRI... MSTP S/W CONVERSION
C  CALLING SEQUENCE
C      Standard subroutine call and return.
C  INPUT AND OUTPUT PARAMETERS     
C      SEE UNDER WORK.
C      
C  CALLED BY
C      WORK
C  SUBROUTINES CALLED
C      MODALV plus the library routines MVE, ZIA.
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     CURRLN     BUFFER NUMBER, CURRENT LINE
C     CURSAM,ADDSAM,SUBSAM
C                SAMPLE POINTERS
C     CURDNP1    DN VALUE+1 AT CURRENT SAMPLE (CURSAM)
C
C
        implicit none
C      IMPLICIT INTEGER(A-Z)

      INTEGER*2 IN(NS+NSW-1,NLW),  OUT(NS), MSK(NS)
      INTEGER*2 NOCHNG
      INTEGER*4 HIST(256)
      INTEGER*4 SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,DELTAS
      INTEGER*4 NEWVAL,THRESH, INSIZE, HALFW,CURRLN,ADD
      INTEGER*4 I,J,IS,ADDSAM,CURSAM,CURDNP1,SUB,SUBSAM,VAL  
      LOGICAL*4 MASK,MODE

      COMMON /VAL/ SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,
     &             DELTAS,NEWVAL,THRESH, INSIZE, HALFW
      COMMON /LOGCAL/ MASK,MODE

      DATA NOCHNG / 255 /

C=================START OF EXECUTABLE CODE===============================
C  CLEAR HISTOGRAM AND BUILD OUTPUT LINES
C  SUBROUTINE MODE CHANGES A PIXELS VALUE ONLY
C  WHEN CHANGES ARE NOTED BY THE MODEL FUNCTION CHECK
C  ALL OTHER SAMPLES REMAIN UNCHANGED
C
      CALL ZIA(HIST,256)
      CALL MVE(2,NS,IN(DELTAS+1,CURRLN),OUT(1),1,1)
      IF(MASK) CALL MVE(2,NS,NOCHNG,MSK(1),0,1)
C
C  FOR EACH PIXEL IN THE LINE MAKE HISTOGRAM FOR WINDOW CENTERED AT THAT PIXEL.
C  THEN CHECK CONNECTIVITY FACTOR.
C  IF THRESH IS NOT MET, REPLACE PIXEL WITH REPLACEMENT VALUE
C  OR MODE OF DISTRIBUTION.
      DO 200 IS = 1,NS
      CURSAM = IS+DELTAS

C  MAKE HISTOGRAM FOR WINDOW. (FOR FIRST SAMPLE, MAKE HISTOGRAM DIRECTLY.
C  FOR SUBSEQUENT SAMPLES, UPDATE PREVIOUS HISTOGRM.)  ( HIST(N+1) IS
C  THE COUNTER FOR DN OF N.)   

      IF ( IS .EQ. 1 )  THEN
        DO I = 1,NLW
        DO J = 1,NSW                  ! MAKE HISTOGRAM FOR FIRST SAMPLE.
          ADD = IN(J,I)+1
          HIST(ADD) = HIST(ADD)+1
        END DO
        END DO

      ELSE
        ADDSAM = CURSAM+DELTAS
        SUBSAM = CURSAM-DELTAS-1
        DO I = 1,NLW
          ADD = IN(ADDSAM,I) + 1      ! UPDATE HIST. FOR SUBSEQUENT SAMPLES.
          SUB = IN(SUBSAM,I) + 1   
          IF(ADD .NE. SUB) THEN
            HIST(ADD) = HIST(ADD)+1
            HIST(SUB) = HIST(SUB)-1
          END IF
        END DO

      END IF

C  CHECK CONNECTIVITY. Compare number of OTHER pixels with same DN with THRESH.
      CURDNP1 = IN(CURSAM,CURRLN) + 1
      IF ( HIST(CURDNP1)-1  .LT. THRESH) THEN     
         IF (MODE)  THEN                        ! IF CONNECTIVITY < THRESH,
            CALL MODALV(HIST,VAL)               ! CHANGE TO MODAL VALUE OR
            IF (VAL .GE. 0) THEN                ! NEWVAL. 
                OUT(IS) = VAL                   ! DO NOT CHANGE IF NO
                IF (MASK)  MSK(IS) = 0          ! MODAL VALUE FOUND.
            END IF

         ELSE
            OUT(IS) = NEWVAL
            IF (MASK)  MSK(IS) = 0

         END IF
      END IF

200   CONTINUE
      RETURN
      END
      SUBROUTINE MODALV(HIST,VAL)
C#######################################################################
C  NAME OF ROUTINE
C     MODALV (MODAL Value)
C
C  VICAR PROGRAM CONCOMP1       S.Z. FRIEDMAN      FEBRUARY 1980
C
C  PURPOSE:
C  SUBROUTINE MODALV IS CALLED WITH THE 'REPLACE MODE' OPTION ONLY
C  AND DETERMINES THE MODAL VALUE OF THE DISTRIBUTION
C
C  CONVERTED FOR USE ON MIPL SYSTEM BY   
C      STEVE POHORSKY   INFORMATICS GENERAL CORPORATION     DECEMBER 1983
C  FOR
C      EARTH RESOURCES APPLICATIONS
C  ENVIRONMENT
C      VAX 11/780    VMS  with TAE/VICAR2 EXECUTIVE       FORTRAN-77
C     
C  REVISION HISTORY
C    12-83  SP   TOOK HIST OUT OF COMMON AND MADE A FORMAL PARAMETER.
C    12-83  SP   ADDED CHECK FOR FREQ > HALFW FOR SPEED IN FINDING MAXIMUM.
C    03-SEP-94   CRI... MSTP S/W CONVERSION
C  CALLING SEQUENCE
C      Standard subroutine call and return.
C  INPUT PARAMETER
C      HIST array  - HISTOGRAM FOR WINDOW.
C  OUTPUT PARAMETER
C      VAL = -2 IF NO DNS IN THE RANGE LODN TO HIDN OCCUR IN WINDOW.
C          = MODAL VALUE OTHERWISE.
C  CALLED BY
C      CONCHK 
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        implicit none
C      IMPLICIT INTEGER(A-Z)

      LOGICAL*4 MASK,MODE
      INTEGER*4 SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,DELTAS
      INTEGER*4 NEWVAL,THRESH, INSIZE, HALFW
      INTEGER*4 I,VAL,FREQ
      INTEGER*4 HIST(256)

      COMMON /VAL/ SL,SS,NL,NS,NLW,NSW,LODNP1,HIDNP1,
     &             DELTAS,NEWVAL,THRESH, INSIZE, HALFW
      COMMON /LOGCAL/ MASK,MODE

C
C=================START OF EXECUTABLE CODE===============================
      VAL = -1
      FREQ = 0
C
C
C  FIND THE MODE OF THE DISTRIBUTION
C
      DO 100 I = LODNP1,HIDNP1
      IF(HIST(I) .LE. FREQ) GOTO 100
C  POSSIBLE REPLACEMENT
      VAL = I
      FREQ = HIST(I)
      IF ( FREQ .GT. HALFW ) GOTO 200    ! IF FREQ > HALF OF WINDOW, THEN THIS
100   CONTINUE                           ! IS THE MOST FREQUENT.
C
200   CONTINUE
      VAL = VAL-1
      RETURN
      END

PROCESS    HELP=*
PARM INP      TYPE=(STRING,72) COUNT=(1:40)
PARM OUT      TYPE=(STRING,72)
PARM SIZE     TYPE=INTEGER COUNT=4 DEFAULT=(1,1,0,0)
PARM NL       TYPE=INTEGER DEFAULT=0
PARM NS       TYPE=INTEGER DEFAULT=0
PARM OFFSETS  TYPE=INTEGER COUNT=(1:80) DEFAULT=(1,1)
!# parm inp(3-40) hints=default
END-PROC
.TITLE
VICAR2 Program RAPIDMOS
.HELP
PURPOSE

    RAPIDMOS mosaics multiple images into one output image. 
The operation is similar to that of FASTMOS, but with reduced 
execution time and with some functions removed.  Up to 40
images may be mosaicked at one time.  Currently only byte
images are handled.  NOTE: the non-zero portion of the image
must be convex.


EXECUTION

     rapidmos INP=(A1,A2,...,An)  OUT=B   NL=NL  NS=NS  + 
		  OFFSETS=(LOFF1,SOFF1, LOFF2,SOFF2, ... , LOFFn,SOFFn)
	
     A1,A2,...,An       are the input images.
     B                  is an output image.
     NL			is the number of line in the output image
     NS			is the number of samples in the output image
     LOFF1,SOFF1...     line and sample in the output image where the
                        upper left corner of the input image will be
                        positioned.
OPERATION

     Mosaicking  is  performed by reading the lines  of  all 
     input images and combining them into the line of output 
     image.   If  the  input pixels overlap,  the  preceding 
     input image supersedes the successive.   Zero pixels of 
     the  input images are ignored if they lie  outside  the 
     non-zero perimeter; however, they are preserved if they 
     are  a  part  of a "zero-island"  within  the  non-zero 
     perimeter.  Pointers to the left and right edges of each
     image are kept and updated for each line.  For this reason
     concave images (which have more than two edges on a line)
     will not be mosaicked correctly.  It is the use of these
     pointers, however, that reduces the CPU time compared with
     FASTMOS.


EXAMPLE

     rapidmos INP=(A,B,C) OUT=D SIZE=(1,1,1000,1000) +
        	      OFF=(100,100, 100,500, -25,150)

     This example mosaics three images, positioning their left 
     upper   corners  into  pixels (100,100),  (100,500) and 
     (-25,150) of the output image respectively.


RESTRICTIONS

     1.  Only byte images are supported.
     2.  The non-zero portion of the images must be convex.
     3.  There may be up to 40 input images.
     4.  The maximum number of samples for input or output images is 50,000.

WRITTEN BY:                B. Gokhman

COGNIZANT PROGRAMMER:      K. F. Evans

REVISION:  2		April 1986

Ported to UNIX             C.R. Schenk (CRI) May 1995


.LEVEL1
.VARIABLE INP
Input images (up to 40)
.VARIABLE OUT
Output image
.VARIABLE SIZE
Size field for output picture
Only NL and NS are used.
.VARIABLE NL
Number of lines in the output
.VARIABLE NS
Number of samples in the output
.VARIABLE OFFSETS
Specifies positioning of inputs

.LEVEL2
.VARIABLE INP
    INP=(A1,...,An)      Input images (up to 40)
.VARIABLE OUT
    OUT=B                Output image
.VARIABLE SIZE
     SIZE=(1,1,NL,NS)	 Size field for output picture
			 Only NL and NS are used.
.VARIABLE NL
     NL=I		 Number of lines in the output
.VARIABLE NS
     NS=I		 Number of samples in the output
.VARIABLE OFFSETS
     OFF=(L1,S1, L2,S2, ... Ln,Sn)

                         Lk,Sk refer to positioning of the 
                         k'th  image in  the  output image.
			 Pixel (1,1) of the k'th input image 
			 is  placed  in the output image  at 
                         pixel (Lk,Jk).  L and/or S may be 
                         positive (yielding image  placement 
                         downward   and/or   to  the   right 
                         respectively),  or L and/or S may 
                         be zero or negative (yielding image 
                         placement upward and/or to the left 
                         respectively).  Default:  L=1, S=1.
.END

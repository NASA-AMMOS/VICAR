process help=*
PARM INP TYPE=STRING COUNT=1
PARM OUT TYPE=STRING COUNT=1
PARM SH_THRESH_MIN TYPE=INTEGER COUNT=1 DEFAULT=200
PARM WH_THRESH_MIN TYPE=INTEGER COUNT=1 DEFAULT=10
PARM SH_THRESH_MAX TYPE=INTEGER COUNT=1 DEFAULT=1000
PARM WH_THRESH_MAX TYPE=INTEGER COUNT=1 DEFAULT=200
PARM SH_SIF TYPE=INTEGER COUNT=1 DEFAULT=50
PARM WH_SIF TYPE=INTEGER COUNT=1 DEFAULT=10
PARM OUTLIER_THRESH TYPE=INTEGER COUNT=1 DEFAULT=7
PARM OUTLIER_SIF TYPE=INTEGER COUNT=1 DEFAULT=15
PARM WH_MAG_THRESH TYPE=INTEGER COUNT=1 DEFAULT=50
PARM WH_DIR_THRESH TYPE=INTEGER COUNT=1 DEFAULT=10
PARM WH_DIR_SIF TYPE=INTEGER COUNT=1 DEFAULT=10
PARM WH_ITER_MAX TYPE=INTEGER COUNT=1 DEFAULT=5
PARM BAA_THRESH TYPE=REAL COUNT=1 DEFAULT=30.0
PARM BAR_THRESH TYPE=REAL COUNT=1 DEFAULT=10.0
PARM BP_FACTOR TYPE=INTEGER COUNT=1 DEFAULT=4
PARM BAADA_THRESH TYPE=REAL COUNT=1 DEFAULT=2.0
PARM BAADR_THRESH TYPE=REAL COUNT=1 DEFAULT=20.0
PARM SMOOTH_IMG TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM GM_IMG TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM GD_IMG TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM QL_IMG TYPE=STRING COUNT=(0:1) DEFAULT=--
PARM FILTER_SIZE TYPE=INTEGER COUNT=1 DEFAULT=7
PARM FILTER_TYPE TYPE=KEYWORD COUNT=1 VALID=("MIN", "MEDIAN", "MAX") DEFAULT="MEDIAN"
PARM TRIMTOP TYPE=INTEGER COUNT=1 DEFAULT=1
PARM TRIMBOT TYPE=INTEGER COUNT=1 DEFAULT=1
PARM TRIMLEFT TYPE=INTEGER COUNT=1 DEFAULT=2
PARM TRIMRIGHT TYPE=INTEGER COUNT=1 DEFAULT=2
PARM TRIM_IMG TYPE=STRING COUNT=(0:1) DEFAULT=--
END-PROC

.TITLE
VICAR program HORIZON

.HELP
PURPOSE:
HORIZON detects strong and weak horizon borders for martian images.

The program currently supports only grayscale format. The input images
to the program must be a 1-band image. The program makes two assumptions
for input images. If input images don't fullfil the assumptions, the 
program will fail to detect horizon borders. The first assumption is 
that sky region is above ground region. The second assumption is that 
there is no object in sky region.

The output of this program will be a Comma-separated values (CSV) file. 
The length of the output CSV file should always be exactly the the same as 
input image's width. Each integer value in the CSV file represents the 
horizon border's LINE position in that specific SAMP. 
For example:
  324,325,-1,325,326,327, ... ...
This means that at column(SAMP) 0, the horizon border is at row(LINE) 324;
at column(SAMP) 1, the horizon border is at row(LINE) 325. At column(SAMP) 2, 
the horizon border value is -1, it means there is no horizon border detected 
or it is an outlier.

EXECUTION:

The program is quite sensitive to the parameters. Parameters' default values
are chosen experimentally. In the METHOD section, the algorithm used in this
program is introduced. Knowing exactly how the algorithm works will help
choose parameters' values. 

  1) HORIZON INP=input.img OUT=output.horizon
Use all default parameters' values, the program takes an input image, and then
generate a CSV file that contains the horizon borders.

  2) HORIZON INP=input.img OUT=output.horizon WH_ITER_MAX=0
By setting parameter WH_ITER_MAX to be 0, the program will turn off weak horizon
detection and refinement process. This is useful when salt-and-pepper noise was
not completely removed from preprocessing, and it is also useful when vignetting
effects present in the input image.

  3) HORIZON INP=input.img OUT=output.horizon FILTER_SIZE=9
By default the program uses a filter window size of 7 to blend salt-and-pepper
noise. This should work for most of cases. However, if a lot of noisy pixel 
appear in a given N x N space, then increase FILTER_SIZE should be helpful to
blend these noisy pixels to a degree which they don't affect the sky and ground
busyness levels calculation.

  4) HORIZON INP=input.img OUT=output.horizon SH_THRESH_MAX=700
The parameter SH_THRESH_MAX defines the upper searching bound for gradient 
magnitude image in preliminary horizon borders detection process. By decreasing
SH_THRESH_MAX value, the program will search more precisely for weaker horizon 
borders. This parameter is useful when strong horizon borders appear to be weaker 
than normal, or in another words, the sky pixels intensity is very close to ground
pixels intensity.

  5) HORIZON INP=input.img OUT=output.horizon BAR_THRESH=5 BAA_THRESH=10
The parameters BAR_THRESH and BAA_THRESH are used to identify and remove columns 
without sky region. If part of detected horizon borders are too close to the top
of image, then these horizon borders will be directly marked as false horizon,
and the value of these horizon borders will be set to -1. (Note: based on 
the algorithm in this program, the false horizon borders will always be very
close to the top of image, and will appear to be a zigzag pattern.) The parameter
BAR_THRESH and BAA_THRESH are useful when horizon borders occupy only part of the 
image.


.page
METHOD:

The horizon detection algorithm consists of the following steps:

  1) Trim top, bottom, left, and right borders of the input image.
  2) Use a min, or max, or median filter with filter window size defined by 
     FILTER_SIZE parameter to smooth out salt-and-pepper noise in input images.
  3) Use Sobel operator to compute gradient magnitude image and gradient 
     direction image based on the smoothed image.
  4) Preliminary horizon borders detection by optimizing the difference of sky 
     and ground busyness levels. Horizon borders are a 1 dimensional array that 
     has the same width as the original input image. 
  5) Outliers and weak horizon borders detection and refinement.
  6) Remove the outliers that cannot be refined from pervious step. Remove the 
     columns without sky region. 

Depending on input image types, sometimes there are one or two lines appear on 
top, bottom, left, or right of input images that are significantly brighter or 
darker than their neighboring pixels. If these lines are not trimmed, it will 
result in very strong edges when calculating gradient magnitude images. These 
strong edges contribute to sky and ground busyness level calculation, and the 
accuracy of detecting horizon borders decrease significantly. 

Salt-and-pepper noise presents itself as sparsely occurring white and black pixels. 
Median filter should be effective to remove salt-and-pepper noise; max filter should 
be effective to remove pepper noise; min filter should be effective to remove salt 
noise. Filter window size is crucial when removing noise, and it is usually an odd 
number. In general, the larger the filter window size, the more blurry the resulted 
image is.

Sobel operator has one 3x3 horizontal kernel and one 3x3 vertial kernel. 

  horizontal kernel:  | -1  0  1 |       vertial kernel:  | -1  -2  -1 |
                      | -2  0  2 |                        |  0   0   0 |
                      | -1  0  1 |                        |  1   2   1 |

Convolve horizontal kernel with the original image will give us the edges horizontally 
denoted as Gx, and convolve vertial kernel with the original image will give us the 
edges vertically denoted as Gy. Based on the properties of the two kernels, Gx is 
defined as increasing in the "right" direction, and Gy is defined as increasing in the 
"down" direction. Combine Gx and Gy use the equation listed below will give us gradient 
magnitude image and gradient direction image.
  
  1. G = sqrt(Gx^2 + Gy^2)    gradient magnitude image.
  2. theta = arctan(Gy / Gx)  gradient direction image, depending on whether Gx and Gy 
                              are positive or negative numbers, theta belongs to different
                              quadrants. 

The preliminary horizon borders are calculated by maximizing the difference of sky and 
ground busyness levels. The optimization function Jn is defined below:
  
  Jn = Ground_busyness_level - Sky_busyness_level                               (1)

which
                           sum(ground pixels from gradient magnitude image)
  Ground_busyness_level = --------------------------------------------------    (2)
                          count(ground pixels from gradient magnitude image)

                        sum(sky pixels from gradient magnitude image)
  Sky_busyness_level = -----------------------------------------------          (3)
                       count(sky pixels from gradient magnitude image) 

The complete algorithm of finding maximum Jn value Jn_max is defined below:

       thresh_max - thresh_min
  n = ------------------------- + 1
       search_increment_factor

  for k = 1 to n
                       thresh_max - thresh_min
      t = thresh_min + ----------------------- x (k - 1)
                               n - 1

      for samp = 0 to image_width
          border_tmp[samp] = image_height

          for line = 0 to image_height  
              if gradient_magnitude_image(line, samp) >= t
                  border_tmp[samp] = line
                  break
              end if
          end for
      end for

      compute Ground_busyness_level using equation (2) listed above
      compute Sky_busyness_level using equation (3) listed above

      Jn = Ground_busyness_level - Sky_busyness_level

      if Jn > Jn_max
          Jn_max = Jn
          border = border_tmp
      end if
  end for

Outliers and weak horizon borders detection and refinement is an iterative process. 
The maximum iteration of detection and refinement is determined by either WH_ITER_MAX 
parameter or if there is no outlier and weak horizon detected. A horizon column is 
defined as outlier if its value is bigger or smaller than the average of its N neighbors 
by a threshold value. Determine whether a horizon column has weak horizon above it 
depends on two inputs from gradient magnitude image and gradient direction image. First, 
in gradient magnitude image, if there is a pixel value that is bigger or smaller than 
the average of all pixle values above the current detected position by a threshold value, 
then the program will further check gradient direction image. In gradient direction image, 
if a NxN space with the suspicious weak horizon pixel at the center contains more than 1/3 
pixels that are almost equal to the suspicious weak horizon pixel, then the suspicious weak 
horizon pixel will be defined as weak horizon pixel. The reason to use both gradient 
magnitude image and gradient direction image is to increase the accuracy of weak horizon 
detection. If only gradient magnitude image is used, the weak horizon detected can highly 
be a salt-and-pepper noise that was not successfully removed from preprocessing step. 
Once the horizon columns are marked as outlier or weak horizon existence, the optimizing
difference of sky and ground busyness levels algorithm introduced above will be performed 
on these columns individually.

In order to remove columns without sky region, the program must be able to first detect
them. The program analyzes the shape of the detected horizon borders to determine which 
part is true horizon and which part is columns without sky region. The false horizon borders
detected for the columns without sky region will satisfy the following two conditions:

  1) very close to the top of the image.
  2) the shape of the horizon borders appears to be in a "zigzag" pattern. 

For testing condition 1, the average of horizon border is calculated, and parameters BAA_THRESH
and BAR_THRESH threshold values are defined. For testing condition 2, the average of the absolute 
difference of horizon border is calculated, and parameters BAADA_THRESH and BAADR_THRESH threshold
valeus are defined. BAA_THRESH stands for border average accept threshold; BAR_THRESH stands for 
border average reject threshold; BAADA_THRESH stands for border average of absolute difference
accept threshold; BAADR_THRESH stands for border average of absolute difference reject threshold. 
The algorithm of determining true and false horizon is shown below:
  
  compute border_avg
  compute border_avg_absdiff

  if border_avg <= BAR_THRESH ||
     (border_avg <= BAA_THRESH && border_avg_absdiff >= BAADA_THRESH) ||
     border_avg_absdiff >= BAADR_THRESH
         marked as outliers or columns without sky region
  else if border_avg > BAA_THRESH && border_avg_absdiff < BAADA_THRESH
         marked as true horizon
  else 
         break the horizon borders in half, and recursively call this 
         algorithm until all the horizon borders are categorized.      
  end if

.PAGE: 
HISTORY:
2016-04-05  Steven Lu  Initial horizon by Steven Lu.

COGNIZANT PROGRAMMER: Steven Lu

.LEVEL1
.VARI INP
A single 1-band grayscale input image.

.VARI OUT
A Comma-separated values (CSV) file.

.VARI SH_THRESH_MIN
Minimum threshold value for detecting strong horizon borders.

.VARI SH_THRESH_MAX
Maximum threshold value for detection strong horizon borders.

.VARI SH_SIF
Strong horizon search incremental factor.

.VARI WH_THRESH_MIN
Minimum threshold value for detecting weak horizon borders.

.VARI WH_THRESH_MAX
Maximum threshold value for detecting weak horizon borders.

.VARI WH_SIF
Weak horizon search incremental factor.

.VARI OUTLIER_THRESH
If the position a horizon border is vertically away its N immediate neighbors 
by the value of this parameter in pixels, the horizon border will be classified
as an outlier.

.VARI OUTLIER_SIF
Outlier search interval factor. 

.VARI WH_MAG_THRESH
Gradient magnitude image weak horizon borders threshold value.

.VARI WH_DIR_THRESH
Gradient direction image weak horizon borders threshold value.

.VARI WH_DIR_SIF
Gradient direction image weak horizon searching interval factor.

.VARI WH_ITER_MAX
Maximum iterations to search for weak horizon borders.

.VARI BAA_THRESH
Border average acceptance threshold value.

.VARI BAR_THRESH
Border average rejection threshold value.

.VARI BP_FACTOR
Border partition factor.

.VARI BAADA_THRESH
Border average of absolute difference acceptance threshold value.

.VARI BAADR_THRESH
Border average of absolute difference rejection threshold value.

.VARI SMOOTH_IMG
Optional output for smoothed image.

.VARI GM_IMG
Optional output for gradient magnitude image.

.VARI GD_IMG
Optional output for gradient direction image.

.VARI QL_IMG
Optional output for horizon borders overlay on top of the original
image served for quick look purpose.

.VARI FILTER_SIZE
The smoothing filter size in pixels.

.VARI FILTER_TYPE
The smoothing filter type.

.VARI TRIMTOP
Number of line(s) to cut from the upper border of the input image.

.VARI TRIMBOT
Number of line(s) to cut from the lower border of the input image.

.VARI TRIMLEFT
Number of sample(s) to cut from the left border of the input image.

.VARI TRIMRIGHT
Number of sample(s) to cut from the right border of the input image.

.VARI TRIM_IMG
Optional output for image with borders trimmed.

.LEVEL2
.VARI INP
A single 1-band grayscale input image. The program works better if the input 
image is radiometric corrected.

.VARI OUT
The output of this program will be a Comma-separated values (CSV) file.
The length of the output CSV file should always be exactly the the same as
input image's width. Each integer value in the CSV file represents the
horizon border's LINE position in that specific SAMP.
For example:
  324,325,325,326,327, ... ...
This means that at column or SAMP 0, the horizon border is at row or LINE 324;
at column or SAMP 1, the horizon border is at row or LINE 325, and so on. 

.VARI SH_THRESH_MIN
Minimum threshold value for detecting strong horizon borders. The program will
iteratively search through gradient magnitude image for finding preliminary 
horizon borders. This parameter defines at what value the search starts. 
According to the definition of Sobel operator, the pixel intensity range in 
gradient magnitude image is from 0 to 2.68E+8. See METHOD section for how 
the range is calculated. In theory, we should choose the minimum value to be 
0. However, if we do, the program will become very sensitive to weaker horizon 
borders and the noisy edges mostly present in sky region in the gradient magnitude 
image. The program should still be able to find the horizon borders, but it 
requires more computation power to achieve that. In practice, it is unlikely 
the strong horizon border pixel values in gradient magnitude image will be smaller 
than 200, so it is set to be 200 by default. Decreasing the threshold value should 
make the program sensitive to weaker horizon borders. 

.VARI SH_THRESH_MAX
Maximum threshold value for detecting strong horizon borders. Similar to parameter
SH_THRESH_MIN, the difference is this parameter defines at what value the search
ends. According to the definition of Sobel operator, the pixel intensity range in
gradient magnitude image is from 0 to 2.68E+8. In theory, the maximum value should
be 2.68E+8. However, for a natural 12-bit image it is unlikely the intensity 
difference will reach 4096, which means the searching process is also unlikey
will reach 2.68E+8. In practice, almost all the times, the program finds the optimal 
solution when SH_THRESH_MAX < 1000, so the default is set to be 1000. 

.VARI SH_SIF
Strong horizon search incremental factor. This parameter should be used together with
SH_THRESH_MIN and SH_THRESH_MAX to be meaningful. The program will iteratively search
through gradient magnitude image for finding preliminary horizon borders. It defines
the sampling step from SH_THRESH_MIN to SH_THRESH_MAX. Considering the balance between
search precision and computational complexity, the default is set to be 50. Increase
the value of this parameter should cause seach precision and computational complexity
to decrease. Decrease the value of this parameter should cause search precision and
computational complexity to increase.

.VARI WH_THRESH_MIN
Minimum threshold value for detecting weak horizon borders. Similar to SH_THRESH_MIN.
The difference is this parameter is used to find weak horzion borders. Weak horizon
borders will be represented as weaker edges in gradient magnitude image. This parameter
should be set to a little bigger than 0. Doing so will make the program sensitive
enough to find weak edges. Addtional processes are enabled to exculde noisy edges when 
detecting weak horizon borders. See METHOD section for details.
 
.VARI WH_THRESH_MAX
Maximum threshold value for detecting weak horizon borders. Similar to SH_THRESH_MAX.
The difference is this parameter is used to find weak horzion borders. This parameter
is usually set to equal to or a little smaller than SH_THRESH_MIN.  
 
.VARI WH_SIF
Weak horizon search incremental factor. Similar to SH_SIF. This parameter should be 
set to smaller than SH_SIF.

.VARI OUTLIER_THRESH
If the position a horizon border is vertically away its N immediate neighbors by the 
value of this parameter in pixels, the horizon border will be classified as an outlier. 
This parameter is used in outliers and weak horizon borders detection and refinement 
step.
 
.VARI OUTLIER_SIF
Outlier search interval factor. This parameter defines how many immediate neighbors 
in one direction to be used for calculating the average to compare with the target 
horizon border. The total number of neighboring pixels to be used is 2 times this
parameter.

.VARI WH_MAG_THRESH
Gradient magnitude image weak horizon borders threshold value. This parameter is used 
for detecting the presence of weak horizon borders. If the current pixel value in
gradient magnitude image is greater than the average of the current pixel column by 
the value of this parameter. The current pixel will temporarily be marked as possible
weak horizon border for further verification. 

.VARI WH_DIR_THRESH
Gradient direction image weak horizon borders threshold value. This parameter is used 
for verifying if a temporary weak horizon border previously marked using parameter 
WH_MAG_THRESH is a true weak horizon border. For a temporary weak horizon border previously
marked using parameter WH_MAG_THRESH, if the absolute difference between the temporary weak 
horizon border and 1/3 of its neighboring pixels' direction defined in a N x N space is 
within the range of -WH_DIR_THRESH to WH_DIR_THRESH, then the temporary weak horizon border
will be classified as true weak horizon border.

.VARI WH_DIR_SIF
Gradient direction image weak horizon searching interval factor. This parameter is 
used to define a N x N search space for identifying a possible weak horizon border.
In general, this parameter shouldn't be changed very often. It is provided to handle
some extreme situations. 

.VARI WH_ITER_MAX
Maximum iterations to search for outliers and weak horizon borders. Outliers and weak 
horizon borders detection and refinement is a iterative process. The pamameter defines 
the maximum iterations the program will detect and refine ourliers and weak horizon 
borders. The maximum iteration cannot exceed 30. If it exceeds 30, it will be reset to
be 30 in the program. If this parameter is set to 0, then the outliers and weak horizon
borders detection and refinement process will be turned off.

.VARI BAA_THRESH
Border average acceptance threshold value. This parameter is used together with 
BAR_THRESH, BP_FACTOR, BAADA_THRESH, and BAADR_THRESH to remove outliers and
columns without sky region. Please see the algorithm described in METHOD section
for how to use this parameter.

.VARI BAR_THRESH
Border average rejection threshold value. This parameter is used together with 
BAA_THRESH, BP_THRESH, BAADA_THRESH, and BAADR_THRESH to remove outliers and 
columns without sky region. Please see the algorithm described in METHOD section
for how to use this parameter.

.VARI BP_FACTOR
Border partition factor. This parameter is used together with BAA_THRESH, BAR_THRESH,
BAADA_THRESH, and BAADR_THRESH to remove outliers and columns without sky region.
The program provides the option to remove outliers and columns without sky region 
using the horizon borders as a whole. The program also provides the option to
first cut the horizon borders into parts, and then remove outliers and columns without
sky region. This parameter indicates how many parts to cut the horizon borders.

.VARI BAADA_THRESH
Border average of absolute difference acceptance threshold value. This parameter is 
used together with BAA_THRESH, BAR_THRESH, BP_THRESH, and BAADR_THRESH to remove 
outliers and columns without sky region. Please see the algorithm described in 
METHOD section for how to use this parameter.

.VARI BAADR_THRESH
Border average of absolute difference rejection threshold value. This parameter is used
together with BAA_THRESH, BAR_THRESH, BP_THRESH, and BAADA_THRESH to remove outliers
and columns without sky region. Please see the algorithm described in METHOD section
for how to use this parameter.

.VARI SMOOTH_IMG
Optional output for smoothed image. The size of the smoothed image will be slightly 
smaller than the original image depending on the size of filter window is used. 
The width and height of the smoothed image output is given by the two equation below:

  smoothed_image_width = original_image_width - 2 * floor(filter_size / 2)
  smoothed_image_height = original_image_height - 2 * floor(filter_size / 2) 

After applying the smoothing filter on the original image, the smoothed image has the 
same width and height compared to the original image, but the pixel values of the borders 
of the smoothed image will not be accurate. Instead of keeping the inaccurate pixel values,
the program will cut the borders.

.VARI GM_IMG
Optional output for gradient magnitude image. Gradient magnitude image is calculated using 
Sobel operator. For detailed calculation, please see METHOD section. Gradient magnitude 
image provides analytical and other useful information. It is recommanded to output the 
gradient magnitude image, especially when tweaking the parameters. 

.VARI GD_IMG
Optional output for gradient direction image. Gradient direction image is calculated using 
Sobel operator. For detailed calculation, please see METHOD section. Gradient direction 
image is used when identifying whether a pixel or a group of pixels is weak horizon 
border(s) or noise. It is recommaned to output the gradient direction image, especially 
when tweaking the parameters.

.VARI QL_IMG
Optional output for horizon borders overlay on top of the original image served for quick 
look purpose. The final horizon borders will be assigned with DN value 10000, and the
preliminary horizon borders ill be assigned with DN value -10000. It is highly recommanded
to output the quick look image.

.VARI FILTER_SIZE
The smoothing filter size in pixels. The minimum filter size allowed in this program is
3 x 3. Filter size significantly affects the program's execution time. The computational
complexity of applying a smoothing filter to an image is O(MNC^2), where C is the filter 
size, M is the image width, and N is the image height. Filter size should be defined based 
on the size of noises. In general, if the noise size is 3 x 3, then a filter size of 
7 x 7 should be effective to blend them.

.VARI FILTER_TYPE
The smoothing filter type. Three filter types are provided in this program. They are
MIN, MAX, and MEDIAN. MIN filter is usually used to blend salt noise. MAX filter is 
usually used to blend pepper noise. MEDIAN filter is usually used to blend salt-and-pepper
noise.

.VARI TRIMTOP
Number of line(s) to cut from the upper border of the input image. If this parameter is 
set to 0, then nothing will be cutted. 

.VARI TRIMBOT
Number of line(s) to cut from the lower border of the input image. If this parameter is
set to 0, then nothing will be cutted.

.VARI TRIMLEFT
Number of sample(s) to cut from the left border of the input image. If this parameter is
set to 0, then nothing will be cutted.

.VARI TRIMRIGHT
Number of sample(s) to cut from the right border of the input image. If this parameter is
set to 0, then nothing will be cutted.

.VARI TRIM_IMG
Optional output for image with borders trimmed.  

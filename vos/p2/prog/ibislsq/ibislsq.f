      INCLUDE 'VICMAIN_FOR'
      SUBROUTINE MAIN44
C  IBIS ROUTINE "ibislsq"
C
C  PURPOSE:  PERFORMS A LEAST SQUARES LINEAR FIT TO A NUMBER
C  OF COLUMNS IN AN IBIS INTERFACE FILE PLACING THE SOLUTION
C  COEFFICIENTS AND/OR  RESIDUALS IN OTHER COLUMNS AS DESIRED.
C  THE SOLUTION IS ALSO PRINTED. 
C
C   1-95  AMS   (CRI) MSTP S/W CONVERSION (VICAR PORTING)
C   1-87  SXP   Modified to use LLSQ to solve linear least 
C               squares system of equations.


	IMPLICIT NONE
	INTEGER	MAXLEN, MAXIND, MAXDEP, MAXTOTLEN
	PARAMETER (MAXLEN = 5000, MAXIND=20, MAXDEP=5,  MAXTOTLEN=10000)
	REAL INDBUF(MAXLEN*MAXIND), A(MAXLEN*MAXIND)
        REAL ASAVE(MAXLEN*MAXIND), DEPBUF(MAXLEN*MAXDEP)
        REAL B(MAXLEN*MAXDEP), BSAVE(MAXLEN*MAXDEP)
	REAL RES(MAXLEN*MAXDEP), RESBUF(MAXTOTLEN*MAXDEP)
	REAL SOLUTION(MAXDEP*MAXIND), SOLBUF(MAXTOTLEN*MAXDEP)
	REAL CONTROL(MAXTOTLEN), LASTCONTROL
	REAL IPIV(MAXIND), AUX(2*MAXIND)
	REAL ROWBUF(40)
	REAL EPS
	INTEGER	CLEN, NCOL, COLS(40),  UNIT, STATUS, UPIBIS, UPRECORD
	INTEGER	INDCOL(MAXIND), DEPCOL(MAXDEP), RESCOL(MAXDEP)
	INTEGER	SOLCOL(MAXDEP), NINDCOL, NDEPCOL, NRESCOL, NSOLCOL
	INTEGER	RESDEF, SOLDEF, CONCOL, DUMMY, CONDEF
	INTEGER	LEN, I,J, ROW, STARTROW, IER, SET
	INTEGER	INDPTR, DEPPTR, RESPTR, SOLPTR
	LOGICAL NOPRINT, XVPTST, NOSOLUTION
	CHARACTER*78	STRING
	DATA	EPS/1.E-7/

	EXTERNAL TRANSPOSE

        CALL IFMESSAGE('IBISLSQ version 2-JAN-95')
        CALL XVEACTION('SA',' ')

C		GET PARAMETERS

	CALL XVP ('INDCOL', INDCOL, NINDCOL)
	CALL XVP ('DEPCOL', DEPCOL, NDEPCOL)
	CALL XVPARM ('SOLCOL', SOLCOL, NSOLCOL, SOLDEF, MAXDEP)
	CALL XVPARM ('RESCOL', RESCOL, NRESCOL, RESDEF, MAXDEP)
	CALL XVPARM ('CONCOL', CONCOL, DUMMY, CONDEF, 1)
	NOPRINT = XVPTST ('NOPRINT')


	IF (RESDEF .EQ. 0) THEN
	    IF (NRESCOL .NE. NDEPCOL) THEN
		CALL XVMESSAGE
     +	  ('NUMBER OF RESIDUAL COLS MUST EQUAL NUMBER OF DEP. COLS',' ')
		CALL ABEND
	    ENDIF
	ENDIF
	IF (SOLDEF .EQ. 0) THEN
	    IF (NSOLCOL .NE. NDEPCOL) THEN
		CALL XVMESSAGE 
     +	  ('NUMBER OF SOLUTION COLS MUST EQUAL NUMBER OF DEP. COLS',' ')
		CALL ABEND
	    ENDIF
	ENDIF

C		INITIALIZE VARIABLES
	RESPTR = 1
	SOLPTR = 1
	DO I = 1,40
	    COLS(I) = I
	ENDDO
	SET = 1
	ROW = 1

C		OPEN THE INTERFACE FILE
        CALL XVUNIT(UNIT, 'INP', 1, STATUS, ' ')
	CALL IBIS_FILE_OPEN(UNIT,UPIBIS,'UPDATE',0,0,' ',' ',STATUS)
        IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)
        CALL IBIS_FILE_GET(UPIBIS,'NC',NCOL,1,1)
        CALL IBIS_FILE_GET(UPIBIS,'NR',CLEN,1,1)

	IF (CLEN .GT. MAXTOTLEN) THEN
	    CALL MABEND ('COLUNM LENGTH TOO LONG')
	ENDIF

C		READ IN CONTROL COLUMN
	IF (CONDEF .EQ. 0) THEN
	   CALL IBIS_COLUMN_READ(UPIBIS,CONTROL,CONCOL,1,CLEN,STATUS)
           IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UPIBIS,STATUS,1)
	ENDIF


C		LOOP THROUGH ALL OF THE SETS OF DATA
100	CONTINUE

C		FILL MATRICES FOR LLSQ

	STARTROW = ROW
	LASTCONTROL = CONTROL(STARTROW)
	INDPTR = 0
	DEPPTR = 0
        CALL IBIS_RECORD_OPEN(UPIBIS,UPRECORD,'FORMAT:REAL',
     &                        COLS,NCOL,'REAL',STATUS)
        IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)
	DO WHILE (ROW .LE. CLEN .AND. CONTROL(ROW) .EQ. LASTCONTROL )
	    CALL IBIS_RECORD_READ(UPRECORD, ROWBUF, ROW, STATUS)
            IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UPIBIS,STATUS,1)
	    DO I = 1, NINDCOL
		INDBUF(INDPTR+I) = ROWBUF(INDCOL(I))
	    ENDDO
	    INDPTR = INDPTR + NINDCOL
	    DO I = 1, NDEPCOL
		DEPBUF(DEPPTR+I) = ROWBUF(DEPCOL(I))
	    ENDDO
	    DEPPTR = DEPPTR + NDEPCOL
	    LASTCONTROL = CONTROL(ROW)
	    ROW = ROW + 1
	ENDDO
	LEN = ROW - STARTROW
	IF (LEN .GT. MAXLEN) THEN
	    CALL MABEND('SET LENGTH TOO LONG')
	ENDIF


	NOSOLUTION = (LEN .LT. NINDCOL)
	IF (NOSOLUTION) GO TO 999

	CALL TRANSPOSE (INDBUF, A, ASAVE, LEN, NINDCOL)
	CALL TRANSPOSE (DEPBUF, B, BSAVE, LEN, NDEPCOL)


C  PERFORM LEAST SQUARES FIT.

	CALL LLSQ (A, B, LEN, NINDCOL, NDEPCOL,
     +			SOLUTION, IPIV, EPS, IER, AUX)
	IF (IER .NE. 0) THEN
	    CALL XVMESSAGE ('MATRIX RANK TOO SMALL',' ')
	    NOSOLUTION = .TRUE.
	ENDIF

999	CONTINUE
	IF (NOSOLUTION) THEN
	    DO I = 1, NDEPCOL*NINDCOL
		SOLUTION(I) = -999.0
	    ENDDO
	ENDIF


C		CALCULATE THE RESIDUALS

	IF (RESDEF .EQ. 0) THEN
	    CALL CALCRES (ASAVE, BSAVE, SOLUTION, RES,
     +				LEN, NINDCOL, NDEPCOL,   NOSOLUTION)
	    CALL TRANSPOSE (RES, RESBUF(RESPTR), BSAVE, NDEPCOL, LEN)
	    RESPTR = RESPTR + LEN*NDEPCOL
	ENDIF

C		PRINT OUT THE SOLUTION

	CALL TRANSPOSE (SOLUTION, SOLBUF(SOLPTR), BSAVE, NDEPCOL, 
     +                  NINDCOL)
	IF (.NOT. NOPRINT) THEN
	    WRITE (STRING, '(A,I3)' )  ' SOLUTION FOR SET: ', SET
	    CALL XVMESSAGE (STRING,' ')
	    DO J = 0, NINDCOL-1
               DO I = 1,NDEPCOL
		  WRITE (STRING((1+(I-1)*14):(1+(I-1)*14+13)),
     +                   '(E12.5,2X)') SOLBUF(SOLPTR+J*NDEPCOL+(I-1))
               ENDDO
	       CALL XVMESSAGE (STRING,' ')
	    ENDDO
	    CALL XVMESSAGE (' ',' ')
	ENDIF
	SOLPTR = SOLPTR + LEN*NDEPCOL


	SET = SET + 1
	IF (ROW .LE. CLEN) GO TO 100
C		GO BACK FOR MORE SETS


	CALL IBIS_FILE_CLOSE (UPIBIS,' ',STATUS)
        IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)



C   REOPEN FILE IF WE NEED TO PUT RESIDUALS OR SOLUTIONS IN IT

	IF (RESDEF .EQ. 0 .OR. SOLDEF .EQ. 0) THEN
            CALL XVUNIT(UNIT, 'INP', 1, STATUS, ' ')
	    CALL IBIS_FILE_OPEN(UNIT,UPIBIS,'UPDATE',0,0,
     &                          ' ',' ',STATUS)
            IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)
            CALL IBIS_FILE_GET(UPIBIS,'NC',NCOL,1,1)
            CALL IBIS_FILE_GET(UPIBIS,'NR',CLEN,1,1)
	    RESPTR = 0
	    SOLPTR = 0
            CALL IBIS_RECORD_OPEN(UPIBIS,UPRECORD,'FORMAT:REAL',
     &                            COLS,NCOL,'REAL',STATUS)
            IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)
	    DO ROW = 1, CLEN
	        CALL IBIS_RECORD_READ(UPRECORD, ROWBUF, ROW, STATUS)
                IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UPIBIS,STATUS,1)
		IF (RESDEF .EQ. 0) THEN
		    DO I = 1, NDEPCOL
			ROWBUF(RESCOL(I)) = RESBUF(RESPTR+I)
		    ENDDO
		    RESPTR = RESPTR + NDEPCOL
		ENDIF
		IF (SOLDEF .EQ. 0) THEN
		    DO I = 1, NDEPCOL
			ROWBUF(SOLCOL(I)) = SOLBUF(SOLPTR+I)
		    ENDDO
		    SOLPTR = SOLPTR + NDEPCOL
		ENDIF
	        CALL IBIS_RECORD_WRITE(UPRECORD, ROWBUF, ROW, STATUS)
                IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UPIBIS,STATUS,1)
	    ENDDO
	    CALL IBIS_FILE_CLOSE (UPIBIS,' ',STATUS)
            IF (STATUS.NE.1) CALL IBIS_SIGNAL_U(UNIT,STATUS,1)
	ENDIF


	RETURN
	END



	SUBROUTINE TRANSPOSE (IN, OUT, SAVE,  M, N)
	IMPLICIT NONE
	INTEGER	I,J,  M,N
	REAL	IN(N,M), OUT(M,N), SAVE(M,N)

	DO I = 1, M
	    DO J = 1, N
		OUT(I,J) = IN(J,I)
		SAVE(I,J) = OUT(I,J)
	    ENDDO
	ENDDO

	RETURN
	END


	SUBROUTINE CALCRES (A, B, X, RES, M, N, L, NOSOLUTION)
	IMPLICIT NONE
	INTEGER	I,J,K,  M,N,L
	REAL	A(M,N), B(M,L), X(N,L), RES(M,L), SUM
	LOGICAL	NOSOLUTION

	IF (NOSOLUTION) THEN
	    DO I = 1, M
		DO J = 1, L
		    RES(I,J) = 0.0
		ENDDO
	    ENDDO
	ELSE
	    DO I = 1, M
		DO J = 1, L
		    SUM = B(I,J)
		    DO K = 1, N
			SUM = SUM - A(I,K)*X(K,J)
		    ENDDO
		    RES(I,J) = SUM
		ENDDO
	    ENDDO
	ENDIF

	RETURN
	END

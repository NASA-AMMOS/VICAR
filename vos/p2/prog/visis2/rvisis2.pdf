PROCEDURE HELP=*
REFGBL $ECHO

parm name (string,50)
parm type keyword valid=(CUBE,TUBE,IOF,VIOF,XTUB,WTS,SDEV) default=CUBE
parm mode keyword valid=(TOVIC,FROMVIC) default=TOVIC
parm plots integer default=0
parm break_um real default=0.7
parm to_ori keyword count=0:1 valid=TO_ORI default=--
parm east_lon keyword count=0:1 valid=EAST_LON default=--
parm sii keyword valid=(SII,NOSII) default=NOSII
parm dir (string,30) count=0:1 default=--
PARM HOST KEYWORD COUNT=0:1 DEFAULT=-- +
 VALID=("VAX-VMS","AXP-VMS","SUN-SOLR","SUN-4","SUN-3","X86-SOLR","DECSTATN",+
 "SGI","TEK","HP-700","AXP-UNIX","AXP-LINUX","X86-LINUX")
parm histfile keyword count=0:1 valid=HISTFILE default=--
parm task keyword valid=(NIMSCMM,NIMSCMM2,VISIS2) default=NIMSCMM2

BODY
LET $ECHO="YES"

local cubnam (string,80)
local qubnam (string,80)
local cocnam (string,80)
local hisnam (string,80) count=0:1 initial=--
local dn (string,5) initial="RAD"

if (mode = "TOVIC")
  if ($count(east_lon)>0)
    write "EAST_LON option only valid in FROMVIC mode!"
    let $count(east_lon = 0
  end-if
end-if

if (type = "CUBE")
  let cubnam="&dir"//"&name"//".CUB"
  let cocnam="&dir"//"&name"//".COC"
  if ($count(east_lon)=0)
    let qubnam="&dir"//"&name"//".QUB"
  else
    let qubnam="&dir"//"&name"//"_ELON.QUB"
  end-if
else-if (type = "IOF")
  let cubnam="&dir"//"&name"//".CIOF"
  let cocnam="&dir"//"&name"//".COC"
  if ($count(east_lon)=0)
    let qubnam="&dir"//"&name"//".IOF"
  else
    let qubnam="&dir"//"&name"//"_ELON.IOF"
  end-if
else-if (type = "TUBE")
  let cubnam="&dir"//"&name"//".TUB"
  let cocnam="&dir"//"&name"//".COT"
  let qubnam="&dir"//"&name"//".VTUB"
else-if (type = "XTUB")
  let cubnam="&dir"//"&name"//".XTUB"
  let cocnam="&dir"//"&name"//".XCOT"
  let qubnam="&dir"//"&name"//".VXTUB"
else-if (type = "WTS")
  let cubnam="&dir"//"&name"//".WTS"
  let cocnam="&dir"//"&name"//".COC"
  let qubnam="&dir"//"&name"//".WTQUB"
else-if (type = "XTUB")
  let cubnam="&dir"//"&name"//".SDEV"
  let cocnam="&dir"//"&name"//".COC"
  let qubnam="&dir"//"&name"//".SDQUB"
else		! VIOF
  let cubnam="&dir"//"&name"//".TIOF"
  let cocnam="&dir"//"&name"//".COT"
  let qubnam="&dir"//"&name"//".VIOF"
end-if
if ($count(histfile)>0)
  let hisnam="&dir"//"&name"//".LAB"
end-if

if (mode = "FROMVIC")

  if (break_um > 5.2) let dn = "IOF"

  hist2d &cubnam 2DHIST out_nl=256 out_ns=408 +
   'exclude 'replicate dn=&dn break_um=&break_um

  if (task = "VISIS2")
    VISIS2 (2DHIST &cubnam &cocnam) &qubnam task=&task histfile=@hisnam east_lon=@east_lon
  else
    VISIS2 (2DHIST &cubnam &cocnam) &qubnam task=&task east_lon=@east_lon
  end-if

else		! TOVIC

  if (sii="SII")	! assume that plots=0 or 6 in this case
    if (plots = 0)
      VISIS2 &qubnam (2DHIST +
       &cubnam &cocnam SII) to_ori=@to_ori histfile=@hisnam
    else
      VISIS2 &qubnam (2DHIST +
       SP1 SP2 SP3 SP4 SP5 SP6 + 
       &cubnam &cocnam SII) to_ori=@to_ori histfile=@hisnam
    end-if
  else-if (plots = 0)
    VISIS2 &qubnam (2DHIST &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam host=@host
  else-if (plots = 1)		! (common Io case)
    VISIS2 &qubnam (2DHIST SP1 &cubnam &cocnam) to_ori=@to_ori +
     histfile=@hisnam
  else-if (plots = 2)
    VISIS2 &qubnam (2DHIST SP1 SP2 +
     &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam
  else-if (plots = 3)
    VISIS2 &qubnam (2DHIST SP1 SP2 SP3 +
     &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam
  else-if (plots = 4)		! (common RT case)
    VISIS2 &qubnam (2DHIST SP1 SP2 SP3 SP4 +
     &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam
  else-if (plots = 5)
    VISIS2 &qubnam (2DHIST SP1 SP2 SP3 SP4 SP5 +
     &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam
  else
    VISIS2 &qubnam (2DHIST +
     SP1 SP2 SP3 SP4 SP5 SP6 + 
     &cubnam &cocnam) to_ori=@to_ori histfile=@hisnam
  end-if

end-if

let $echo="no"

END-PROC
.TITLE
Procedure to run VISIS2 in forward and inverse (default) mode.
.HELP
VICAR program VISIS2 converts Galileo NIMS cubes (generated by program
NIMSCMM2) between VICAR and ISIS format.  Its calling sequence is
somewhat complex, reflecting the fact that a single ISIS cube becomes
multiple VICAR files, one for each object in the ISIS cube.  Therefore,
this procedure is provided in order to cover most cases with a simple
command line.

NOTE:  during Galileo Systematic Processing on MIPS, the functionality 
of RVISIS2 was implemented in procedure SYSNIMS2, which also included
the option of generating a NIMS Mask product.  The latter option is
not supported by RVISIS2, although the capability of processing an ISIS
cube containing the spectral plots of a Mask was retained.  Note that
SYSNIMS2 ran in forward mode only, and ran only under VMS.  Cubes made
by MIPS Systematic processing had names ending in the string "MSYnn".
.page
Calling sequence:

> RVISIS2 name [optional parameters]

where "name" is the cube filename, without directory (which may be 
specified by a separate parameter) or suffix.  Note that the cube 
suffix (filetype) cannot be specified freely, so the user is restricted 
to the following combinations for the two primary VICAR files, the
cube and the co-cube:

   VICAR  <->  ISIS        description
  CUB,COC     QUB	default case: radiance (projected) G-cube
  CIOF,COC    IOF	IOF G-cube
  TUB,COT     VTUB	radiance unprojected tube
  XTUB,XCOT   VXTUB	tube with co-added mirror positions (point source)
  TIOF,COT    VIOF	IOF tube

E.g., the ISIS cube 33JNGLOBAL01A_MSY01.QUB corresponds to the VICAR
cube and co-cube files 33JNGLOBAL01A_MSY01.CUB and 33JNGLOBAL01A_MSY01.COC.

Anything else must be done by running VISIS2 by hand.

The ISIS cube also always contains a 2-D Histogram object, which is
stored in a third VICAR file, which this proc always names 2DHIST.

In inverse mode, the History object will be stored in a VICAR file 
with the filetype LAB.  In forward mode, if task=VISIS2, then the
presence of this file is required.

In inverse mode, the following additional files may be created if
the corresponding objects are present in the ISIS cube (in which
case, this *must* be indicated by the parameters SII and/or PLOTS):

SII = spectral-index image (if this is present, then PLOTS may only
 be 0 or 6, to keep the procedure from being excessively complicated);

SP1 ... SP6 = one to six spectrum plot files

The maximum number of objects in the ISIS cube is 11:  cube, co-cube,
2D-histogram, spectral-index image, six spectrum plots, and history.
(The cube also has a label object, but this does not have a separate
VICAR file, but is instead converted to the VICAR cube label.)
.page
History:

xx-xxx-1996 -lwk- original version (VMS only)
01-sep-2002 -lwk- revised for unix port

.LEVEL1
.vari name
Cube filename,
without directory
or filetype.
.vari type
Specifies file
type(s)
.vari mode
Forward: vicar -> isis
or 
Inverse: isis -> vicar
(Renamed FROMVIC and
TOVIC for clarity.)
.vari plots
# of spectral plots
in ISIS cube
(Inverse mode only)
.vari break_um
Break wavelength
between Radiance and
IOF
(Forward mode only)
.vari to_ori
Fix for missing TO_ORIGIN
label item
.vari sii
Flags presence of Spectral
Index Image(s) in ISIS cube
(Inverse mode only)
.vari dir
Directory (including
any separator)
.vari task
VICAR program that generated
the cube.
(Forward mode only)
.LEVEL2
.vari to_ori
This is required for Perspective cubes made around Dec.1997, which
were missing the newly added TO_ORIGIN label item, specifying that the
ISIS convention for Line/Sample offsets had been reversed.


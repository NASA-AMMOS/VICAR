process help=*
PARM INP TYPE=STRING
PARM OUT TYPE=STRING
PARM SIZE TYPE=INTEGER COUNT=4 DEFAULT=(1,1,0,0)
PARM SL TYPE=INTEGER DEFAULT=1
PARM SS TYPE=INTEGER DEFAULT=1
PARM NL TYPE=INTEGER DEFAULT=0
PARM NS TYPE=INTEGER DEFAULT=0
PARM NSW TYPE=INTEGER DEFAULT=11
PARM NLW TYPE=INTEGER DEFAULT=11
PARM FILTER TYPE=KEYWORD VALID=(HIGHPASS,LOWPASS) DEFAULT=LOWPASS
PARM DCLEVEL TYPE=real DEFAULT=128.
PARM EDGE TYPE=KEYWORD VALID=(CYCLE,LCYCLE,SCYCLE,REFLECT) DEFAULT=REFLECT
END-PROC
.TITLE
BOXFLT2 - Box Filter Convolution Program
.HELP
PURPOSE:
boxflt2 applies a low-pass filter to an input image by taking the local
mean of all pixels contained within a prescribed window centered at
each pixel of the input image.  This mean then replaces the input value.
A highpass option is available which replaces each input value with the
difference between the input and the local mean, plus a constant DC-level
offset.

EXECUTION:

Examples
	boxflt2  INP  OUT  NLW=21  NSW=451

	This example performs a lowpass filter of size 451 samples by 21
	lines on the input. Reflection is performed at image boundaries.

	boxflt2  INP  OUT  NLW=101  NSW=1  'HIGHPASS  DCLEVEL=90  'CYCLE

	This examples performs a highpass filter of size 101 lines by 1
	sample with an output DCLEVEL of 90, performing cycling at the
	image boundaries.  (The omitted keywords are FILTER and EDGE,
	respectively.)

.page	
Modes of handling boundaries:
		a = pixel (1,1)		b = pixel (1,NS)
		c = pixel (NL,1)	d = pixel (NL,NS)
	+-------+-------+-------+	+-------+-------+-------+
	| d   c | c   d | d   c |	| a   b | a   b | a   b |
	|       |       |       |	|       |       |       |
	| b   a | a   b | b   a |	| c   d | c   d | c   d |
	|-------|-------|-------|	|-------|-------|-------|
	| b   a | a   b | b   a |	| a   b | a   b | a   b |
	|       |       |       |	|       |       |       |
	| d   c | c   d | d   c |	| c   d | c   d | c   d |
	|-------|-------|-------|	|-------|-------|-------|
	| d   c | c   d | d   c |	| a   b | a   b | a   b |
	|       |       |       |	|       |       |       |
	| b   a | a   b | b   a |	| c   d | c   d | c   d |
	+-------+-------+-------+	+-------+-------+-------+
		RELECTION			 CYCLING
.page
OPERATION:
boxflt2 performs a lowpass filter operation by taking the local mean of
all pixels contained within a prescribed window of NLW by NSW dimensions
centered at each pixel of the input image.  This mean then replaces the 
input value.  If the HIGHPASS option is specified, then the difference
between the input and the local mean plus a constant DC-level offset
replaces the input value. 

boxflt2 provides the user with the choice of using "reflection" or "cycling"
(wrap-around) at image boundaries.  In the default case, image reflection
is used, and may be depicted as above in the EXECUTION section.  If cycling
is desired, where the left boundary of the image is equivalent to the 
right boundary, and the upper boundary is equivalent to the lower boundary,
the reflection is performed as shown above in the CYCLING diagram.

.page
COMPARISONS to other filter programs

The FILTER program gives slightly different results with 1,1,1... etc
weights. FILTER has code that passed data out to a Floating Point
Systems Array Processor, AP-120B that did the convolution filter.
The array processor was supported on the IBM 270 and the DEC Vax.
In 1994 that code was emulated to work in a SUN unix environment.
FILTER does not provide boundary options

In 2010, Ray Bambery wrote a new convolution filtering program
GFILTER, from scratch. It gives the same results as BOXFLT2
with 1,1,1... filter weights. GFILTER provides zero boundaries,
reflection boundaries or wraparound boundaries.


.page
HISTORY

WRITTEN BY:  W. D. Benton, 1 June 1976
COGNIZANT PROGRAMMER:  R. J. Bambery
REVISION:  New
           Made Portable for UNIX   Richardson(CRI)  05-May-94 

    19-Apr-2011 - R. J. Bambery - Changed internals to operate 
                in REAL format. Now supports BYTE, HALF, FULL and
                REAL images
    02 May 2011 - R. J. Bambery - removed warning messages from gcc44 compiler

.LEVEL1
.VARIABLE INP
STRING - Input dataset
.VARIABLE OUT
STRING - Output dataset
.VARIABLE SIZE
INTEGER - Standard VICAR1 size field
.VARIABLE SL
INTEGER - Starting line
.VARIABLE SS
INTEGER - Starting sample
.VARIABLE NS
INTEGER - Number of lines
.VARIABLE NL
INTEGER - Number of samples
.VARIABLE NSW
INTEGER - Filter width in pixels
.VARIABLE NLW
INTEGER - Filter length in pixels
.VARIABLE FILTER
KEYWORD - Selects type of filtering (LOWPASS, HIGHPASS)
.VARIABLE DCLEVEL
INTEGER - Highpass constant
.VARIABLE EDGE
KEYWORD - Selects method of handling edges (REFLECT, CYCLE, LCYCLE, SCYCLE)
.LEVEL2
.VARIABLE NSW
NSW is the width in pixels of the box filter.  It must be less than
twice the image width in pixels and defaults to 11.
.VARIABLE NLW
NLS is the length in lines of the box filter.  It must be less than
twice the image length in pixels and defaults to 11.
.VARIABLE FILTER
FILTER=HIGHPASS specifies that the output is to be the highpass, rather than
the lowpass, version of the input, i.e., OUT = IN - LOW + DCLEVEL.
The default is lowpass filtering.
.VARIABLE DCLEVEL
Specifies (for highpass filter) the constant to be added to the 
difference (IN-LOW) in the highpass output image.  Default is 128.
.VARIABLE EDGE
Specifies image handling at image boundaries.  Setting EDGE=CYCLE or 'CYCLE
causes the program to treat the image as if it wrapped around at boundaries
in both directions.  'LCYCLE and 'SCYCLE cause wrap-around in the line and
sample direction only, respectively.  The default is for the program to 
reflect the image at the boundaries.
.END

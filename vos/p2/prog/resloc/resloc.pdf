process help=*
parm inp      type=string  count=1:2
parm out      type=string  count=1:2
parm camera   type=integer count=0:1   valid=4:7     default=--
parm frame    type=integer count=0:1                 default=--
parm planet   type=keyword count=0:1 	+
	      valid=(jupiter,saturn,uranus,neptune)  default=--
parm nlw      type=integer count=0:1   valid=(5:9)   default=5
parm nsw      type=integer count=0:1   valid=(5:9)   default=5
parm nhor     type=integer count=0:1   valid=(11:25) default=19
parm nver     type=integer count=0:1   valid=(11:25) default=19
parm sigma    type=real    count=0:1                 default=1.
parm rthresh  type=real    count=0:1   valid=(-1:1)  default=0.7
parm qthresh  type=real    count=0:1   valid=(-1:1)  default=0.6
parm redo     type=keyword count=0:1   valid=redo    default=--
parm nofilter type=keyword count=0:1   valid=nofilter default=--
parm noin     type=keyword count=0:1   valid=noin    default=--
parm nofill   type=keyword count=0:1   valid=nofill  default=--
parm dbug     type=keyword count=0:1   valid=dbug    default=--
parm tres     type=integer count=0:1   valid=0:202   default=0
parm reject   type=integer count=0:100 valid=0:202   default=0
parm ores     type=string  count=0:1   default=""
parm onom     type=string  count=0:1   default=""
parm pres     type=keyword count=0:1   valid=pres    default=--
parm pnom     type=keyword count=0:1   valid=pnom    default=--
parm print    type=keyword count=0:1   valid=print   default=--
parm pstats   type=keyword count=0:1   valid=pstats  default=--
parm pgeo     type=keyword count=0:1   valid=pgeo    default=--
end-proc

.TITLE
 "resloc" -- Voyager reseau location program
.HELP
Reference:  618-802 Voyager Imaging Science Subsystem Calibration Report,
Milosh Benesh and Paul Jespen.

Resloc is a VICAR program that locates the reseau marks in Voyager images.

When used together, resloc and geoma will remove the camera's geometric
distortions from the image.

	resloc inp=D out=(Res,Geo)
	geoma inp=(D,Geo) out=Dos size=(1,1,1000,1000)

Resloc finds the reseau marks in image D and stores their (line,sample)
coordinates together with their object-space coordinates in tiepoint file Geo.
Geoma creates an object-space version of D by mapping each reseau mark to its
known coordinates in object space and linearly interpolating elsewhere.  In
this procedure, the file Res plays no role.

Alternatively, the geometric correction can be combined with a map projection
by using program map3.

When used together, resloc and ressar77 will remove the reseau marks from the
image:

        resloc inp=D out=Res
        ressar77 inp=(D,Res) out=E

Resloc stores the (line,sample) coordinates of the reseau marks in file Res.
Ressar77 cosmetically removes the marks by interpolating over neighboring
pixels.  

A detailed description of resloc is presented in the following sections:

   1.The Voyager reseau
   2.Image windows
   3.The shape template
   4.Finding the reseau
   5.Correlation coefficient
   6.Darkness measure
   7.Closeness measure
   8.Detrending
   9.Camera noise
  10.Beam bending
  11.Filling the gaps
  12.Geometric calibration
  13.Geoma parameters
  14.Reseau database
  15.Resloc parameters


.page
1.The Voyager reseau 

The Voyager reseau is a network of fiducial marks spatially distributed over
the field of view of the camera.  They are numbered as follows:

   1     2     3     4     5     6     7     8     9    10    11    12
     13    14    15    16    17    18    19    20    21    22    23
  24    25    26    27    28    29    30    31    32    33    34    35
     36    37    38    39    40    41    42    43    44    45    46
  47    48                                       202          49    50
     51    52    53    54    55    56    57    58    59    60    61
  62    63                                                    64    65
     66    67    68    69    70    71    72    73    74    75    76
  77    78                                                    79    80
     81    82    83    84    85    86    87    88    89    90    91
  92    93                                                    94    95
     96    97    98    99   100   101   102   103   104   105   106
 107   108                                                   109   110
    111   112   113   114   115   116   117   118   119   120   121
 122   123                                                   124   125
    126   127   128   129   130   131   132   133   134   135   136
 137   138                                                   139   140
    141   142   143   144   145   146   147   148   149   150   151
 152   153                                                   154   155
    156   157   158   159   160   161   162   163   164   165   166
 167   168   169   170   171   172   173   174   175   176   177   178
    179   180   181    182  183   184   185   186   187   188   189
 190   191   192   193   194   195   196   197   198   199   200   201

The reseau marks are metal squares embedded on the faceplate of the vidicon.
By measuring the positions of these squares on the faceplate, and
the position of their shadows in the image, we obtain a coarse spatial
sampling of the geometric distortion in the image.

The marks are concentrated around the margins where the distortions are
largest.  The reseau is symmetric about its center (mark 101) except for
reseau mark 202, whose uniqueness establishes the orientation of the image.

Note:  The above numbering scheme differs from that in Benesh Fig. 3-39 in 
that the extra reseau mark is number 49 in Benesh, and 202 here.  Also, there
is a right-to-left reversal of the two grid patterens that is analogous to
what happens when a sign in a window is read from the inside and from the
outside.


.page
2.Image_windows

Let D be a Voyager image, where

	    |   d(1,1)   d(1,2) . . . d(1,800) |
	    |   d(2,1)   d(2,2) . . . d(2,800) |
	D = |      .        .  .         .     |
	    |      .        .    .       .     |
	    |      .        .      .     .     |
	    | d(800,1) d(800,2) ... d(800,800) |

and d(l,s) is the DN value at line-sample coordinates (l,s).

An image window is a rectangular area in the image.  Let W be a window in D,
where

	    | w(-m,-n) .  .  . w(0,-n) . . . w(m,-n) | 
	    |     .     .         .       .     .    |
	    |     .       .       .     .       .    |
	    |     .         .     .   .         .    |
	W = | w(-m,0)  .  .  . w(0,0)  . . . w(m,0)  | 
	    |     .        .      .  .         .     |
	    |     .      .        .     .   .  .     |
	    |     .   .           .        .    .    |
	    | w(-m,n)  .  .  . w(0,n)  . . . w(m,n)  | 


The window is centered at pixel (l,s) if w(0,0)=d(l,s).

Example: The window centered at the pixel (1,1) is

            |  0  0     0      0      0   |
            |  0  0     0      0      0   |
        W = |  0  0  d(1,1) d(1,2) d(1,3) |
            |  0  0  d(2,1) d(2,2) d(2,3) |
            |  0  0  d(3,1) d(3,2) d(3,3) |

As this example illustrates, windows along the corners and edges are allowed
provided we keep track of which pixels are real and which are not.

Integers m and n are the half-window dimensions of W.  The height and width
of the window are 2n+1 and 2m+1, which are always odd integers.

The total number of pixels in W is N=(2m+1)(2n+1).

The mean and standard deviations of W are

	         1
	mu(W) = ---sum(sum(w(i,j)))
	         N

	               1
     sigma(W) = sqrt{ ---sum(sum((w(i,j) - mu(W))**2))}
	               N

where i=-m,...,m and j=-n,...,n.


.page
4.The shape template

The shape template is a Gaussian approximation of a reseau mark.  The template
is represented by the window A, where the default A is

                   |250 234 220 234 250|
                   |234 161 100 161 234|
               A = |220 100   0 100 220|
                   |234 161 100 161 234|
                   |250 234 220 234 250|

What follows describes how this A came to be defined.

Each reseau mark is a metal square 0.04 mm on a side, and creates a shadow
in the image that is roughly 3x3 pixels in area.  Here are examples of
these shadows:
 
           3   3   3   3   3		255 255 255 255 255
           5   3   2   3   2		234 144 131 185 239
           3   1   0   0   2		177  51  48 164 241
           4   2   0   2   2		169  34  20 146 236
           5   5   4   3   4		203 147 166 252 252
 
   12  10  10  14  15    103  89  62  48  35    227 205 162 163 192
   11   7   7   9  13     81  33  16  33  48    199 121  43  81 172
   12   8   3   2  13     65  16   3  27  59    180  99   5  54 167
   12  12   7   7  12     79  49  46  79  92    174 116  48 107 206
   12  12  12  12  12    103 110 105 108 108    189 176 164 186 209

As the first example suggests, the shadow is sometimes too faint to locate
with confidence.

The shadows are never shaped like squares, but have a rounded appearance.
We approximate this shape with an inverted Gaussian of the form

			        1
	f(x,y) = 1 - e**{ - ----------*(x**2+y**2)}
                            2*sigma**2
 
f is called the reseau shape function.  f is actually a vast simplification
of John Kresznar’s shape function used in Mariner 9 and Viking Orbiter.  During
those missions, the shape of each reseau mark was individually measured and
modeled by a Gaussian multiplied by a fifth order polynomial.  For Voyager,
a simple Gaussian represents the shape of all 202 reseau marks.

The shape template is a digitized window of f, where

		    | a(-m,-n) .  .  . a(0,-n) .  .  . a(m,-n) |
		    |     .   .           .           .   .    |
		    |     .       .       .       .       .    |
		    |     .           .   .  .            .    |
		A = | a(-m,0)  .  .  . a(0,0)  .  .  . a(m,-0) |
		    |     .               .               .    |
		    |     .       .       .       .       .    |
		    |     .   .           .            .  .    |
		    | a(-m,n)  .  .  . a(0,n)  .  .  . a(m,n)  | 

and
		a(i,j) = 255*f(i,j).

The pixels are scaled by 255 to match the 0 to 255 DN range output by the
Voyager camera.

The default shape template shown at the top is for sigma=1.  A 5x5 template
appears to be the optimum size.  It is large enough to enclose the 3x3 shadow
plus 16 pixels of the surrounding background.


.page
6.Finding the Reseau

Let W be a window centered at line-sample coordinates (l,s) in image D, and
let A be the shape template.  The correlation coefficient rho measures how
closely A and W match:   
         	          cov(A,W)
        	rho = -----------------
               	      sigma(A)*sigma(W)

To find a reseau mark, a search is made in an area surrounding its nominal
coordinates.  Let (l0,s0) be these nominals.  We compute rho at every pixel
in the search area, creating a matrix R, where

	    | r(-m,-n) .  .  . r(0,-n) .  .  . r(m,-n) |
	    |     .    .          .          .    .    |
	    |     .       .       .       .       .    |
	    |     .          .    .    .          .    | 
	R = | r(-m,0)  .  .  . r(0,0)  .  .  . r(m,0)  |
	    |     .          .    .    .          .    | 
	    |     .       .       .       .       .    |
	    |     .    .          .          .    .    |
	    | r(-m,n)  .  .  . r(0,n)  .  .  . r(m,n)  |

and r(0,0) is the value of rho when W is centered at (l0,s0).

The mark is usually at the maximum value of R.  Occasionally, however
resloc will find another object in the search area that resembles A better than
the actual mark.  Also, as many as half of the marks along the margins of the
image fall off the edge.  In other words, we can never be certain
whether we have found the mark or if the mark exists at all.

To reduce this uncertainty, we take the three highest peaks in R and
ask two further questions:

	1) Is the object dark enough to be a reseau mark?
	2) How close is it to where we expected it to be?

Since only stray light shines on the shadow, its center should be the
darkest point in the search area, if it is there at all.

To predict the position of each mark, we allow for a systematic shift of
the entire reseau from the nominals.  We solve for this shift by minimizing
the residual error between the found coordinates and their nominals.

From these two measurements, we compute normalized darkness and closeness
measures g and h that are roughly on the same scale as rho. 

We may then compute a composite match quality measure q, where

		     1
		q = ---(rho+g+h)
		     3
 
In dark-sky regions of the image, where the DN values are near the noise floor, we ignore the darkness measure and set

		     1
		q = ---(rho+h)
		     2
 
The pixel with the highest q is the most likely place for the reseau mark.

To filter out mismatches, we apply thresholds to rho and q, rejecting all
objects where ρ<rthresh or q<qthresh.  The default values are rthresh=0.7
and qthresh=0.6.  These defaults are high enough to filter out practically all
mismatches but low enough to accept nearly all of our visible marks.

We fill in the places where the mark was not found by interpolating over
the nearest neighbors. This is done so that geoma receives a mapping that is
complete.


.page
5.The correlation coefficient

Let A be the shape template and let  W be a window in the image. 

The covariance between A and W is
	            1
	cov(A,W) = ---sum(sum((a(i,j)-mu(A))*(w(i,j)-mu(W)))
	            N 

where mu(A) and mu(W) are the mean values of A and W, and N is the number
of pixels in A and W.

The correlation coefficient between  A and W is a normalized covariance

	               cov(A,W)
	rho(A,W) = -----------------
	           sigma(A)*sigma(W)


where the normalization factors are the standard deviations of A and W.

Three properties of rho follow from this definition:

	1) rho(A,-W) = -rho(A,W)
	2) -1 < rho(A,W) < 1
	3) rho(A,W)=1 if and only if A=W 


Examples:

The following windows contain reseau marks.  

	| 159 151 131 128 138 |		| 166 172 179 170 163 |
	| 133  61  35  75 130 |		| 163 143  74  69 124 |
	| 116  35   7  58 124 |		| 146  99  27  39 117 |
	| 117  52  28  73 133 |		| 141  93  40  59 139 |
	| 133 123 117 129 139 |		| 147 129 124 137 159 |

In the left window, the reseau mark lies near the center.  In the right window,
the mark lies somewhere between four pixels.

The default shape template is  

                   |250 234 220 234 250|
                   |234 161 100 161 234|
               A = |220 100   0 100 220|
                   |234 161 100 161 234|
                   |250 234 220 234 250|

Since A is centered, a mark that is centered will have a higher rho than
one that is not.  In the above examples, rho=0.962 vs 0.909. To get a more
unbiased measure or rho, we interpolate the center of the mark and compute
rho at that point.  The interpolated values of rho are 0.968 vs 0.974.


Here are examples of marks that are under-exposed and over- exposed:

	|   6   6   6   6   7 |		| 255 255 255 255 255 |
	|   5   2   1   4   4 |		| 234 144 131 185 239 |
	|   5   1   0   1   5 |		| 177  51  48 164 241 | 
	|   3   0   0   2   5 |		| 169  34  20 146 236 |
	|   6   4   3   4   6 |		| 203 147 166 252 252 |

The saturated pixels (0s and 255s) will distort the shape of the mark.  This
effect is small, however, compared to whether or not the mark is centered in
the window.  In fact, the interpolated values at the center of the marks are
rho = 0.909 and 0.935.

Here is a case where a reseau mark straddles the left margin of the image
(indicated by 0s).  This window has 15 valid pixels, barely enough to compute 
a reliable value for rho. 

		|   0   0  14  15  18 |
		|   0   0   6   7  15 |
		|   0   0   4   5  16 |
		|   0   0  13  13  16 |
		|   0   0  18  17  17 |

Here the interpolated value for rho is 0.924.

Note that if the mark were located 1 pixel to the left, its center would
lie off the edge of the image, and its window would contain only 10 real
pixels.  In fact, only a faint signal would remain:


		|   0   0   0  15  18 |
		|   0   0   0   7  15 |
		|   0   0   0   5  16 |
		|   0   0   0  13  16 |
		|   0   0   0  17  17 |


Since random surface terrain can look like this, reducing our sample size
to 10 greatly increases the risk of a false match.  Consequently, resloc
rejects any window if more than half the pixels are missing.

When an image line is compressed by Voyager but is still too large to fit in a
telemetry packet, the line is truncated and the excess pixels are lost.  When
the JPL ground database system reconstructs the line, the truncated pixels are
filled with 0s.

The following window contains two truncated line segments.

		|  46  49  35  41  49 |
		|   0   0   0   0   0 |
		|  38  19  13  31  43 |
		|   0   0   0   0   0 |
		|  46  47  47  47  48 |

			rho = 0.947

As before, 15 pixels seems to be enough to measure a reasonably reliable rho.


.page
6.Darkness measure

Since no light strikes its center, the reseau mark should be the darkest object
in the search area, if it is there at all.

Here is a window containing a reseau mark:
 
                 | 166 172 179 170 163 |
                 | 163 143  74  69 124 |
                 | 146  99  27  39 117 |
                 | 141  93  40  59 139 |
                 | 147 129 124 137 159 |

The darkest point of the shadow lies between four pixels.  Let d be its
interpolated value.  Here, d is 19.2.

Here are the values of d for the entire reseau:

  117   112   113   157   164   138   165   122    73    66    84    90
      96    32    23    14    18    24    34    33    48    65    93
   73    35    19    12     9    19    20    23    37    48    67    68
      44    18     8    18     4    17    15    17    27    45    60
   26    24                                        17          44    90
      20     9    10     5    10    10     9    17    20    34    34
    0    10                                                    30   184
      20     6    10     2     6     4     3     9    14    19    31
  117    16                                                    12   200
      11    13     1     5     0     1     6    11     9    15    18
  129     5                                                    14   194
       7     0     4     0     2     6     6     5     5    14    13
  115     6                                                    11   198
      10     0     2     0     3     6     4     0     5     6    11
  104     0                                                    10   172
       4     4     5     0     1     4     4     0     9     8    15
   15     0                                                    23   140
       9     3     4     0     6     3     1     7     3    17    17
    0     9                                                    23    18
      14     7     5     6     1     5     8     5    14    25    34
    0    14    15    10     8    11     2     8    14    17    21    34
      13    17    14     8     8     2    13    13    19    17    27
   19    17    16    42   145   153   165   142   172   165    34    65
 

Notice how d increases as you move outward from the center.

Also, there are obvious errors along the edges.  These are places where
the mark falls off the edge, and d is simply a dark feature on the planet.
Bogus values like these are rooted out by comparing each d to its four
nearest neighbors as follows:

Let di be the interpolated value that lies in the DN plane as its four
neighbors.

Let dedge be the mean value of the window's edge.  dedge
measures the surrounding background.

We define the darkness measure to be

		          d-di
		g = 1 - ----------   if d>di
		        dedge-di
 
		g = 1  otherwise


From this definition, it follows that 0<=g<=1 and that g=1 when d<=di.


.page
7.Closeness measure

Let (li,si) be the coordinates of mark i, as found by resloc, where
i=1,2,...,202.

Let (li0,si0) be their nominal coordinates.

We assume that the principal difference between the (li,si) and (li0,si0) is
a small constant offset:

                si ~ si0 + e
                li ~ li0 + f

We solve for the e and f that minimize the least-squares differences
between the two data sets:

                    1
                e = -*sum(si-si0)
                    n

                    1
                f = -*sum(li-li0)
                    n

The distance between the coordinates found by resloc and this model is

		delta = sqrt((si-si0-e)**2+(li-li0-f)**2))


The normalized closeness measure is

			 delta
		h = 1 - --------
		        deltamax
 
where deltamax is the maximum possible delta within the search area.

h has a range from 0 to 1, and equals 1 only when the mark is found at
the model's predicted location.


.page
9.Solar shading

Solar shading near the limb or terminator of the planet degrades the shape
of reseau marks.  A process called detrending is used to remove this shading.

Example:

The window below (W) contains a reseau mark that straddles the terminator of
Uranus.  When the window is detrended (W’), the correlation coefficient
improves from 0.712 to 0.988.

        | 69  35  23  24  25 |          |  0   5   9   9  10 |
        | 46   7   3  15  22 |          |  5   8 -11  -9   4 |
        | 39   7   0  11  20 |          |  6  -6 -32 -22   3 |
        | 44  26  18  20  20 |          |  8  -6 -24 -17   7 |
        | 42  31  24  20  21 |          |  8   6   2   8  24 |

                   W                               W’


	    | w(-m,-n) .  .  . w(0,-n) .  .  . w(m,-n) |
	    |     .    .          .          .    .    |
	    |     .       .       .       .       .    |
	    |     .          .    .    .          .    |
Let	W = | w(-m,0)  .  .  . w(0,0)  .  .  . w(m,0)  |
	    |     .          .    .    .          .    |
	    |     .       .       .       .       .    |
	    |     .    .          .          .    .    |
	    | w(-m,n)  .  .  . w(0,n)  .  .  . w(m,n)  |
 

We fit a brightness plane B to W, where

                | b(-m,-n) .  .  . b(0,-n) .  .  . b(m,-n) |
	        |     .    .          .          .    .    |
	        |     .       .       .       .       .    |
		|     .          .    .    .          .    |
  B(c1,c2,c3) = | b(-m,0)  .  .  . b(0,0)  .  .  . b(m,0)  |
		|     .          .    .    .          .    |
	        |     .       .       .       .       .    |
	        |     .    .          .          .    .    |
                | b(-m,n)  .  .  . b(0,n)  .  .  . b(m,n)  |

and
		b(i,j) = c1*i + c2*j + c3
 

We solve for plane constants c1, c2 and c3 that minimize the squared
differences between B and W.   Let 

		r = sum{sum{c1*i+c2*j+c3-w(i,j)}**2}

i=-m,...,m and j=-n,...,n, be the sum of the squared differences.
			 
The function r is at its minimum when the partial derivatives or r with
respect to c1, c2, and c3 are 0.  This leads to the following system of
linear equations:

		c1*sii + c2*sij + c3*si = zi
		c1*sij + c2*sjj + c3*sj = zj
		c1*si  + c2*sj  + c3*N  = z
where
	si = sum(sum(i)) = 0	z = sum(sum(w(i*j)))
	sj = sum(sum(j)) = 0	zi = sum(sum(i*w(i,j)))
	sij = sum(sum(ij) = 0	zj = sum(sum(j*w(i,j)))

			       N
	sii = sum(sum(i**2)) = -*m(m+1)
			       3

			       N
	sjj = sum(sum(j**2)) = -*n(n+1)
			       3

and N=(2m+1)*(2n+1) is the total number of pixels in W.

Since the nondiagonal terms in the above equations are all 0, the
solution follows immediately:

 	     zi		     zj		     z
	c1 = ---	c2 = ---	c3 = -
	     sii	     sjj	     N


To detrend the window, we subtract the brightness plane from it:

		W' = W - B
where
		w'(i,j) = w(i,j) - (c1*i+c2*j+c3)

Why not leave in the c3?


.page
9.Camera noise

Here is a pixel listing of the upper-left corner of the image where the noise
reaches its peak:

     Samp     1       3       5       7       9      11      13      15
   Line
      1      64  46  44  39  35  33  32  28  29  28  28  25  24  27  27
      2      40  29  26  21  18  15  13  12  11  11  13  12  12  13  11
      3      34  24  23  18  16  15  14  13  14  14  13  15  17  15  15
      4      38  27  27  24  22  21  21  19  19  18  18  16  12  19  17
      5      42  28  28  25  21  21  23  22  21  21  19  13   9  17  16
      6      45  27  27  22  20  22  22  21  22  21  21  18  15  15  15
      7      45  25  24  21  20  21  22  22  20  19  19  17  16  15  13
      8      42  25  22  19  19  20  22  21  20  19  16  16  14  13  13
      9      38  24  22  18  19  21  19  20  18  16  15  14  12  13  14
     10      36  24  22  18  19  20  19  18  16  16  13  13  13  13  12
     11      35  22  21  19  19  19  17  16  14  13  12  12  13  13  13
     12      33  22  21  18  19  16  15  14  12  12  13  13  14  14  14
     13      33  22  18  17  17  15  15  12  12  12  13  12  14  12  13
     14      31  20  19  16  16  14  13  11  12  11  13  12  12  13  12
     15      29  17  17  14  13  12  11  11  11  12  12  11  13  12  11

Reseau mark #1 is the 9 at pixel (5,13).  No satisfactory method for removing
this noise was found.  The problem is that any filter will ring off the edges
and the horizontal and vertical fiducial marks in this corner, creating objects
that look like reseau marks.

Here is a printout of the top edge of the image:

     Samp   101     103     105     107     109     111     113     115
   Line
      1      20  21  21  22  22  22  21  21  22  22  22  22  20  21  21
      2       9   8   8   8   9   8   8   9   8   8   8   7   8   8   8
      3      12  11  12  11  11  12  12  12  12  11  12  12  12  12  12
      4      15  15  15  15  16  15  15  14  14  15  14  14  15  14  15
      5      15  17  17  15  16  15  15  15  15  15  15  14  15  14  15

For search areas that straddle the top edge, lines 1, 2 and 3 are scaled so
that they have the same mean value as line 4.  Hot and cold columns along the
left edge are treated the same.


Notes:

1) Each of the four corners contain two long fiducial marks, one vertical and
one horizontal.  They are roughly 50 pixels long and 5 pixels wide.  Despite
their difference in size and shape, radiometrically they behave similar to
reseau marks.  The danger here is that if the reseau mark is not visible, these
fiducial marks could be mistaken for the missing mark.

2) Reseau marks 1 and 13 are placed so close together that they appear in each
other’s search area.  A similar situation exists in the other three corners.
A proximity check is made to ensure that the wrong mark is not chosen.


.page
10.Beam bending

The electron beam that reads the image off the photosensitive surface of the 
vidicon is attracted to bright objects in the image.  This effect, called beam
bending (see Benesh and Jepsen), will cause every bright object to be read out
prematurely.

Consider, for example, an image of Io resembling a bright circular disk.  As
the beam scans from line to line, Io will be read out prematurely, causing the
satellite to bulge upward and outward to the left and right.  Furthermore, once
an image line has been scanned by the readout beam, its charge is erased. 
Therefore, an object can never be distorted by the part of the image that lies
above it, because that part has already been erased.

Beam bending can cause displacements as large as 5 pixels.  Distortions similar
to our Io example above are inadequately measured by our coarse grid of reseau
marks.  Therefore, the brighter an object is, the more you must learn to
distrust its position.


.page
11.Filling the gaps

To provide geoma with a complete set of tiepoints, the line-sample coordinates
of every missing mark is filled by interpolating over its four neighbors.
Neighbors along the edge are excluded from this interpolation because they are
less reliable.

Every reseau mark potentially has 8 neighbors.  Let the neighbors of X be
denoted as near or far neighbors as follows:

				f1
			    n1      n2
			f3      X      f4
			    n3      n4
				f2


Let L=[n1,n2,n3,n4,f1,f2,f3,f4] be a list of these neighbors, roughly ordered
from nearest to farthest.  From this list, we eliminate any neighbors that
are missing or not found or near the edges.

Example:  The neighbors of reseau mark 36 are:

				13
			    24      25
			 0      36      37
			    47      48
				51

Here L=[24,25,47,48,13,51,0,37].  As this example shows, missing neighbors are
assigned a 0.  Suppose that mark 36 was not found.  An interpolation is made
using the first four valid neighbors in the list.  Marks 24 and 47 are excluded
because they lie near the left edge.  The four valid neighbors are 25, 48, 13
and 51.  We compute the binomial transformation that maps these neighbors to
their nominal locations. This transformation then allows us to compute the
coordinates for mark 36 from its nominals.

The cases where the number of valid neighbors are 0,1,2 or 3 are handled as
well.


.page
12.Geometric calibration

The purpose of geometric calibration is to measure and remove the geometric
camera distortions from the images.

The optics of the Voyager imaging subsystem (the ISS) was designed to mimic
the geometry of a pinhole camera.  If the telescope and vidicon tube were
geometrically perfect, light entering the aperture of the telescope would
converge at the focal point (the pinhole) and strike a focal plane mounted
normal to the optic axis.  The resulting image would be a perfect perspective
projection of the 3-dimensional world.  Object space is the coordinate system
of this focal plane.

Alas, the camera is not perfect. There are radial distortions in the Voyager
telescope.  In addition the vidicon is a cathode ray tube and suffers from
geometric distortions that increase from the center.  In addition, a fraction
of the vidicon distortion is caused by beam bending, an image-dependent
phenomenom where bright objects bend the electron beam reading out the pixels.
Image space is the coordinate system of this distorted image.

Constructing object space:  Ideally, object space is a focal plane mounted
normal to the optic axis of the telescope.  The faceplate of the vidicon was
used for this focal plane.  202 metal squares (called reseau marks) were
embedded on its surface.  During bench calibration, the positions of these
marks were measured with a theodolite (Benesh and Jepsen).  The resultin
(x,y) coordinates, in mm, are the object space coordinates of the reseau marks.

Object space is scaled by a factor of 84.821428 pixels per millimeter so that
an 800x800 Voyager image will map into a 1000x100 object-space image.

Finding the reseau marks in image space:  The (line,sample) coordinates of
the 202 reseau marks in the image represent a coarse spatial sampling of image
space.  These coordinates will differ from image to image because of  inherent
randomness in the geometric distortion.  Therefore, the reseau marks must be
found anew in each image output by the camera.  This is the purpose for which
resloc was developed.

Transforming the image into object space:  Program geoma creates an
object space version of the image.  The transformation maps every reseau
mark from the image to its known position in object space.  All other pixels
are mapped using an affine transformation defined by the three nearest marks.


.page
12.Geoma parameters

Geoma is the program that transforms the image into object space.  Geoma
requires that the transformation be defined by a rectangular grid of tiepoints.
The Voyager reseau more naturally lends itself to being divided into a grid of
triangles.  In order to satisfy geoma, we represent our triangles as a
collection of degenerate quadrilaterals, each of which has two identical
vertices.  Geoma is equipped to handle this degenerate case.

The grid of triangles is made spatially more uniform by adding pseudo marks via
interpolation or extrapolation.  X marks the spots where the pseudo marks are
added:


  1      2      3      4      5      6      7      8      9     10     11     12

  x  13     14     15     16     17     18     19     20     21     22     23  x

 24     25     26     27     28     29     30     31     32     33     34     35

  x  36     37     38     39     40     41     42     43     44     45     46  x

 47     48      x      x      x      x      x      x    202      x     49     50

  x 51     52     53     54     55     56     57     58     59     60     61   x

 62     63      x      x      x      x      x      x     x       x     64     65

  x  66     67     68     69     70     71     72     73     74     75     76  x

 77     78      x      x      x      x      x      x     x       x     79     80

  x  81     82     83     84     85     86     87     88     89     90     91  x

 92     93      x      x      x      x      x      x     x       x     94     95

  x  96     97     98     99    100    101    102    103    104    105    106  x

107    108      x      x      x      x      x      x     x       x    109    110

  x 111    112    113    114    115    116    117    118    119    120    121  x

122    123      x      x      x      x      x      x     x       x    124    125

  x 126    127    128    129    130    131    132    133    134    135    136  x

137    138      x      x      x      x      x      x     x       x    139    140

  x 141    142    143    144    145    146    147    148    149    150    151  x

152    153      x      x      x      x      x      x     x       x    154    155

  x 156    157    158    159    160    161    162    163    164    165    166  x

167    168    169    170    171    172    173    174    175    176    177    178

  x 179    180    181    182    183    184    185    186    187    188    189  x

190    191    192    193    194    195    196    197    198    199    200    201

This grid contains 12 tiepoints on every odd-numbered row and 13 tiepoints on
every even-numbered row.

We create a rectangular grid of tiepoints for geoma by repeating every tiepoint
wice,  except for the pseudo marks that begin and end every even-numbered row.
These are entered only once.  Two things are accomplished in this bizarre
procedure.  First, every triangle is converted into a quadrilateral with a
repeated vertex.  Second, each resulting row contains exactly 24 tiepoints,
creating a more or less spatially uniform 23x24 grid:

   1   1   2   2   3   3  ....  12  12
   x  13  13  14  14  15  ....  23   x
  24  24  25  25  26  26  ....  35  35
   etc...

The output geometric transformation parameters (geo) is a FORTRAN array:

      real*4 geo(4,24,23)

Each tiepoint in this array forms a geometric link between image space and
object space:

	geo(1,j,k) = object-space line coordinate
	geo(2,j,k) = object-space sample coordinate
	geo(3,j,k) = image-space line coordinate
	geo(4,j,k) = image-space sample coordinate


.page
14.Reseau database

Resloc can store the reseau locations of an image into a reseau database, and
later retrieve it from there:

	resloc inp=(D,RDB out=res
or
	resloc inp=(D,RDB) out=(res,geo)

In both of the above cases, if the reseau coordinates for D are already
in RDB, they are retrieved from there and output to res.  However, see the
keyword REDO.  If the reseau coordinates for D are not in RDB, resloc finds
them in D and stores them in RDB.

Data in the RDB are identified by camera, frame number, filter, and SCET year
and day.

Is there a limit on the number of reseau locations RDB can hold?


.page
15.Resloc parameters

The resloc parameters are grouped below by common function:

 inp out
 camera frame planet
 nlw nsw nhor never
 sigma
 rthresh qthresh
 redo nofilter noin

 inp and out are the only required parameters.
 camera, frame and planet overide the image IDs found in the label.
 nlw and nsw specify the dimensions of the shape template. 
 nhor and nver specify the dimensions of the search area.
 sigma specifies the sigma in the Gaussian shape function.
 rthresh and qthresh specify the thresholds for rho and q.
 redo forces resloc to redo an entry in the RDB.
 nofilter suppresses filtering of the hot edges.
 noin suppresses sub-pixel interpolation.

 dbug and all the parameters that follow it are for debugging the program.

 dbug
 tres reject nofill
 ores onom
 pres pnom
 pstats
 pgeo

 dbug causes miscellaneous diagnostics to be printed.
 tres is a test mark #.  All intermediate results for # are printed out.
 reject deletes all coordinates in the list:  reject=(2,3,101)
 nofill suppresses interpolation of missing values.
 ores superimposes the reseau coordinates on D.  View using xvd.
 onom superimposes the nominals on D.  View using xvd.
 pres and pnom print the reseau coordinates and their nominals.
 pstats prints a map of d, di, dedge, eps, rho, g, h and q.
 pgeo prints the geoma parameters

Do not use ‘nofill when creating the geoma parameters, as the solution will
be incomplete.

ores creates an image that is useful for assessing the accuracy and reliability
of resloc.


.page
Program history:

written by: Gary Yagi	23 july 1977
converted to vax by:  c. c. avis	27 may 1983
cognizant programmer: Gary Yagi
revisions:
 16-nov-85 - l.w.kamp - converted i/o to vicar2
 24-jan-86 - l.w.kamp - replaced lock management code with vicar2
                         open status check + call wait.
 26-feb-86 - l.w.kamp - modified subr.maxr to check dn<dnthresh (new parm)
 20-jun-86 - l.w.kamp - revised subr.filloc to fill in all locations
 27-jun-86 - f.f.moss - converted param i/o to vicar2
 10-jul-95 - a.scop   - (cri) made portable for unix
 27-mar-96 - b.a.mcguffie   - modified to accept new ibis reseau location
      3-89  sp  prevent divide by zero.  finish off lwk's fix to filloc where
               min set to 0.
      3-10  lwk replaced testos() with xvhost()
 2013 version:  gmy - added search for margin reseau marks.

The original resloc (the one used throughout the mission) did not
attempt to locate the marks along the margins of the image because of
the difficulty of doing this reliably.  The 2013 resloc version was an
attempt to remedy this.

For purposes of testing, a small sample master reseau location file
named RESFIL.TST is in the current MIPL test directory.  Please check
with Integration and Test to determine where this directory is located.
This file should not be randomly modified: copy it to a scratch directory 
before tampering with it.

.LEVEL1
.variable inp
inp=D or inp=(D,RDB)
raw Voyager image D and
reseau database RDB
.variable out
out=RES or out=(RES,GEO)
reseau locations RES and
geometric parameters GEO
.variable camera
Voyager camera serial number
 (4,5,6,7)
.variable frame
mod16 count of the FDS
  frame=1234567
.variable nlw
height of correlation area
  nlw=5
.variable nsw
width of correlation area
  nsw=5
.variable nver
height of the search area
  nver=19
.variable nhor
width of the search area
  nhor=19
.variable sigma
standard deviation of
Gaussian shape function
  sigma=1.0
.variable rthresh
rho threshold
  rthresh=0.7
.variable qthresh
Quality measure threshold.
  qthresh=0.6
.variable redo
  keyword: 'redo
Redo the reseau locations
.variable nofilter
  keyword: 'nofilter
No hot edge filter
.variable noin
  keyword: 'noin
No subpixel interpolation
.variable nofill
  keyword: 'nofill
No filling of missing marks
.variable dbug
  keyword: 'dbug
Switch to debug mode
.variable tres
  tres=29 
Test reseau mark number
.variable reject
  reject=(2,3,202)
Reject this list of marks
.variable ores
  ores=filename
Overlay of reseau locations.
.variable onom
  onom=filename
Overlay of nominal locations.
.variable pres
  keyword: 'pres
Print the reseau locations.
.variable pnom
  keyword: 'pnom
Print the nominal locations.
.variable pstats
  keyword 'pstats
Print maps of d,di,dedge,
  eps,rho,g,h, and q.
.variable pgeo
  keyword: 'pgeo
Print the geoma parameters.


.LEVEL2
.vari inp
Input files...

      inp=D   or  inp=(D,RDB)

where D is the input image and RDB is an optional reseau database.

D must be a raw Voyage image. That is, it must be in 800x800 format and
must neither be radiometrically or geometrically transformed.

If an RDB is included, the reseau locations are stored into or retrieved
from it.

.vari out
Output files...

     out=res
  or out=(res,geo)

res contains the line-sample coordinates of all 202 reseau marks.
geo contains the geometric parameters for transforming image D
to object space.

.vari camera
Voyager camera serial number:

        camera=4 for VGR2 WA
        camera=5 for VGR2 NA
        camera=6 for VGR1 WA
        camera=7 for VGR1 NA

Overrides the camera serial number in the image label.

.vari frame
A 7-digit frame number created by appending the mod60 count to the
mod16 count.

  frame=1234567

This parameter is only useful if you are storing or retrieving reseau
locations from the rdb and the frame number in the label is incorrect.

.vari sigma
Sigma of Gaussian shape template.

  sigma=1.0

.vari rthresh
Correlation coefficient threshold.  

    rthresh=0.7

If rho is less than rthresh, the match is rejected.

.vari qthresh
Composite match quality threshold.

    qthresh=0.6

If q is less than qthresh, the match is rejected.

.vari redo
Forces resloc to ignore any previous RDB entry and redo the location of
the reseau.

.vari noin
Suppresses interpolation of the reseau mark locations to sub-pixel accuracy.

.vari nofill
Suppresses filling in off missing reseau marks.  Do not use this keyword if
you are planning to input the results to geoma.

.vari tres
All intermediate calculations for the test reseau mark are printed.

  tres=n   where n=1 to 202

.vari ores
Create an overlay of the reseau locations.

  ores=filename

where filename is a copy of the input image with the pixel positions of the
reseau marks overlayed in graphics.

.vari onom
  onom=filename
where filename is a copy of the input image with the nominal positions of the
reseau marks overlayed in graphics.

.end

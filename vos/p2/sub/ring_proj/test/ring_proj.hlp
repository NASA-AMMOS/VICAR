Documentation for subroutine package RING_PROJ.COM:

RING_PROJ.COM contains a set of subroutines which handle the projection and
lighting geometry for the ring plane:

  RING_PROJ  - Convert from ring plane coordinates (radius,longitude) to
               image coordinates (line,sample).
  RING_INV   - Convert from camera coordinates (line,sample) to ring plane
               coordinates (radius,longitude).
  RING_LIGHT - Compute the phase, incidence, and emission angles for given
               radius-longitude on the ring.
  RING_SCALE - Compute the scale at a given ring radius in km/pixel.
  RAZIMUTH   - Compute spacecraft, sun, and north azimuths on the ring plane

The routines are applicable to images taken by a perspective projection camera
system (i.e. having a shutter and focal plane).  The ring plane is assumed to
coincide with the equatorial plane of the planet.  The longitude system is the
same as that for the planet.  West longitudes are used.  The image line-sample
coordinates are assumed to be for a geometrically corrected image
(object space).

The routines make no check for ring points inside the planet or
behind the planet.  I.e. the planet does not exist in the computations.


FORTRAN calling sequences:

In the following FORTRAN calling sequences, input arguments appear first and
are in UPPER CASE, followed by output arguments in lower case.

Let the following variables be defined:

      REAL*8 OM(3,3)            !Camera to planet transformation matrix
      REAL*8 VSC(3)             !Vector from target center to spacecraft (RS)
      REAL*8 VSUN(3)		!Vector from target center to sun
      REAL*8 V(3)		!Vector from target center to ring point
      REAL*4 FL                 !Camera focal length in mm 
      REAL*4 OAL,OAS            !Optical axis intercept line-sample
      REAL*4 SCALE              !Picture scale in pixels/mm
      REAL*8 R,LON		!Ring radius and longitude coordinates
      REAL*8 LINE,SAMP		!Image line and sample coordinates
      INTEGER*4	IND		!Return status

The vectors V, VSC and VSUN must be expressed in the coordinate system of the
target body.

      CALL RING_PROJ(OM,VSC,FL,OAL,OAS,SCALE,R,LON,line,samp,ind)
      CALL RING_INV(OM,VSC,FL,OAL,OAS,SCALE,LINE,SAMP,r,lon,ind)

For RING_PROJ, (R,LON) are input and (LINE,SAMP) are returned. IND=1 if
the returned line-sample coordinates are valid.  IND=0 otherwise (i.e. the
camera is pointing away from the ring plane).

For RING_INV, (LINE,SAMP) are input and (R,LON) are returned. IND=1 if the
returned radius-longitude coordinates are valid.  IND=0 otherwise (i.e. the
camera is pointing away from the ring plane).

The subroutine RING_LIGHT requires the following additional variables defined:

      REAL*8 I,E,P              !Incidence, emission, and phase angles (deg)

      CALL RING_LIGHT(VSC,VSUN,R,LON,i,e,p)

For the input ring point (R,LON), RING_LIGHT will output the solar incidence,
emission, and phase angles.  Let the surface normal vector, the solar vector,
and the spacecraft vector be computed at the surface point (R,LON).  The solar
incidence angle is the angle between the solar vector and the surface normal.
The emission angle is the angle between the spacecraft vector and the surface
normal.  The phase angle is the angle between the solar vector and the
spacecraft vector.

RING_LIGHT will compute the solar incidence, emission, and phase angles at the
ring point given by coordinates (R,LON).  Let Vn be a vector normal to the
ring plane.  Let Vs and Vc be the vectors from the ring point to the Sun and
spacecraft, respectively.  The solar incidence angle is the angle between Vn
and Vs.  The emission angle is the angle between Vn and Vc.  The phase angle
is the angle between Vs and Vc.

Note:  The vector normal to the ring plane is parallel to the planet's spin
axis.  It points to the north if the Sun illuminates the northern side of the
ring plane.  Otherwise it points to the south.

The subroutine RING_SCALE requires the following additional variables defined:

      INTEGER NL,NS		!Number of lines and samples in image
      REAL*8 SRANGE		!Distance from ring pt to camera (Slant range)
      REAL*8 RSCL,LSCL		!Radial and longitudinal ring scale (km/pixel)

      CALL RING_SCALE(OM,VSC,FL,OAL,OAS,SCALE,NL,NS,R,
		lon,srange,line,samp,rscl,lscl,ind)

The ring radius R is input and the radial and longitudinal ring scales are
output.  The scale is computed at the point on the visible ring at the given
radius closest to the camera.  Also output are the ring longitude and image
line-sample coordinates for the ring point. IND=1 if RSCL and LSCL are valid.
IND=0 otherwise (the given ring radius is not visible within the image).

If the ring is not visible within the image, a second attempt is made, searching
for the point at the given ring radius that has the highest resolution, this
time without the condition that the point be visible in the image.

IND=1 if the returned values are valid.  IND=0 otherwise (i.e. the camera is
pointing away from the ring plane).

For the routine RAZIMUTH, the following output variables must be defined:

      REAL*8 NORAZ              !Output north azimuth (degrees)
      REAL*8 SCAZ               !Output spacecraft azimuth (degrees)
      REAL*8 SUNAZ              !Output solar azimuth (degrees)
 
      CALL RAZIMUTH(OM,V,VSC,VSUN,noraz,scaz,sunaz)

The solar azimuth is computed by (1) projecting the solar vector onto the ring
plane and then (2) projecting the projected vector onto the image plane.  The
solar azimuth is the angle between a horizontal line pointing to the right and
this projected vector, measured clockwise.  The other azimuths are defined
similarly.


C Calling Sequences:

In the following C calling sequences are input arguments appear first, followed
by the output arguments.

  double om[3][3];        /* Camera to planet transformation matrix */
  double vsc[3];          /* Vector from target center to spacecraft (RS) */
  float fl;               /* Camera focal length in mm */
  float oal,oas;          /* Optical axis intercept line-sample */
  float scale;            /* Picture scale in pixels/mm */
  double radius,rlon;     /* Radius and longitude of ring point */
  double rline,rsamp;     /* Image line-sample coordinates */
  int status;             /* Return status, 1=success, 0=failure */

  status = zring_proj(om,vsc,&fl,&oal,&oas,&scale,radius,rlon,&rline,&rsamp);
  status = zring_inv(om,vsc,&fl,&oal,&oas,&scale,rline,rsamp,&radius,&rlon);

For zring_proj, (radius,rlon) is input and (rline,rsamp) is returned.
For zring_inv, (rline,rsamp) is input  and (radius,rlon) is returned.


The routine zring_light requires the following output arguments defined:

  double i;              /* solar incidence angle */
  double e;              /* emission angle */ 
  double p;              /* phase angle */

  zring_light(vsc,vsun,r,lon,&i,&e,&p);

The routine zring_scale requires the following output arguments defined:

  double slant_range;    /* Distance from ring point to spacecraft */
  double rscl,ascl;      /* Radial and azimuthal picture scale in km/pixel */

  status = zring_scale(om,vsc,&fl,&oal,&oas,&scale,nl,ns,r,rlon,slant_range,
               rline,rsamp,rscl,ascl);


The routine zrazimuth requires the following output arguments defined:

  double noraz;          /* north azimuth */
  double scaz;           /* spacecraft azimuth */
  double sunaz;          /* solar azimuth */

  zrazimuth(om,op,vsc,vsun,noraz,scaz,sunaz);

See FORTRAN calling sequence (above) for description of arguments.
 
2 HISTORY
 
Original Programmer: Gary Yagi, Sept 1, 1997
Current Cognizant Programmer: Gary Yagi
Source Language: FORTRAN
Revision history:
 
03 Nov 97  GMY  Correct azimuth calculation (FR 90511)
                Add all C-bridges
14 Feb 98  GMY  If ring is not in image, return highest resolution scale,
                even if off the image.  Flag all values as invalid (-999.) if
                error in computation.
25 Jun 1998 TXH Modified zring_scale, zring_inv, and zring_proj, the C-bridge 
                to subroutines ring_scale, ring_inv, and ring_proj to have 
                their float parameters to be pointers to floats.  The problem 
                was found under SGI, where its float values are treated as 
                doubles.
                Modified IMAKE file to use ANSI C.


1 SIMQ,dsimq2

  Solves the system of N linear equations AX = Y, where A is an NxN matrix and
  X and Y are N-dimensional vectors.  A and Y are input and X is solved for
  and returned.

  Note: These subroutines use MATH77 routines (from LINPACK) SGEFA, SGESLD,
  DGEFA, and DGESLD.  You should include the following line in your Imake file:

	#define LIB_MATH77


2 Fortran Calling Sequence:

      REAL*4 A(N,N),Y(N)
      REAL*8 DA(N,N),DY(N)	
      INTEGER*4 N		!Input matrix dimension
      INTEGER*4 STATUS		!0=success, 1=singular matrix

      CALL SIMQ(A,Y,N,STATUS)
  or  CALL dsimq2(DA,DY,N,STATUS)

  Upon return, Y is replaced by the solution X.  Also, the matrix A is
  destroyed.


  C calling sequence:

      float a[n][n],y[n];
      double da[n][n],dy[n];
      int n;			/* input matrix dimension */
      int status;		/* 0=success, 1=singular matrix */

      status = zsimq(a,y,n);
  or  status = zdsimq2(da,dy,n);

  Upon return, y is replaced by the solution x.  Also, the matrix a is
  destroyed.

  Note that C organizes matrices ass-backwards from Fortran.  I.e., the
  Fortran matrix element A(i,j) corresponds to the C matrix element a[j-1][i-1].
  The C routines zsimq and dzsimq are incomplete bridges to the corresponding
  Fortran routines SIMQ and dsimq2.  Therefore you should transpose matrix A
  before calling zsimq or dzsimq.  For example, consider the linear equations

         x1 + 3*x2 = 1
       2*x1 + 4*x2 = 5

  Then matrix a and vector y look like this:

       a = |1 3|   y = |1|   n = 2
           |2 4|       |5|

  In C, maxtrix a normally looks like this:

       a[0][0]=1  a[0][1]=3
       a[1][0]=2  a[1][1]=4

  but for zsimq to work, you would have to transpose the matrix so that

       a[0][0]=1  a[0][1]=2
       a[1][0]=3  a[1][1]=4


2 History

  Original Programmer: Steve Pohorsky
  Current Cognizant Programmer: Steve Pohorsky
  Source Language: Fortran
  Revision History:
    20 Jul 01  GMY  Added double precision routines dsimq2 and zdsimq2.

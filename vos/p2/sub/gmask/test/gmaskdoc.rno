.SP 1
.RM 70
.EBB
.CC
.STHL 4,0,0
.NNM
.NAJ
.AP
.NF
.NJ

.TITLE GMASK : General Purpose Mask Routines

###
.B 6
.C;MULTIMISSION IMAGE PROCESSING LABORATORY (MIPL)
.B 2
.C;GMASK : GENERAL PURPOSE MASK ROUTINES
.B 14
.C;Author: Alvin Wong
.B 2
.C;Revised by: Justin McNeill
.B 2
.C;Version 07.05.92
.B 2
.C;May 2, 1991
.B 2
.C;Revised by: Florance Moss
.B 2
.C;Version 05.16.95
.B 10
.C;National Aeronautics and Space Administration
.B 2
.C;Jet Propulsion Laboratory
.C;California Institute of Technology
.C;Pasadena, California
.B 2
.C;Document Number D-4376
.PG
###
.C;Multimission Image Processing Laboratory
.B
.C;D-4376   GMASK : General Purpose Mask Routines
.B 20
.LM 5
Prepared by:
.B 4
&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#
Justin McNeill, MIPL Software Engineer
.B 6
Approved by:
.B 4
&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#&#
.PG
.! Omit next two statements if you do not need the contents list
.! to have page numbering.
.!
.NMPG 1
.DNM RL
###
.B 4
.C;C O N T E N T S
.B 2

.! Set XXXX to the name of your document.
.REQUIRE "GMASKDOC.RNT"

.PG
.NMPG 1
.DNM D
.ST
.!
.! At this point the body of the document begins, e.g. chapters and sections.

.NUMBER LEVEL 1
.HL1 Introduction
.KEEP
.RM 80
.JUST
.FILL
.PARAGRAPH 3,1,0
.AUTOPARAGRAPH

GMASK is a set of primitive routines of simple mask building blocks to assist
the user in constructing custom image masks.  These routines were written to be 
very general so that any type of mask, color or black and white, can be 
produced. Special attention has been given to ensure the flexibility of 
these routines for a large variety of mask designs.  

GMASK was conceived to reduce the amount of time the user needs to 
create masks, and it is the aim of this users' guide to provide a concise and
clear reference for the GMASK user.  Various examples of coding with GMASK 
routines are provided to ease understanding of this software. 

These routines were intended to run within the VICAR environment and
are written in C programming language.  Fortran or C programs can call GMASK 
rountines.
.HL2 Overview
GMASK supports a variety of mask building blocks.  The following types of 
mask information can be generated by calling GMASK routines:
.NO FILL

	o Image data
	o Histograms
	o Line vectors at various angles	
	o Character strings
	o Boxes
	o Ellipses
	o Continuous and discrete step gray scales
	o Tick marks
	o Scales

.FILL
GMASK also supports several types of modifications to the above stated building 
blocks or provides certain processing capabilities.  These include:
.NO FILL

	o Color and black/white modes of mask generation
	o Assignment of input image bands to specific output color planes
	o Adaptive, fixed or inverse stretches of image data
	o Adaptive, fixed or inverse stretches of histograms
	o Display of byte or halfword image data
	o Display of input buffers
	o Calculation of histograms for byte or halfword image data
	o Multiple histogram displays
	o Determination of low and high DN values for adaptive stretch
	o Zooms or reductions of image data
	o Character string length calculation
	o Variable spacing between characters in a stored string
	o Automatic centering or bordering of defined mask image
.PG
.FILL
The basic user strategy to create a mask is to create a program with
the following steps :

.LM+5
.LIST
.DISPLAY ELEMENTS ,D,")"

.LE;Set the mode of mask generation, either black/white or color,
by invoking routine ZA/XASETDIM.

.LE;Invoke routine ZA/XAINITIALIZE to initialize the various internal variables, 
set background color or gray level and the dimension of the output mask.

.LE;Invoke the various routines to set up the desired information
for the mask.

.LE;Invoke routine ZA/XACOPYMASK to process the mask information
given in step (3).

.END LIST
.LM-5
The calling program's structure should be similar to this sample of C code:
.LITERAL

	main44()
	{
	   ZA/XAsetdim( . ) ;    	/* Set GMASK operational mode 	 */

	   ZA/XAinitialize( ... ) ;

	   (Body of code) ....

	   ZA/XAcopymask(' ') ;
	}

.END LITERAL
.PAGE
.HL2 Summary of Routines
.FILL
.JUST

The following is a summary of the routines and a brief description of their 
functions.  Currently, GMASK consists of twenty-three (23) routines.

.NO FILL
.NO JUST
.RM 80

ZA/XABAND  
	Allows the user to associate a particular input file (unit number) 
	with an output color plane or band number.  This is to be used 
	only in GMASK color mode.

ZA/XACALCULATEHIST
	Tallies the histogram of an input file; also, accepts stretch 
	parameters to generate a stretched histogram.  Returns the maximum 
	frequency of all DN values and the number of points in the histogram. 

ZA/XACLEARSCALE 
	Clears all current scale characteristics defined by ZA/XADEFINESCALE.

ZA/XACOPYMASK 
	Copies information regarding stored primitives defined by ZA/XA_ routines 
	and the user defined input files into a user-defined output file
	to form a completed mask.  

ZA/XADEFINESCALE 
	Stores a scale definition.

ZA/XADETERMINELIMIT
	Returns an array of the minimum and maximum Dn values for defined 
	stretches.

ZA/XAINITIALIZE
	Initializes the software and allows the user to specify  the maximum 
	line and sample values of the mask and the background color or gray 
	level of the mask.

ZA/XAOUTSIZE
	Allows the user to center the mask in a frame of dimension larger than
	that specified in ZA/XAINITIALIZE and of variable colors or gray levels.

ZA/XASCALE
	Draws a scale defined by ZA/XADEFINESCALE.

ZA/XASETCHARSPACING
	Allows the user to control the spacing between characters in a string.  

ZA/XASETDIM
	Sets the software to either a color mode or black/white mode.  
	The color mode outputs an image file of three bands: red, green 
	and blue.  

ZA/XASETFONT
	Allows the user to select font type: default block character font 
	or hershey font.

ZA/XASETFONTANGLE
	Allows the user to specify the angle at which character strings
	are written.  Valid values are (-90,0,90).  90 degrees is a rotation
 	of the text in a clockwise fashion; -90 is counter-clockwise.

ZA/XASTOREBOX
	Stores a color or gray level filled box.

ZA/XASTOREBUFFER
	Stores a buffer.

ZA/XASTORELLIPSE
	Stores a variable line-width gray scale ellipse.

ZA/XASTOREGRAY
	Stores a continuous or discrete step gray scale.

ZA/XASTOREHISTOGRAM
	Translates a 256-element buffer to a histogram graphic.  Vertical or 
	horizontal displays are both provided.  Allows user to display multiple 
	histograms in one graphic.  

ZA/XASTOREIMAGE
	Stores an image. Linear, inverse and adaptive stretches of the image are
 	optional.

ZA/XASTORERAY
	Stores a vector at a given angle.

ZA/XASTORESTRING
	Stores a character string.

ZA/XASTORETICK
	Stores a set of tick marks.

ZA/XASTOREVECTOR
	Stores a line vector.

ZA/XASTRINGLENGTH
	Returns the length of a character string.

ZA/XAZOOMIMAGE
	Stores enlargements or reductions of image data. Linear, inverse and
	adaptive stretches of the image are optional.

.FILL
.PAGE
.HL2 Routine Types
.JUST
.FILL

GMASK routines can be categorized into three types: SETUP, STORAGE and
IMMEDIATE RESPONSE.  SETUP routines generally define an environment
within which other routines will operate.  These routines allow the user to 
define a current state such that following routine calls produce a desired
output.  Such routines are the following:
.NO FILL

		ZA/XABAND
		ZA/XACLEARSCALE
		ZA/XADEFINESCALE
		ZA/XAINITIALIZE
		ZA/XAOUTSIZE
		ZA/XASETCHARSPACING
		ZA/XASETDIM
		ZA/XASETFONT
		ZA/XASETFONTANGLE

.FILL
STORAGE routines actually store mask primitives in linked lists of 
structures for output until ZA/XACOPYMASK is called.  Vectors, strings, boxes,
images, and other mask primitives are stored with these routines, which are
as follows:
.NO FILL

		ZA/XASCALE
		ZA/XASTOREBOX
		ZA/XASTOREBUFFER
		ZA/XASTORELLIPSE
		ZA/XASTOREGRAY
		ZA/XASTOREHISTOGRAM
		ZA/XASTOREIMAGE
		ZA/XASTORERAY
		ZA/XASTORESTRING
		ZA/XASTORETICK
		ZA/XASTOREVECTOR
		ZA/XAZOOMIMAGE

.FILL
IMMEDIATE RESPONSE routines provide the user with information immediately
following the routine call in the program.  Routines in this category are 
.NO FILL

		ZA/XACALCULATEHIST
		ZA/XADETERMINELIMIT
		ZA/XASTRINGLENGTH

.FILL
The most important routine that does not fall into any of these 
categories is ZA/XACOPYMASK which causes all stored mask information to be
written to the output mask file.  ZA/XACOPYMASK searches through all linked lists
of structures as each output mask line is written.  All stored primitives are
written during this routine's execution.  This routine should be the last
GMASK routine to be called.
.PAGE
.HL2 Operational Modes: Black/White or Color
.JUST
.FILL

GMASK has two operational modes, black/white or color.  The operational mode
is determined by the routine ZA/XASETDIM which allows the user to set 
the number of output bands to be produced.
ZA/XASETDIM ( 1 ) places GMASK in the black/white mode and produces a one band
output image.  ZA/XASETDIM ( 3 ) places GMASK in the color mode and produces a
three band output image in BSQ organization (RGB).
In most all cases, the argument of ZA/XASETDIM will be either one or three.  
If ZA/XASETDIM is not called, the mode defaults to black/white.   The ZA/XASETDIM 
routine should be called prior to the ZA/XAINITIALIZE routine, and therefore should
be the first GMASK routine call.

If the color mode of GMASK is used, all routines accepting DN values as inputs
should pass DN values as integer arrays of three dimensions to represent the 
red, green and blue pixel intensities.  If the black/white mode is used, 
all routines accepting DN values as inputs should be passed an integer value.  

For the purpose of displaying color images using ZA/XASTOREIMAGE or ZA/XAZOOMIMAGE,
ZA/XABAND must be called to assign each input unit number to its respective output 
color plane.  

Here is an example of ZA/XABAND in a section of C code.
.LITERAL
	
	.
	.
	float blk = 0.0;
        float wht = 0.0;

	ZA/XAband ( inunit[0], 1 );
	ZA/XAband ( inunit[1], 2 );	
	ZA/XAband ( inunit[2], 3 );

	ZA/XAstoreimage ( inunit[0], 100, 100, 300, 300, 100, 100, 'N', &blk, &wht, 0, 0 );
	ZA/XAstoreimage ( inunit[1], 100, 100, 300, 300, 100, 100, 'N', &blk, &wht, 0, 0 );	
	ZA/XAstoreimage ( inunit[2], 100, 100, 300, 300, 100, 100, 'N', &blk, &wht, 0, 0 );

	ZA/XAzoomimage ( inunit[0], 100, 100, 300, 300, 100, 100, 2, "Interpolation", 
                      'N', &blk, &wht, 0, 0 );
	.
	.
	.

.END LITERAL
The ZA/XABAND command assigns the input file with unit number inunit[0] to the
red plane (1), inunit[1] to the green plane (2), and inunit[2] to the blue 
plane (3).  Thus, once ZA/XACOPYMASK is called, a color image at starting line and 
starting sample (100, 100) is displayed.  ZA/XAZOOMIMAGE displays an interpolated 
zoom of the input file with unit number inunit[0] in the red output plane.

Please note that if the input file is a three band image, all ZA/XAZOOMIMAGE and
ZA/XASTOREIMAGE commands treat it as a three band BSQ input, color image, so that 
no ZA/XABAND commands are necessary.
.PAGE
.NUMBER LEVEL 2
.HL1 Description of Routines

The following is a listing of GMASK routines with descriptions of arguments and
general routine capabilities.  Please pay close attention to argument 
descriptions and ordering.
.HL2 ZA/XABAND
.RM 80
.NO JUST
.NO FILL
Function : Assigns an input file to an output color plane, or band.

ZA/XABAND ( Unit, BandNumber )

^&Arguments\&
.LITERAL

Unit :        integer, Unit number of input image file.

BandNumber :  integer, Number of output color plane or band.
	
.END LITERAL
^&Description\&

.FILL
The purpose of this routine is to allow the user to allow for the display
of a user selected band of an input file to any user selected output band.
The routine functions only in the color operational mode of GMASK, i.e. only
when ZA/XASETDIM( 3 ) has been called.  This assignment cannot be altered 
within the driver program. 

If the input image file is a multiband BSQ file, the ZA/XABAND routine is not 
needed and is ignored.  The image file is written to the output in color,
assuming a band sequential organization.
		
Band numbers correspond to color planes as follows: plane 1, RED plane;
plane 2, GREEN plane; and plane 3, BLUE plane.

.PAGE
.HL2 ZA/XACALCULATEHIST
.RM 80
.NO FILL
.NO JUST
Function : Computes a histogram of an input file, halfword or byte data.

ZA/XACALCULATEHIST ( Unit, ImageStartLine, ImageStartSample, ImageEndLine, 
			ImageEndSample, ImageLineIncr, ImageSampleIncr,
			HistBuffer, MaximumFreq, NumberPoints, StretchType, 
			LowSat, HighSat, DNExcluded, ExcArrayDim )

^&Arguments\&
.LITERAL

Unit:             integer, Unit number of the image file.

ImageStartLine:   integer, Starting line of the input image file.

ImageStartSample: integer, Starting sample of the input image file.

ImageEndLine:     integer, Ending line of the input image file.

ImageEndSample:   integer, Starting sample of the input image file.

ImageLineIncr:    integer, Line increment of input image file.

ImageSampleIncr:  integer, Sample increment of input image file.

HistBuffer:       unsigned integer, Histogram buffer.

MaximumFreq:      integer, Highest frequency of all Dn values or bins

NumberPoints:     integer, total number of points in image used to 
                           tally histogram.

StretchType:      char, Stretch type descriptor.
                        "F" = Do a fixed or inverse stretch.
                        "A" = Do an adaptive stretch.
                        "N" = No stretch on image.

LowSat:           real, If StretchType is fixed then LowSat should be 
                        the low Dn value and the Hi Dn value for an inverse
                        stretch; for adaptive StretchType, LowSat should be 
                        the lower saturation percentage of the image to be 
                        sampled.

HighSat:          real, If StretchType is fixed then HighSat should be 
                        the high Dn value and the Lo Dn value for an inverse
                        stretch; for adaptive StretchType, HighSat should be 
                        the upper saturation percentage.

DNExcluded:       integer, DN values to be excluded from adaptive stretch.

ExcArrayDim:      integer, Number of DN to be excluded from adaptive 
                           stretch.
	
.END LITERAL
.PAGE
^&Description\&
.FILL

This routine calculates the histogram of an image file of either byte or
halfword data, producing histogram arrays (HistBuffer) of either 256 or 65536 
elements, respectively.  Histograms may be stretched in this routine by 
providing the fixed, inverse or adaptive stretch parameters.  Please note that 
all the arguments of this routine must be passed.  If no stretch is desired, the
StretchType should be passed as 'N'.  If no DN values of histogram are to be 
excluded or set to zero, ExcArrayDim should be zero.

.PAGE
.HL2 ZA/XACLEARSCALE
.RM 80
.NO FILL
.NO JUST
Function : Clear all current scale characteristics.

ZA/XACLEARSCALE ( )

^&Arguments\&

None

^&Description\&
.JUST
.FILL

ZA/XACLEARSCALE clears all scale characteristics used in ZA/XADEFINESCALE.  This
routine should be called before a scale is defined using ZA/XADEFINESCALE.

If no scale is currently defined, ZA/XACLEARSCALE will not perform any operation
but will return a success status code.

Please see the end of this document for a list of returned error values.
.page
.HL2 ZA/XACOPYMASK
.RM 80
.NO FILL
.NO JUST
Function : Generate an output mask.

ZA/XACOPYMASK ( MirrorImageFlag )

^&Arguments\&
.LITERAL

MirrorImageFlag :	char, Output Image type descriptor.
			"M" or "m"  = Flip the output image.
                        " " (null)  = Not to flip the output image.

.END LITERAL
^&Description\&
.FILL

ZA/XACOPYMASK causes all stored mask information to be written to an output file.
This routine does the actual output mask generation.

If more than one output file is specified by the user in the .PDF file, each
subsequent call of ZA/XACOPYMASK writes to the next output file associated with
the "OUT" parameter of the PDF.  If more than one output file is generated
in a driver program, ZA/XAINITIALIZE must be called to reset all structures.

Please see the end of this document for a list of returned error values.

.PAGE
.HL2 ZA/XADEFINESCALE
.RM 80
.NO FILL
.NO JUST
Function : Stores a scale definition.

To define a center scale :

ZA/XADEFINESCALE( ScaleType,EndCapLength,EndCapWidth,CenterLineWidth,Size )

^&Arguments\&
.LITERAL

ScaleType :       char, "C" to define center scale.

EndCapLength :    pointer to an integer, length of end cap.

EndCapWidth :     pointer to an integer, width of end cap.

CenterLineWidth : pointer to an integer, width of center line.

Size :            an integer, describes the array length, this parameter is 
                  meaningless in defining center scale, pass a 0.

.END LITERAL
To define a left/right (bottom/top) scale :

ZA/XADEFINESCALE ( ScaleType, TickLength, TickWidth, TickFrequencyOffset, 
		Size, Annotation )

^&Arguments\&
.LITERAL

ScaleType :           char, 
                      "L" to define left (or bottom) scale.
                      "R" to define right (or top) scale.

TickLength :           pointer to an integer array, lengths of tick marks from
                       center of center line.

TickWidth :            pointer to an integer array, widths of tick marks.

TickFrequencyOffset :  pointer to a double, two dimensional array, 
                       the first element describes the frequency of 
                       tick mark (the distance from the center of the 
                       tick mark to the center of the next tick mark), 
                       the second element describes the offset of tick mark 
                       (the distance between end cap and first tick mark)

Size :                 integer, describes the length of above arrays.
		
Annotation :           pointer to an annotation structure.  The structure 
                       contains the following variables in the following 
                       order:
			
 	Annotation position
		an unsigned character, 'T', 'C', or 'B', where T stands 
		for annotation above the tick mark, C stands for annotation 
		parallel to the tick mark, B stands for annotation below 
		the tick mark.
 
	Annotation start value
		a double precision floating point, the start value of the 
		annotation. 

	Annotation increment
		a double precision floating point, the increment for each 
		annotation.

	Annotation modulus
		a double precision floating point, the value at which the 
		numbering of the scale should not exceed and should cause 
		a regeneration of scale annotation from one (1).

	Annotation significant digits
		an integer, the digits of precision of each annotation 
		value.

	Type size
		integer, describes the character size in pixels.

	Annotation orientation
		unsigned character, describes the rotation of the 
		annotation, 'V', 'L', or 'R', where V stands for 
		vertically oriented text, R stands for right rotated text, 
		L stands for left rotated text.

	Annotation justification
		unsigned character, describes the justification of the 
		annotation where justification is either away from 
		or towards the tick marks or scale.  'L' justifies the
		annotation text such that it writes toward the scale; 
		'R' justifies the annotation away from the scale.
.END LITERAL
^&Description\&
.JUST
.FILL

ZA/XADEFINESCALE shall update the characteristics in such a way that the last call
defining the L, R, or C characteristics shall supercede all previous call.

ZA/XADEFINESCALE shall return an error if the type parameter is not equal to 'L',
'R', or 'C'.

Please see the end of this document for a list of returned error values.
.page
.HL2 ZA/XADETERMINELIMIT
.RM 80
.NO FILL
.NO JUST
Function : Returns the DN values from adaptive stretch.

ZA/XADETERMINELIMIT ( LowDN, HiDN )

^&Arguments\&
.LITERAL

LowDN  :	output, integer, returns the minimum DN value
		from adaptive stretch.

HiDN   :	output, integer, returns the maximum DN value
		from adaptive stretch.

.END LITERAL
^&Description\&
.JUST
.FILL

This routine applies to adaptive stretch only.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XAINITIALIZE
.NO FILL
.NO JUST
Function : Initialization routine.

ZA/XAINITIALIZE ( MaxLines, MaxSamples, BackgroundDN )

^&Arguments\&
.LITERAL

MaxLines:       integer, Number of lines in the output file.  This can be
                         superseded by ZA/XAOUTSIZE.

MaxSamples:     integer, Number of samples per line in the output file.  This 
                         also can be superseded by ZA/XAOUTSIZE.

BackgroundDN:   integer or integer array, Background DN or array of
		                          DN for each band for the mask.

.END LITERAL
^&Description\&
.FILL

All initializations needed to properly define a mask are completed by calling
this routine.  Pointers to mask building block structures are initialized along
with linked list starting pointers for memory allocation.

This routine also allows the user to specify the maximum line and sample values
and the background DN or color of the output mask.  If the maximum line and
sample values are both zero, the output image is sized according to the other 
mask information received.  Please note that ZA/XAOUTSIZE can be called after
ZA/XAINITIALIZE to invoke an automatic mask centering or border generation, using
the ZA/XAINITIALIZE dimensions to as the size of the work to be "framed."

If ZA/XASETDIM has been called to invoke the color mode of GMASK, BackgroundDN 
must contain an array of three integers representing the three band intensities,
red, green and blue.  

The current absolute maximum line and sample dimension is 20000x20000 for the 
output image.  In the color mode, the output image maximum dimensions are 
20000x20000x3.

Please see the end of this document for a list of returned error values.

.PAGE
.HL2 ZA/XAOUTSIZE
.NO FILL
.NO JUST
Function : Center defined mask in a frame of specified size and color.

ZA/XAOUTSIZE ( MaskLines, MaskSamples, BorderDN )

^&Arguments\&
.LITERAL

MaskLines:       integer, Number of lines in the output file.

MaskSamples:     integer, Number of samples per line in the output file.

BorderDN:        integer or integer array, Border DN or array of
	                          DN for each band for the mask.

.END LITERAL
^&Description\&
.FILL

This routine also allows the user to specify the number of lines and samples
in the output file, superseding the dimensions given in ZA/XAINITIALIZE.  The 
purpose of this routine is to provide automatic centering of mask images.  By
specifying a dimension of the mask larger than the dimension given in 
ZA/XAINITIALIZE, the mask generated will be centered in a file of dimension and
color specified by ZA/XAOUTSIZE.  If the color or DN of ZA/XAOUTSIZE is different from
the color or DN chosen in ZA/XAINITIALIZE,  a border will be evident around the 

.PAGE
.HL2 ZA/XASCALE
.RM 80
.NO FILL
.NO JUST
Function : Draws a scale as specified by previous ZA/XADEFINESCALE 

ZA/XASCALE ( StartLine, StartSample, EndLine, EndSample, DN )

^&Arguments\&
.LITERAL

StartLine :     integer, Starting line of scale.

StartSample :   integer, Starting sample of scale.

EndLine :       integer, Ending line of scale.

EndSample :     integer, Ending sample of scale.

DN :            integer or integer array, Dn value(s) of the scale.

.END LITERAL
^&Description\&
.FILL

ZA/XASCALE shall return an error if:
.FILL
.LIST
.DISPLAY ELEMENTS ,D,")"

.LE;The center and one or both of the left or right characteristics have not 
been defined.
.LE;The scale is neither horizontal nor vertical. 
.LE;The requested DN is outside the range 0-255 inclusive.
.LE;Any part of the scale falls outside of the image area.

.END LIST

If StartLine = EndLine, a horizontal scale will be drawn, 
if StartSample = EndSample, a vertical scale will be drawn.

ZA/XASCALE can be called multiple times to create scales with the same 
characteristics at the specified location and/or  DN value.

The distance between the tick mark and end cap has to be at least one pixel, 
the distance between each tick mark has to be at least one pixel.  If
overlapping occurs, the tick mark occupying the lower index of the array 
has precedence over the tick mark occupying the higher index of the array,
therefore the tick mark defined first has the highest priority to be drawn.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASETCHARSPACING
.RM 80
.NO FILL
.NO JUST
Function : Sets the number of pixels that fall between characters.

ZA/XASETCHARSPACING ( NumberOfPixelSpaces )

^&Arguments\&
.LITERAL

NumberOfPixelSpaces :   integer, Number of pixels desired between
                                 consecutive letters.  A negative one (-1)
                                 resets character spacing to default 
                                 values.

.END LITERAL
^&Description\&
.FILL
		
An adjustment in the number of spaces between consecutive letters or digits in
a character string is provided.  If this routine is called, all ZA/XASTORESTRING
and ZA/XADEFINESCALE calls following the routine call will reflect the desired
spacing.  

C Code example:	
.LITERAL

	.
	.
	.
	za/xasetcharspacing( 5 );
	za/xastorestring( 10, 10, 2, 255, "HELLO JAMES", 1 );
	.
	.
	.
	
.END LITERAL		
This causes five pixel spaces to be printed between each letter.

To return to the default spacing, pass a -1 to ZA/XASETCHARSPACING.  Default 
spacing for block fonts is equal to the font size.  Thus, a font size of 2
provides two pixels of space between consecutive characters.  If Hershey fonts
are used, the spacing is the thickness of the font minus one pixel.  Thus a
thickness of 3 results in two pixels of space between consecutive characters.
.PAGE
.HL2 ZA/XASETDIM
.RM 80
.NO FILL
.NO JUST
Function : Set the output mode: color or black and white.

ZA/XASETDIM ( NumberOfBands )

^&Arguments\&
.LITERAL

NumberOfBands :  integer, the total number of output color planes 
                          or bands.

.END LITERAL
^&Description\&
.FILL

This function allows the user to determine the operating mode of GMASK 
routines. The two modes are black and white or color.  The argument, 
NumberOfBands, describes the desired number of output color planes or bands.  
Specifying a color output requires an argument of three (3).  An argument of 
one (1) denotes a black and white output of one band; this is the default mode.
.PAGE
.HL2 ZA/XASETFONT
.RM 80
.NO FILL
.NO JUST
Function : Change the font type of character strings.

ZA/XASETFONT ( FontFlag, FontNumber )

^&Arguments\&
.LITERAL

FontFlag : 	string, Either "DEFAULT" or "HERSHEY"

FontNumber : 	integer, Font number of hershey character set.

.END LITERAL
^&Description\&
.FILL

This function allows the user to use the hershey character sets
for character strings.  The user may toggle back and forth from
the DEFAULT to HERSHEY character sets.  The user may change HERSHEY
font numbers within the same mask also.

The use of HERSHEY font is discouraged because of the amount of CPU time
required to perform the smearing of HERSHEY fonts.  Development of alternate
font sets is being considered.
.PAGE
.HL2 ZA/XASETFONTANGLE
.RM 80
.NO FILL
.NO JUST
Function : Change the font angle of character strings

ZA/XASETFONTANGLE ( Angle )

^&Arguments\&
.LITERAL

Angle : integer, Valid values are -90, 0, 90.

.END LITERAL
^&Description\&
.FILL

This function allows the user change the angle in which the entire
character string is written.  The valid values are 90, 0, and -90
degrees.  90 degrees is defined as going clockwise and -90 degrees
is defined as going counter-clockwise.

.PAGE
.HL2 ZA/XASTOREBOX
.RM 80
.NO FILL
.NO JUST
Function : Store a color or gray level filled box.

ZA/XASTOREBOX ( StartLine, StartSample, Width, Length, Dn )

^&Arguments\&
.LITERAL

StartLine:      integer, Starting line of box (uppermost line of box)

StartSample:    integer, Starting sample of box (leftmost sample of box)

Width:          integer, Width of the box (horizontal distance)

Length:         integer, Length of the box (vertical distance)

Dn:             integer or integer array, Dn value(s) of box.

.END LITERAL
^&Description\&
.FILL

This routine generates a rectangle of specified DN or color.  The ZA/XASTOREGRAY 
uses this routine to store gray scales.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTOREBUFFER
.RM 80
.NO FILL
.NO JUST
Function : Stores a buffer.

ZA/XASTOREBUFFER ( Buffer, StartLine, StartSample, EndLine, EndSample,
	OutputStartLine, OutputStartSample, ZoomFactor, DisplayMode )

^&Arguments\&
.LITERAL

Buffer:             unsigned char, One dimensional data buffer

StartLine:          integer, Starting line in buffer 

StartSample:        integer, Starting sample in buffer

EndLine:            integer, Ending line in buffer

EndSample:          integer, Ending sample in buffer

OutputStartLine:    integer, Starting line of buffer in output image file

OutputStartSample:  integer, Starting sample of buffer in output image file

ZoomFactor:         integer, Magnification factor of buffer for output

DisplayMode:        char, String denoting either Black/White or RGB input type:
                          "BW" and "RGB or Color" are valid values

.END LITERAL
^&Description\&
.FILL

This routine allows for the transferal of data from a buffer to an image file.
The buffer should be a one-dimensional buffer of data type byte.  ZA/XASTOREBUFFER
checks the DisplayMode string to determine whether the input is monochrome ( of
one band ) or color ( of three bands .)  

Please note that when a zoom is applied
to the buffer, the area required for its display in the output file is the zoom
factor multiplied by the original area of the buffer.  That is a 50x50 pixel
square buffer zoomed by a factor of 3 will require a 150x150 pixel square region
in the output image, the region having its uppermost left corner at point
(OutputStartLine, OutputStartSample).

.PAGE
.HL2 ZA/XASTORELLIPSE
.RM 80
.NO FILL
.NO JUST
Function : Store a variable line-width gray scale ellipse.

ZA/XASTORELLIPSE ( CenterLine, CenterSample, MajorAxisRadius, MinorAxisRadius,
	CurveWidth, Dn )

^&Arguments\&
.LITERAL

CenterLine:      integer, Line of ellipse center

CenterSample:    integer, Sample of ellipse center

MajorAxisRadius: integer, Radius of ellipse on the major axis (x-axis)

MinorAxisRadius: integer, Radius of ellipse on the minor axis (y-axis)

CurveWidth:      integer, Width of the curve that forms the ellipse

Dn:              integer or integer array, Dn value(s) of ellipse

.END LITERAL
^&Description\&
.FILL

This routine draws a color or gray scale ellipse.  Smoothing is used to 
subdue aliasing about the edges of the ellipse.  The CurveWidth is the thickness
of the arc of the ellipse.  If CurveWidth is greater than both the 
MajorAxisRadius and the MinorAxisRadius, then the ellipse is a filled object.  
Circles can be drawn by passing the same values for both MinorAxisRadius and 
MajorAxisRadius.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTOREGRAY
.RM 80
.NO FILL
.NO JUST
Function : Store a gray scale.

ZA/XASTOREGRAY ( StartLine, StartSample, Width, Length, StartDn, EndDn, Type )

^&Arguments\&
.LITERAL

StartLine :   integer, Starting line of gray scale.

StartSample : integer, Starting sample of gray scale.

Width :       integer, Width of gray scale (x-direction).

Length :      integer, Length of gray scale (y-direction).

StartDn :     integer, Starting Dn value for gray scale.

EndDn :       integer, Ending Dn value for gray scale.

Type :        character, Type of scale drawn: 'C' for continuous gray scale;
				'S' for 16-step gray scale.

.END LITERAL
^&Description\&
.FILL

This routine draws gray scales of dimensions Length x Width.  If the specified 
width is larger than the length, then a horizontal scale is assumed.  Similarly 
if the width is equal to or less than the length, then a vertical scale is 
assumed. 

The first type of gray scale that can be drawn is a continuous gray scale, 
specified by a Type of 'C', which yields a smooth ramp from the StartDn to the
EndDn.  This routine will yield best results if the difference of the DN values
is divisible by the difference of the line values plus one (in the vertical 
case) or by the difference of the sample values plus one (in the horizontal 
case).  

The second gray scale is a 16-step gray wedge, specified by a Type of 'S'.  
The routine takes the difference of StartDn and EndDn and divides this 
difference by sixteen minus one to obtain the gray level difference between 
consecutive gray boxes.  Sixteen gray level boxes are then drawn, either 
horizontally if Width is greater than Length, or vertically if Length is greater
than Width.  Separators, two pixels in width, are drawn between each box.  
Separators are white while the surrounding boxes have gray levels less than 120,
and they're black while the surrounding boxes have gray levels greater than or 
equal to 120.  The result is a gray wedge with appropriate separators that can 
be used for calibration in photo processing.  Please be aware that photolab 
requires gray wedges to be at least 80 pixels in width.  Suggested dimensions
for a horizontal wedge are 80 lines by 1310 samples.

This routine uses the ZA/XASTOREBOX routine to store the gray scale.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTOREHISTOGRAM
.RM 80
.NO FILL
.NO JUST
Function : Stores a buffer as a histogram graphic.

ZA/XASTOREHISTOGRAM ( HistBuffer, StartLine, StartSample, EndLine, EndSample,
		MaximumFreq, DisplayMode, Dn )

^&Arguments\&
.LITERAL

HistBuffer :   unsigned integer, 256 element histogram array

StartLine :    integer, Starting line of histogram (uppermost line)

StartSample :  integer, Starting sample of histogram (leftmost sample)

EndLine :      integer, Ending line of histogram

EndSample :    integer, Ending sample of histogram

MaximumFreq :  integer, DN value having greatest frequency of occurrence,
                        or, simply, greatest element of histogram buffer 

DisplayMode:   char string,
                    "H",  generate horizontal histogram;
                    "V",  generate vertical histogram;
                    "VM", generates a vertical, minimum-first multiple
                          histogram display;
                    "VB", generates a vertical, color-blended multiple
                          histogram display.		             
                    "HM", generates a horizontal, minimum-first multiple
                          histogram display;
                    "HB", generates a horizontal, color-blended multiple
                          histogram display.		             
                  "xxI#", the third character of I, in the case of multiple 
                          histograms, generates interpolated bins;  # is the
                          minimum number of empty bins for which interpolation 
                          is done.
 
Dn :           integer or integer array, the Dn value(s) to be used to
                                         draw the histogram.


See next page for function description.

.END LITERAL
.page
^&Description\&
.JUST
.FILL

This routine accepts a 256 element unsigned integer array and generates a 
histogram graphic as specified by the user supplied arguments.  

Histogram display is available in four different modes: 
.LITERAL

    1)  horizontal, "H", or vertical, "V"; 

    2)  single or multiple histogram display;

    3)  multiple display in interwoven or minimum-first, "xM",
        or color-blending, "xB", modes;

    4)  multiple display with or without inter-bin interpolation, "xxI#";
.END LITERAL

where the x's represent "H" or "V" in mode 3 and in mode 4, "HB", "HM", "VB" or
"VM".  The multiple histogram modes are available only in the GMASK color mode. 

The minimum-first mode, "xM", displays up to ten (10) different color histograms
in one specified area of the output mask by sorting all histogram bins of all
histograms, and placing the histogram bin of smallest value in front of the
next smallest histogram bin value until all histograms are displayed.  
An ZA/XASTOREHISTOGRAM call is required for each of the histograms, but the user 
must assign the same StartLine, StartSample, EndLine, EndSample, and DisplayMode
arguments for all ZA/XASTOREHISTOGRAM calls.  The result yields up to ten different
histograms in their original specified colors.  Histograms are scaled by the
maximum frequency of the first ZA/XASTOREHISTOGRAM call.

The color-blending mode, "xB", displays up to ten (10) different color 
histograms in one specified area of the output mask by adding color triplet 
values in a mod255 arithmetic for histogram graphic values that overlap.  
Thus, if histogram bin values for three histograms, specified colors of red, 
green and blue, are 120, 100, and 150, respectively, the histogram graphic for 
that bin will consist of a white vector up to value 100, a magenta vector from 
101 to 120 and a blue vector from 121 to 150.

An ZA/XASTOREHISTOGRAM call is required for each of the histograms, but the user 
must assign the same StartLine, StartSample, EndLine, EndSample, and DisplayMode
arguments for all ZA/XASTOREHISTOGRAM calls.  The result yields up to ten different
histograms generating up to (10! + 1) different colors.  Again, the histograms 
are scaled by the maximum frequency of the first ZA/XASTOREHISTOGRAM call.

If there exists empty bins of a histogram between two non-empty bins, 
ZA/XASTOREHISTOGRAM can be used to interpolate bin values between the non-empty
bins.  This is mode four, "xxI#".  This is to be used only for multiple 
histogram displays, where the histograms become interwoven. "#" of "xxI#" gives
the maximum number of consecutively empty bins for which interpolation is to
be accomplished.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTOREIMAGE
.RM 80
.NO FILL
.NO JUST
Function : Store image information.

ZA/XASTOREIMAGE ( Unit, InputStartLine, InputStartSample, InputEndLine, 
		InputEndSample, OutputStartLine, OutputStartSample,
		StretchType, LowFrac, HighSat, DNExcluded, ExcArrayDim )

^&Arguments\&
.LITERAL

Unit :              integer, Unit number of input file the user typed 
                             into VICAR.

InputStartLine :    integer, Starting line of the input image file.

InputStartSample :  integer, Starting sample of the input image file.

InputEndLine :      integer, Ending line of the input image file.

InputEndSample :    integer, Ending sample of the input image file.

OutputStartLine :   integer, Starting line of the output image file.

OutputStartSample : integer, Starting sample of the output image file.

StretchType :       char, Stretch type descriptor.
                          "F" = Do a fixed or linear stretch.
                          "A" = Do an adaptive stretch.
                          "N" = No stretch on image.

LowFrac :           real, If StretchType is fixed then LowFrac should
                          be the low Dn value or high Dn value for an inverse
                          fixed stretch; otherwise LowFrac should be the 
                          fraction percentage of the image to be sampled for the
                          adaptive stretch.

HighSat :           real, If StretchType is fixed then HighSat should
                          be the high Dn value or low Dn value for an inverse
                          fixed stretch; otherwise HighSat should be the 
                          saturation percentage for the adaptive stretch.

DNExcluded :        integer, DN values to be excluded from adaptive stretch. 
                             If no DN value will be excluded, use 0.
                     
ExcArrayDim :       integer, Number of DN to be excluded from adaptive 
                             stretch. If there isn't any DN to be excluded, 
                             use 0.

.END LITERAL	
^&Description\&
.FILL

The user must obtain a unit number of the image file before using this routine.
This routine will enable the user to transfer an image from an input
file to an output file with a defined stretch.  Note that the last
two parameters must be real numbers.  The input and output images 
have to be in byte format.

If no stretch ('N') is specified in this routine call, the LowFrac and HighSat
values should contain 0.0 and 255.0, respectively to avoid any errors in the
program's execution. 

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTORERAY
.RM 80
.NO FILL
.NO JUST
Function : Store a vector at a given angle.

ZA/XASTORERAY ( StartLine, StartSample, Angle, Length, Width, Dn, DUMMY,
	EndLine, EndSample )

^&Arguments\&
.LITERAL

StartLine :   integer, Starting line of vector

StartSample : integer, Starting sample of vector

Angle :       float, angle in degrees from north, clockwise manner

Length :      integer, Vector length

Width :       integer, Vector width

Dn :          integer or integer array, Dn value(s) for vector

DUMMY :       string, Variable for future use

EndLine :     integer output, Ending line of vector

EndSample :   integer output, Ending sample of vector

.END LITERAL
^&Description\&
.FILL

   This routine stores a vector of any orientation or angle, length, width and
color or shade of gray.  It also returns the endpoint coordinates in terms of
line and sample to the user.  The starting line and sample should be considered
the tail of the vector, and the ending line and sample the head.

   Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTRINGLENGTH
.RM 80
.NO FILL
.NO JUST
Function : Return the length of a character string.

ZA/XASTRINGLENGTH ( CharacterString, Size, FontThickness, Length )

^&Arguments\&
.LITERAL

CharacterString:  string, The actual character string for output.

Size:             integer, describes a multiple of the character size.
                           For example, 
                           Size=1 will yield 5*7 characters,
                           Size=2 will yield 10*14 characters,
                           Size=3 will yield 15*21 characters, and so on.

FontThickness:    integer, describes the thickness in pixels of the
                           characters in the text string for Hershey Font.
                           If block font is used, its value will always be
                           equal to 1.	For example, Fontthickness = n 
                           will smear the character n times in both line 
                           and sample directions.
  
Length:           output, integer, returns the length of the text string.

.END LITERAL
^&Description\&
.JUST
.FILL

If ZA/XASETCHARSPACING is called before ZA/XASTRINGLENGTH, the user specified pixel
spacing between characters is carried over to this calculation.

Please see the end of this document for a list of returned error values.

.PAGE
.HL2 ZA/XASTORESTRING
.RM 80
.NO FILL
.NO JUST
Function : Store a character string.

ZA/XASTORESTRING ( StartLine, StartSample, Size, Dn, CharacterString, 
		FontThickness )

^&Arguments\&
.LITERAL

StartLine :          integer, Starting line for character string, the 
                              uppermost line of the string.

StartSample :        integer, Starting sample for character string, the 
                              leftmost sample of the string.

Size :               integer, describes a multiple of the character size.
                              For example, 
                              Size=1 will yield 5*7 characters,
                              Size=2 will yield 10*14 characters,
                              Size=3 will yield 15*21 characters, and so on.

Dn :                 integer or integer array, Dn value(s) of the
                                                character string.

CharacterString :    string, The actual character string for output.

FontThickness :      integer, describes the thickness in pixels of the
                              characters in the text string for Hershey Font.
                              If block font is used, its value will always be
                              equal to 1.  For example, Fontthickness = n 
                              will smear the character n times in both line 
                              and sample directions.

.END LITERAL
^&Description\&
.JUST
.FILL

The current maximum string length is defined to be 132 characters.
A block font and several Hershey fonts are supported.  See ALTERNATE
CHARACTER FONTS under HELPFUL HINTS. The entire ascii set of printable
characters is supported for the block fonts.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTORETICK
.RM 80
.NO FILL
.NO JUST
Function : Store tick marks.

ZA/XASTORETICK ( StartLine, StartSample, EndLine, EndSample, Width, Length,
            Spacing, Dn )

^&Arguments\&
.LITERAL

StartLine :    integer, Starting line of tick marks.

StartSample :  integer, Starting sample of tick marks.

EndLine :      integer, Ending line of tick marks.

EndSample :    integer, Ending sample of tick marks.

Width :        integer, Width of tick marks.

Length :       integer, Length of tick marks.

Spacing :      integer, Spacing between tick marks.

Dn :           integer or integer array, Dn value(s) of tick marks.

.END LITERAL
^&Description\&
.FILL

If the start line equals the end line, a horizontal line of tick marks is
assumed.  Similarly if the start sample equals the end sample, a vertical
line of tick marks is assumed.

Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTOREVECTOR
.RM 80
.NO FILL
.NO JUST
Function : Store a line vector.

ZA/XASTOREVECTOR ( StartLine, StartSample, EndLine, EndSample, Width, Dn )

^&Arguments\&
.LITERAL

StartLine :   integer, Starting line of vector

StartSample : integer, Starting sample of vector

EndLine :     integer, Ending line of vector

EndSample :   integer, Ending sample of vector

Width :       integer, Vector width

Dn :          integer or integer array, Dn value(s) for vector

.END LITERAL
^&Description\&
.FILL

   This routine stores a vector of user specified starting and ending points with
any length, width and color or shade of gray.  Vectors having non-zero, defined
slopes are now supported by this routine.

   Please see the end of this document for a list of returned error values.
.PAGE
.HL2 ZA/XASTRINGLENGTH
.RM 80
.NO FILL
.NO JUST
Function : Return the length of a character string.

ZA/XASTRINGLENGTH ( CharacterString, Size, FontThickness, Length )

^&Arguments\&
.LITERAL

CharacterString:  string, The actual character string for output.

Size:             integer, describes a multiple of the character size.
                           For example, 
                           Size=1 will yield 5*7 characters,
                           Size=2 will yield 10*14 characters,
                           Size=3 will yield 15*21 characters, and so on.

FontThickness:    integer, describes the thickness in pixels of the
                           characters in the text string for Hershey Font.
                           If block font is used, its value will always be
                           equal to 1.	For example, Fontthickness = n 
                           will smear the character n times in both line 
                           and sample directions.
  
Length:           output, integer, returns the length of the text string.

.END LITERAL
^&Description\&
.JUST
.FILL

If ZA/XASETCHARSPACING is called before ZA/XASTRINGLENGTH, the user specified pixel
spacing between characters is carried over to this calculation.

Please see the end of this document for a list of returned error values.

.PAGE
.HL2 ZA/XAZOOMIMAGE
.RM 80
.NO FILL
.NO JUST
Function : For an input image file, perform an enlargement or reduction.

ZA/XAZOOMIMAGE ( Unit, InputStartLine, InputStartSample, InputEndLine, 
	     InputEndSample, OutputStartLine, OutputStartSample, ZoomFactor,
	     ZoomType, StretchType, LowFrac, HighSat, DNExcluded, ExcArrayDim )

^&Arguments\&
.LITERAL

Unit :              integer, Unit number of input image file.
	
InputStartLine :    integer, Starting line of input image file.
	
InputStartSample :  integer, Starting sample of input image file.

InputEndLine :      integer, Ending line of input image file.

InputEndSample :    integer, Ending sample of input image file.

OutputStartLine :   integer, Starting line of output image file.

OutputStartSample : integer, Starting sample of output image file.

ZoomFactor :        integer, Zoom factor
	
ZoomType :          character string, type of zoom, replication or
                                      interpolation.

StretchType :       char, Stretch type descriptor.
                          "F" = Do a fixed or linear stretch.
                          "A" = Do an adaptive stretch.
                          "N" = No stretch on image.

LowFrac :           real, If StretchType is fixed then LowFrac should be 
                          the low Dn value or the high Dn value for an inverse
                          fixed stretch; otherwise LowFrac should be the 
                          fraction percentage of the image to be sampled for the
                          adaptive stretch.

HighSat :           real, If StretchType is fixed then HighSat should be 
                          the high Dn value or the low Dn value for an inverse
                          fixed stretch; otherwise HighSat should be the 
                          saturation percentage for the adaptive stretch.

DNExcluded :        integer, DN values to be excluded from adaptive stretch. 
                             If no DN value will be excluded, use 0.
                     
ExcArrayDim :       integer, Number of DN to be excluded from adaptive 
                             stretch. If there isn't any DN to be excluded, 
                             use 0.


.END LITERAL
.PAGE
^&Description\&
.FILL
	
This routine allows the user to enlarge a particular segment of an image or
to reduce a section of an image by sampling.  Enlargements can be made
by either replicating pixels or interpolating between pixels.

The size of the resultant image at the output starting point is directly 
related to the zoom factor used.  If a zoom factor of 4 is used on a
100 x 100 pixel square section of an image, the resultant image will be
400 x 400 pixels square if replication is used, or 397 x 397 pixels square if
interpolation is used.

ZA/XAZOOMIMAGE has the same capabilities for fixed or adaptive stretches, please
refer to ZA/XASTOREIMAGE for further information regarding the stretch arguments.
.PAGE
.NUMBER LEVEL 3
.HL1 Return Error Values
.NO FILL

-------------------
Return Error Values
-------------------

.FILL
All the above routines will return an integer value that may be checked for
error status.  The following are returned by all routines and are:
.NO FILL

	 0 = Normal return

	-1 = One or more parameters are out of bounds,
	     usually because of negative or zero values,
	     or a parameter exceeds some defined maximum.

	-2 = A more complex boundary check shows that
	     the data exceeded some defined maximum.

.PAGE
.NUMBER LEVEL 4
.HL1 Helpful Hints
.HL2 Main Program Structure
.NO FILL

MAIN PROGRAM STRUCTURE

.KEEP
.RM 72
.FILL
.JUST
.PARAGRAPH 3,1,0
.AUTOPARA

To get started with GMASK, your main program body should generally look
like (if using C) :

.LITERAL

	main()
	{
	   za/xasetdim( 3 ) ;      /* Set GMASK to color mode 	   */

	   za/xainitialize( ... ) ;

	   (Body) .....


	   za/xacopymask(' ') ;
	}

.END LITERAL

In general, the first statement should be an "za/xasetdim", followed by an
"za/xainitialize" invocation.  This routine initializes all internal structures.
The last statement should be "za/xacopymask".  This routine actually does
the mask generation.
In between, at (body), should be various invocations to the "za/xastore???"
routines where "???" is your choice for your mask.

.PAGE
.HL2 Alternate Character Fonts
ALTERNATE CHARACTER FONTS

The user has the option of using the Hershey characters fonts as
an alternative to the 5x7 block character fonts GMASK provides internally.

The software module TXTSUBS contains the routines that implement
this capability.  The routines are prefixed with "TXT".  This module
must be included with GMASK if the Hershey fonts are to be used.

The user must first invoke the routine "za/xasetfont" to setup the desired font
and use the "za/xastorestring" routine , "za/xastringlength" routine as before.  
See above for a description of these routines.  For example, in a C code
sequence :

.LITERAL

	za/xasetfont( "HERSHEY", 3 ) ;

	(1) ....

	za/xasetfont( "DEFAULT", 0 ) ;

	(2) ....

.END LITERAL

At (1), all subsequent invocations to "za/xastorestring" will use
the characters of Hershey font number 3, all subsequent invocations
to "za/xastringlength" will return the string length of Hershey font number 3.

At (2), all subsequent invocations to "za/xastorestring" will use
the default or block characters fonts, all subsequent invocations
to "za/xastringlength" will return the string length of block font.
Character fonts make be mixed arbitrarily.

For a complete description of the various alternate character fonts,
see the software
module TTXTSUBS.  For practical use, character font numbers (3,4,5) have
the most complete ASCII set.  Font numbers (1,2,8) are less complete
missing only a few characters like brackets.  For the more adventurous :

.LITERAL

	Font #		Description
	------		-----------

	   7		Cursive script
	  10		Greek
	  11		English Gothic
	  12		German Gothic
	  13		Italian Gothic
	  14		Cyrillic (For you Rooskis out there)

.END LITERAL 

.PAGE
.HL2 Rotation of Character Fonts
ROTATION OF CHARACTER FONTS

Character strings may be written at 90, 0 and -90 degrees on a mask
using the routine "za/xasetfontangle".  Once this routine is invoked
all subsequent character strings in "za/xastorestring" invocations
will be written out in that angle.  90 degrees is defined as going
clockwise and -90 degrees is defined as going counter-clockwise.
For example, in a C code sequence :

.LITERAL

	za/xasetfontangle( 90 ) ;

	(1) ....

	za/xasetfontangle( 0 ) ;

	(2) ....

.END LITERAL

At (1) all character strings in "za/xastorestring" invocations are
written at 90 degrees.
At (2) all character strings in "za/xastorestring" invocations are
written at 0 degrees.

.!
.! Here is an "end" page.  (The preamble is necessary for a clean effect.)

.NNM
.ST
.T

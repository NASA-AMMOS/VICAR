
1  METROPOLIS

      subroutine metropolis(cost,narg,array,array2,range,numten,answer,
     +                       limits,norm,npts,prnt,ind)
       May be called from Fortran or "C". The "C" bridge is zmetropolis
       and uses the same arguments.  

       NOTE: The "C" bridge has been tested on the following systems:
		MIPL3, MIPL5, WASATCH, ANDES and ARSIA
	     Assume that the "C" bridge is NOT a supported feature on 
             ALL other systems.


  COST  A function provided by the user.
  NARG  The number of variables.
  ARRAY An array of data.
  ARRAY2 Another array of data.
  RANGE Bounds of solution vector elements.
  NUMTEN The number of iterations to reduce the error by 10.
  ANSWER The solution vector.
  LIMITS The total number of iterations permitted.
  NORM The number of iterations between normalizations.
  NPTS The number of points in ARRAY & ARRAY2.
  PRNT The number of iterations between printouts.
  IND  Status indicator. 


  PURPOSE:

 Anneals the cost function by iterative guessing of ANSWER using
 a monte carlo generator with continually decreasing bounds.


 This is an iterative numerical method for finding the coefficients of
 a function which minimize that function. There are two versions of this
 routine:
    (1)   In Numerical Recipes page 326, entitled: Simulated Annealing.
          To be used for combinatoric minimization of "goals".
    (2)   This case.
          To be used with mathematical expressions.

 There are all kinds of ways to use this subroutine. Two of them
 are:
    (1)   When you are trying to find the minimum of an N dimensional
          function whose coefficients you already know.
    (2)   When you are trying to determine the coefficients of a
          function when you know the form of the function and
          you have a bunch of data points, some of which, fit the
          function.

 In either event the process you must follow is to generate a FORTRAN
 subroutine called COST which returns a cost or penalty. This cost
 reflects the penalty imposed by assuming certain (incorrect) values
 for the coefficients (or the minimum position of the function).
 METROPOLIS will solve for the coefficients (or minimum) by guessing
 the solution vector and using the generated cost as a guide. It
 will return the solution vector which produces the lowest cost.

 These are the advantages of this scheme:

 1. You need not solve the inverse problem.
 2. The function need not be continuous or even have derivatives.
 3. You can generate a cost function which is as complicated 
    as required to express what you really want, ie: any constrained
    least squares operation is possible.
 4. The function can be N dimensional and wildly non linear.
 5. If you 'cool' slowly enough the solution will be for the
    LOWEST existing minimum possible, not the nearest to
    where you began.
 6. It doesent care if the solution is exact, ie: if some points
    have nothing to do with the function being minimized.

 These are the disadvantages:

 1. It requires many iterations, usually a couple of thousand
    in order to generate a model of the solution space.
    This is NOT an efficient least squares routine. If other
    (linear) methods exist use them instead.
 2. There is no guarantee that the solution will be correct
    if you are greedy and 'cool' too fast.
 
2  METHOD:

 The method interprets your problem as though it were a problem
 in statistical mechanics. You begin with a guess at the 'solution'
 and with a range about the solution where you expect the real
 solution to be found. The initial ranges are interpreted as
 temperatures. A random number generator produces guesses for the
 solution vector using a Cauchy Lorentzian pdf of the form:
    guess=temperature * tan (pi * randomnumber + pi/2) + lastguess
 A new cost is computed at the new guess location. If that cost
 is less than the previous one then we adopt the new solution.
 If the cost is higher we consult the Boltzmann probability
 distribution to determine the probability of an uphill excursion.
 This is computed from:
    probability= 1/ exp(uphillcost/(Boltzmann*temperature))
 If the probability > randomnumber then we adopt the new solution
 otherwise we abandon it. 
 At regular intervals we force the solution to return to the point
 where the smallest cost was discovered.
 Each successful iteration we decrease the temperature by:
   newtemp=oldtemp*scale
 where scale is the solution to :
   scale**n=1/10 where n is the number of iterations required to
   reduce the search range by one order of magnitude.

 PROPERTIES OF THIS METHOD:

 Initially the solution guesses fall over a large area of the solution
 space. As the temperature falls the solution generating function
 constricts solutions to ever decreasing regions. The Cauchy Lorentzian
 pdf allows occasional long jumps which provide an escape route out
 of local minima ,ie: the analogy of tunneling in physics. 
 Most guesses form a gaussian distribution and as the range of a guess
 decreases the precision increases. A memory of the lowest cost is
 maintained and occasionally the solution pointer is forced to revisit
 this location. This is equivalent to saying that in a statistical 
 situation where ANY molecule can find the hole in the bucket
 we, as serial computing machines, reserve the right to know about it.


2  ARGUMENTS:

      subroutine metropolis(cost,narg,array,array2,range,numten,answer,
     +                       limits,norm,npts,prnt,ind)

 COST is an input subroutine which returns a cost or
      penalty resulting from guessing the solution vector ANSWER.
      Cost is a function of vector ANSWER and of any data in ARRAY
      and ARRAY2 which it feels like making use of.
      See COST writeup following this writeup.

 NARG is the number of arguments in the ANSWER and RANGE vectors.
      INTEGER*4.

 ARRAY is an array of data points for COST to use in computing
       the cost. It is of length NPTS.

 ARRAY2 is another array of data points for COST to use in computing
       the cost. It is also of length NPTS.

 RANGE is the expected range about each initial guess ANSWER.
       It need not be exact. It provides a general feel for how
       broad the solution space is for elements of ANSWER.
       It is a vector of length NARG. On return range(1) contains
       the cost of the solution vector returned in ANSWER.
       REAL*4.

 NUMTEN is the number of iterations required to reduce the search
        range by a factor of 10.
        INTEGER*4.
        
 ANSWER is the initial guess position. On return answer holds the
        solution which provided the smallest cost.
        Answer is a vector of length NARG.
        REAL*4.

 LIMITS is the maximum number of successful iterations permitted.
       Should be at least several hundred. If LIMITS/NUMTEN=3 for
       example the solution precision will be about RANGE/10**3.
       INTEGER*4.

 NORM is the number of iterations which pass between recomputation
      of the Boltzmann normalization constant. A normalization
      is always performed before the first iteration.
      Certain types of minimization problems require one to renormalize
      at regular intervals.
      INTEGER*4.

 NPTS is the number of points entered in ARRAY. INTEGER*4.

 PRNT prints convergence status each PRNT iterations. A zero
      means no printing at all. INTEGER*4.

 IND  returned indicator. 0 = normal, 1 = abnormal return.
      INTEGER*4.


  REQUIRED SUBROUTINE COST (provided by the user):

    Fortran Version
      subroutine cost(x,array,array2,n,error,ind)
    C Version
      zcost(x,array,array2,n,error,ind)
        zcost is an arbritary name for the "C" routine, but the
        name must be passed as a routine name to the bridge
        zmetropolis. 


 Returns the cost function resulting from guessing x (answer).
 This could be any function or logical operation.
 The user supplies this subroutine. The purpose of COST is
 to return a penalty measure which METROPOLIS uses as it tries
 to feel it's way to the solution by guessing at values for
 the solution vector X. METROPOLIS will select that solution vector
 which results in the smallest cost.

  ARGUMENTS OF COST:

 X     is the solution vector. REAL (length known by COST).
 ARRAY is an array of N data points (if needed). REAL
 ARRAY2 is another array of N elements if needed. REAL
 N      is the number of elements/data points in ARRAY & ARRAY2.
 ERROR is the returned cost. REAL scalar.
 IND   is 0 for normal return, 1 for abnormal return.
        If METROPOLIS senses an indicator of 1 it will generate another
        guess somewhere else & try again.


     
2  HISTORY

 The technique was conceived of by Edward Teller and Nocholas
 Metropolis in 1953 and in my humble opinion is the most
 powerful numerical minimization method in existence.
 I have taken the liberty to modify it as i saw fit by incorporating
 ideas from several authors including a few of my own.

     METROPOLIS
     Original Programmer: 		J. J. Lorre
     Current Cognizant Programmer:	J. J. Lorre
     Documentation Author: 		J. J. Lorre
     Reference:     Szu H. H., SPIE 698 Real Time Signal Processing
                    #9 (1986) 59 "Non-Convex Optimization"
     Revisions:
     5-94   RNR(CRI)  MSTP S/W Conversion (VICAR Porting) - Provided a
                      "C" interface and test routines.  May be invoked
                      from "C" or Fortran, however, the "COST" 
                      subroutine must be in the same language as the 
                      invoking program.
     3-95   CRI     Removed LIB_LOCAL as per FR85757
     3-95   CRI     Fixed xvmessage lines for alphas as per FR85782
     7-95   CRI     Removed hard coded seed line as per FR87256

2 Examples

     FORTRAN  EXAMPLE
      purpose to test the Metropolis algorithm in one dimension.
      The example below is to find the LOWEST minimum of the
      polynomial expressed by the COST function found at the
      end of this example.
     
      real*4 range(1),answer(1),array(1),array2(1)
      external e2cost
      range(1)=2.0
      numten=500
      answer(1)=3.
      limit=1500
      iprint=200
      narg=1
      norm=200
      npts=0
      call metropolis(e2cost,narg,array,array2,range,numten,answer,
     +                 limit,norm,npts,iprint,ind)
      return
      end


      subroutine e2cost(x,array,array2,n,error,ind)
      real*4 array(1),array2(1),x(1)
      ind=0
      error=x(1)**4-16*x(1)**2+5*x(1)
      return
      end


     C  EXAMPLE
      void zcost2 (x, array, array2, n, error, ind) /* cost function*/

      float *x;         /* The solution vector */
      float *array;     /* An array of n data points, if needed */
      float *array2;    /* Another array of n data points, if needed */

      int n;              /* The number of data points in array and array2 */  
      float *error;       /* The returned cost */
      int *ind;           /* Status indicator */
      {
        float *xp,xvp;
        double err,dxvp,quad;
        dxvp = *(x);
        *ind=0;
        err=pow(dxvp,4.) - 16. * pow(dxvp,2.) + 5. * (dxvp);
        xvp = err;
        *error = xvp;
      }


      void main() /* main Routine*/
      {

        void (*costp)();     /* The cost function to be called */
        int narg;           /* The number of variables */  
        float array[1];     /* An array of data */
        float array2[1];    /* Another array of data */
        float range[1];     /* Bounds of solution vector elements */
        int numten;         /* The itrations to reduce the error by 10 */
        float answer[1];    /* The solution vector */
        int limit;          /* The total number of iterations permitted */
        int norm;           /* The iterations between normalizations */
        int npts;           /* The number of points in array and array2 */
        int iprint;	    /* The number of iterations between printouts */
        int ind;            /* Status indicator */
        int *indp;
        void *ap;

        numten=500;
        limit=1500;
        iprint=200;
        narg=1;
        norm=200;
        npts=0;
        answer[0] = 3;
        range[0] = 2;
        indp = &ind;
        costp = *zcost2;
        zmetropolis(costp,narg,array,array2,range,numten,answer,
                       limit,norm,npts,iprint,indp);

        }

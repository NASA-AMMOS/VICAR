1 GETINPUT

  FORTRAN:
  integer inpchar, waitforinput, pollinput, startup
  inpchar = waitforinput(startup)
  inpchar = pollinput(startup)

  C:
  int inpchar, startup;
  inpchar = zwaitforinput(startup);
  inpchar = zpollinput(startup);

  These functions are designed to get non-blocking keyboard input with-
  out making the user press <Enter>.  The two functions are identical in
  what keys they will and will not handle (more on that later), but they
  differ in one key respect:  the waitforinput() routine uses system rou-
  tines to wait until a key is pressed.  Control is not returned to the
  calling program until a key has been pressed.  The pollinput() routine,
  on the other hand, checks to see if a key has been pressed.  If it has,
  the value of the key is returned; otherwise, the function returns the
  null character (0).  Control is returned immediately to the calling
  program.  If an error occurs while trying to set up the terminal and read
  the input, the functions return a value of VGI_INP_ERROR (-1).  If the
  functions are unable to determine which key has been pressed, it returns
  a value of VGI_NOT_KNOWN (-127).

  Under most conditions, user input can and should be done using the stan-
  dard C or Fortran routines.  However, if you are designing an interactive
  menu, for example, then you will need to be able to get the characters as
  the user types them--waitforinput() is ideal for this situation.  The
  menu system in the Browse program is an example of this.

  Similarly, if you need to set up a task which can be carrying out other
  tasks while waiting for user input, then pollinput() should be used.  An
  example is the scrolling routine in the View program, where the user can
  use the keyboard to control the scrolling rate and direction inter-
  actively.

  The only parameter to these functions is the 'startup' parameter.  This,
  when set to True (1), initializes the terminal properly for input.
  You should leave the parameter set to True until you are through getting
  input.  When you are through gathering input, you must call the routine
  one last time with a parameter of False (0) to reset the terminal to
  normal.  For this last case, each of the functions returns the null
  character which can be discarded by the calling program.

  One word of warning--the pollinput() routine uses system resources rather
  heavily if all you are doing is waiting in a loop for input.  If that is
  the case, use the waitforinput() routine instead.

  Now, what keys do these routines handle and how does it pass the data
  back to you?  Basically, the routines are set up to handle Vt200 terminal
  keyboard input.  This means that it handles all the normal typewriter
  keys as well as the arrow keys, PF1, PF2, PF3, PF4, Next, Prev, Find,
  Select, Insert, Remove, F7-F14, and F17-F20.  The function keys F1-F6 are
  reserved for use by the terminal and I couldn't find the values for F15
  and F16 (nor any way to generate them).

  In addition, these routines can also handle most of the <Ctrl>-<key> com-
  binations.  In both Unix and VMS, some of these <Ctrl> sequences are
  reserved by the system and can't be handled by these routines.  In VMS,
  the routines can handle every combination *except* <Ctrl>-C, <Ctrl>-O,
  <Ctrl>-Q, <Ctrl>-S, <Ctrl>-T, <Ctrl>-X, and <Ctrl>-Y.  (For some reason,
  pressing <Ctrl>-X returns the control sequence associated with <Ctrl>-U.)

  In Unix, the routines can handle every combination except <Ctrl>-C,
  <Ctrl>-O, <Ctrl>-Q, <Ctrl>-S, <Ctrl>-Z.

  One other wonderful little problem is what happens when you press <Enter>
  on Unix vs. VMS.  In VMS, pressing <Enter> generates ASCII 13 (a carriage
  return).  Similarly, pressing <Ctrl>-M has the same effect.  In Unix, on
  the other hand, pressing <Enter> generates ASCII 10 (a line feed) and
  pressing <Ctrl>-M does the same thing.  In both systems, pressing <Ctrl>-J
  generates ASCII 10 (line feed).

  So, how did I deal with this?  Simple, really.  I decided to take the
  matter into my own hands so that the application programmer wouldn't
  have to deal with it.  On either system, pressing <Ctrl>-J, <Ctrl>-M,
  or <Enter> all do the same thing, return the C newline character ('\n').
  So far, this seems to be ASCII 10 on every system that I've tested this
  program on.  If your program will be checking for <Enter>, then you
  should test the input character against '\n' rather than specifically
  against <Enter>.

  This brings us to the next topic of discussion: how do you know what key
  has been pressed?  The routines basically split the key pressed into two
  categories: standard and extended.  The standard keystrokes consist of
  all the standard typewriter keys, as well as the <Ctrl>-<key> combina-
  tions.  I call these standard keystrokes because they consist of one
  character for each keystroke (even the <Ctrl>-<key> combinations which
  are mapped to ASCII 1-26).

  The extended keystrokes, on the other hand, are all the function keys,
  PF keys, arrow keys, and special keys (e.g., Insert, Remove, etc.).
  These are called extended keystrokes because each of these keys, when
  pressed, generates several characters.  For example, function key F19
  generates the following sequence of five characters:  <ESC>[33~.

  I decided to put the processing of such extended keys into these sub-
  routines to avoid making each application program deal with them.  If an
  extended key is pressed, these routines automatically determine which
  key has been pressed.

  So how do you know which key has been pressed?  There is an associated
  include file that has been released at the same time as these routines
  call vgi_keys.h.  This include file provides defines for every extended
  key that can be processed by these routines, as well as others, such as
  the <Ctrl>-<key> combinations and such special keys as <Tab> and <Back-
  space>.  The include file does not have defines for the standard charac-
  ter set because you can deal with that in C quite nicely.  The include
  also includes the definitions for the special cases (VGI_NOT_KNOWN and
  VGI_INP_ERROR).

  For examples of the usage of these routines, I suggest you look at the
  test file that accompanies them.  It gives a straightforward look at how
  to call them and how to process the return values.

2 History

  Original Programmer:  Paul Bartholomew  03-10-93
  Current Cognizant Programmer:  Paul Bartholomew  03-10-93
  Source Language:  C

1 GETSPICE2, GETSPICE3, GETSPICE4
 
VICAR subroutines GETSPICE2, GETSPICE3, and GETSPICE4 return SPICE data
for an image.  These routines are "wrappers" which call GETSPICE95.

Users should be aware that these routines clear the SPICE kernel pool before
returning, so subsequent calls to SPICE routines will fail unless INIT_SPICE()
or an equivalent routine is called.


FORTRAN calling sequences:

    CALL GETSPICE2(UNIT,PROVENANCE,buf,ind)
    CALL GETSPICE3(PROJECT,TARGET,CAMERA_SN,SCLK,SCET,PROVENANCE,buf,ind)
    CALL GETSPICE4(PROJECT,PROVENANCE,DATA,buf,ind)

where the arguments (where applicable) should be declared as follows:

      INTEGER*4 UNIT		!input logical unit number
      LOGICAL PROVENANCE	!.TRUE.=use provenance, .FALSE.=ignore it
      CHARACTER*5 PROJECT	!GLL, VGR-1, VGR-2, CASSI
      CHARACTER*12 TARGET	!Target name
      INTEGER*4 CAMERA_SN	!Camera serial number
      INTEGER*4 SCLK		!Frame number (FDS for VGR)
      INTEGER*4 SCET(6)		!SCET (year,day,hour,minute,sec,msec)
      INTEGER*4 DATA(100)	!input label buffer (from GETLABCON)
      REAL*8 BUF(100)		!buffer returned by GETSPICE95
      INTEGER*4 IND		!status returned by GETSPICE95

C calling sequences:

    ind = zgetspice2(unit,provenance,buf);
    ind = zgetspice3(project,target,camera_sn,sclk,scet,provenance,buf)
    ind = zgetspice4(project,provenance,data,buf)

        #include "xvmainc.h"
	#include "ftnbridge.h"
	#include "spiceinc.h"
	int unit;		/* logical unit number */
        int provenance;		/* 1=use provenance, 0=ignore it */
        char project[6];	/* GLL, VGR-1, VGR-2, CASSI */
        char target[13];	/* Target name */
        int camera_sn;		/* Camera serial number */
        int sclk;		/* Frame number (FDS for VGR) */
        int scet[6];		/* SCET (year,day,hour,minute,sec,msec) */
        int data[100];		/* input label buffer (from GETLABCON) */
	buf_union_typ *buf;	/* output SPICE/SEDR buffer */
        int ind;		/* return status */

In addition, the calling program must have the following parameters defined in
its PDF:  TARGET, SPICEMODE, CKNAME, CKID, INSTITUTE, PURPOSE, PROGRAM, SPKID,
REQNUM, CDATE, USERID, and GROUPID.  It is strongly urged that the parameter
definitions and accompanying help text be copied from TGETSPICE2.PDF, located
in GETSPICE2.COM.

2 INPUT ARGUMENTS:

     UNIT = logical unit number of image for which SPICE data is required.
     PROVENANCE = .FALSE. (or 0) to ignore provenance parameters, .TRUE. (or 1)
        to use it.
     PROJECT = project name (from GETPROJ)
     TARGET = target name for GLL, or planet name for VGR.
     CAMERA_SN = camera serial number (used for GLL only, where 1=full-frame,
           2=summation mode).
     SCLK = frame number (=100*RIM+MOD91 for GLL, =FDS for Voyager)
     SCET = shutter-centered Spacecraft-Event-Time
     DATA = buffer containing data for VICAR label items (via call to GETLABCON)

  OUTPUT ARGUMENTS:
  
     BUF = 100 element double precision SPICE buffer as returned by GETSPICE95.
           See the help for that routine for details.

     IND = return status (identical to GETSPICE95).
		  1 = Success
                  0 = Failure
		 -1 = Bad User Input
		 -2 = Invalid User's Kernel Id
		 -3 = buf2scet() Failed:Invalid SCET Data
          	 -4 = zutc2et() Failed:Invalid SCET Data
          	 -5 = zsctik() Failed:Invalid SCLK Tolerance
          	 -6 = GetIds2() Failed:Unknown SC instrument
          	 -7 = zpbid() Failed: Unknown Target
          	 -8 = zbodvar() Failed:Invalid Radii Returned
          	 -9 = Cmatrix2() Failed:Invalid C Matrix Returned
         	-10 = LoadSpk2() Failed:Cannot Load SPK Files
         	-11 = zspkssb() Failed:Error Getting SC Pos Vel Vector 
         	-12 = zspkssb() Failed:Cannot Get Target Pos Vel Vector
                -13 = zspkssb() Failed:Cannot Get Center Pos Vel Vector
                -14 = zspkapp() Failed:Cannot Get SC Relative Position
                -15 = zspkapp() Failed:Cannot Get Target Reltv Pstn
                -16 = zspkapp() Failed:Cannot Get Sun Reltv Pstn
                -17 = zbodeul() Failed:Cannot Get Euler Angle
                -18 = zeul2m() Failed:Bad ME-MATRIX Returned
                -19 = zmxmt() Failed:Bad OM-MATRIX Returned
                -20 = zminus() Failed:Bad Target2Sc State returned
                -21 = zreclat() Failed:Bad TCB Lon & Lat
                -22 = zgetcamcon() Failed:Bad Camera Constant
		-23 = ?????????????
                -24 = zcorcav() Failed:Abnormal Return Status(99, -1)
                -25 = zvadd() Failed:Error Adding Matrix
                -26 = zmxv() Failed:Error Multiplying Matrix
                -27 =zreclat(): Error Getting TSB Lat & Lon

2 OPERATION

GETSPICE2, GETSPICE3, GETSPICE4 are easier to use than the underlying routine,
GETSPICE95.  The choice of which routine to call depends on what information is
available to the calling program.

GETSPICE2 scans the VICAR label of the image (referenced by UNIT) via calls to
GETPROJ and GETLABCON to obtain the project name and other label data (DATA
buffer).  GETSPICE4 is then called.  The image (UNIT) must be open before
calling GETSPICE2.

GETSPICE3 handles the case where the application program does not have access
to the image (i.e. UNIT cannot be provided).  The calling program must provide
the information normally contained in the VICAR label in the argument list
(PROJECT, TARGET, CAMERA_SN, SCET).  These values are used to construct a fake
GETLABCON buffer (DATA).  GETSPICE4 is then called.

GETSPICE4 extracts the following information from the GETLABCON buffer:
PROJECT, TARGET, CAMERA_SN, SCET.  GETSPICE4 also retrieves user parameters
TARGET, SPICEMODE, CKNAME, and CKID (via calls to XVPARM) to set up the call
to GETSPICE95.  If the calling program already has access to the GETLABCON DATA
buffer, then it is more efficient to call GETSPICE4 directly since this avoids
a second call to GETLABCON.

Unless the PROVENANCE flag is set to FALSE (=0 for C), the INSTITUTE, PURPOSE,
PROGRAM, SPKID, REQNUM, CDATE, USERID and GROUPID parameters are also
retrieved and stored in the GETSPICE95 userinfo buffer.

A reason for ignoring the provenance parameters during a GETSPICE2 call is for
programs like FARENC which both retrieve and store SPICE data.  For FARENC,
the provenance parameters are not used to retrieve SPICE data but rather to
store provenance data via a call to PUTSPICE2.

2 REMOTE SPICE ACCESS

As mentioned above, the calling program must have the SPICEMODE defined in its
PDF.  If the value for SPICEMODE is 'LOCAL, then the SPICE data is retrieved
from local (disk) storage.  If the value for SPICEMODE is 'REMOTE, then the
SPICE data is retrieved via a remote server.


2 HISTORY

Original programmer: Gary Yagi Mar 15, 1996
Current cognizant programmer:  Gary Yagi
Revisions:

28 Nov 01  GMY  Add Cassini capability.
25 Aug 1998 TXH Removed subroutine 'vgr_date()' and added call to 
                'scet_update()', which is an enhanced version of 'vgr_date()'.
13 May 98  TXH  Added subroutine 'vgr_date()' to correct Voyager date formate
                input to msserver.  Note: Voyager date has 2-digit year and 
                <-999> for msec.  The new subroutine adds a 100-year date window
                for Voyager data.
29 Apr 98  GMY  Updated to access VGR SPICE data via new msserver.
01 Oct 96  GMY  Add GETSPICE3 and GETSPICE4 routines.
15 Aug 96  SMC  Added code to distinguish between Full Frame and Summation Mode 
                  when processing GLL data.  And pass it on to GETSPICE95 with 
                  the CAMERA parameter.  (DFR)
10 Jun 96  SMC  Fixed the USR_INFO case conversion.  (DFR)
29 May 96  GMY  Convert CKNAME parameter to uppercase (DFR)
01 APR 96  GMY  Update to changes in GETSPICE95 (FR.....)

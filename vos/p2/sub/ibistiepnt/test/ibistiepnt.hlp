1 IBISTIEPNT

  Module IBISTIEPNT contains routines for opening and closing and
  reading and writing IBIS-2 tiepoint files with general qualifiers
  and image point qualifiers:

    zitiepnt_openw opens a new IBIS tiepoint file for writing.

    zitiepnt_openr opens an existing IBIS tiepoint file for reading.

    zitiepnt_openu opens an existing IBIS tiepoint file for updating.

    zitiepnt_write writes a row to an IBIS tiepoint file.

    zitiepnt_read reads a row from an IBIS tiepoint file.

    zitiepnt_close closes an IBIS tiepoint file.

 The type of tiepoint file used in these routines is described in the reference
 given below.  For convenience, some of the information from the reference
 will be quoted here.

 A tiepoint file with qualifiers is a tabular file (with rows and columns)
 containing data for tiepoints from a user-specified set of n images (pictures).
 Each row (record) contains data items for the set of n images for one tiepoint.
 Each row has the same format (same set of items in the same order).  
 Each column contains the values for a given record item for the set of
 records in the file. 

 The order of items in each row is as follows (! order changes via the first spec!):

  L1 S1 q11 q12 ... q1m  L2 S2 q21 q22 ... q2m ... Ln Sn qn1 qn2 ...qnm Q0 Q1 ... 

The Li and Si, i=1 to n, are the line and sample coordinates of a given
"conjugate point" or "tiepoint" measured in images i=1 to n.
"The (optional) qij items are " 'image point qualifiers' containing information
about particular coordinate line/sample pairs.  While the line/sample 
coordinates are always real, the qualifiers may be integer, real, or text;
however, for a given m, this qualifier type is always constant."
"The last columns (Q0, Q1...) of each row contain (optional) 'general
qualifiers' pertaining to the 'complete tiepoint'.  The general qualifiers
may be of type integer, real, or text."

      
2  CALLING SEQUENCE

  C Calling Sequences:        

#include "ibistiepnt.h"
#define OK    1

   status = zitiepnt_openw (unit, &ibis, 
                            Nimages, imgs_fnam,
                            Ngqual, gqual_nam, gqual_fmt, gqual_unit, 
                            Niqual, iqual_nam, iqual_fmt, iqual_unit, nrow);

   status = zitiepnt_openr (unit, &ibis,
                           &Nimages, imgs_fnam,
                           &Ngqual, gqual_nam, gqual_fmt, gqual_unit, 
                           &Niqual, iqual_nam, iqual_fmt, iqual_unit, &nrow);


   status = zitiepnt_openu (unit, &ibis,
                            &Nimages, imgs_fnam,
                            &Ngqual, gqual_nam, gqual_fmt, gqual_unit, 
                            &Niqual, iqual_nam, iqual_fmt, iqual_unit, &nrow);

   status = zitiepnt_write (unit,irow,lbuf,sbuf,gr_qbuf, gi_qbuf,ga_qbuf,
                                                 ir_qbuf, ii_qbuf,ia_qbuf);

   status = zitiepnt_read (unit,irow,lbuf,sbuf,gr_qbuf, gi_qbuf,ga_qbuf,
                                                 ir_qbuf, ii_qbuf,ia_qbuf);
   status = zitiepnt_close(unit);

    Note the & for scalar variables passed by address.


  FORTRAN Calling Sequences:  not implemented yet.

  For all of the above routines, the returned status is the (defined) value
  OK if the routine is successful.  If the routine is not successful, the
  routine will print an error message and return a different value.
  For any of the "open" routines, the calling application 
  should call XVUNIT first, but the file should be closed
  when the "open" routine is called.

2  ARGUMENTS

   zitiepnt_openw 

      unit        VICAR unit number of tiepoint file.  (input, integer)
                  (unit,  Nimages, Ngqual, Niqual, and nrow are passed by value
                  for this routine.)
      ibis        IBIS file descriptor of tiepoint file.  (output, integer)
                   (This is returned just in case you need it.)
      Nimages     Number of images for which tiepoint file contains tiepoints.
                  (input, integer)   A tiepoint file with qualifiers contains
                  data for tiepoints from a user-specified set of n images.
      imgs_fnam   Name of the image files.
                  The declaration is:   char imgs_fnam[][FNAMLEN]
                  (FNAMLEN is defined in ibistiepnt.h) 
      Ngqual      Number of General qualifiers.     (input, integer)
      gqual_nam   Name of the general qualifier.
                  (input, an array of Ngqual strings)
                  The declaration is:   char gqual_nam[][STRING_32]
                  (STRING_32 is defined in ibistiepnt.h) 
      gqual_fmt   General qualifier data format specifications.
                  (input, an array of Ngqual strings)
                  The declaration is:   char gqual_fmt[][IFMT_SIZE]
                  (IFMT_SIZE is defined in ibisfile.h, which is included
                  by itiepointq.h.)  The valid format specifications are
                  "REAL" (for float), "FULL" (for integer), or for text,
                  "A1","A2",..., "A256".  Text columns must be assigned
                  a fixed size (field width).  For example, "A256" means
                  text with a field width of 256 characters.  The whole field
                  can be filled with characters; the last position is NOT
                  reserved for a null terminator.  The routines
                  zitiepnt_read and zitiepnt_write  provide an exta space
                  for a null terminator for each text field.  Thus the user
                  only needs to include a null terminator in the field if
                  they want to store a string shorter than the field width.
                  Thus, the calling application
                  may store null-terminated strings in such text fields
                  if desired, but the application should still reflect the
                  fact that zitiepnt_read and zitiepnt_write transfer
                  the fixed number of characters.
      gqual_unit  Unit of the general qualifier (e.g. pixels, m, cm ...).
                  (input, an array of Ngqual strings)
                  The declaration is:   char gqual_unit[][STRING_32]
      Niqual      Number of image point qualifiers per image. (input, integer)
      iqual_nam   Name of the image point qualifier.
                  (input, an array of Niqual strings)
                  The declaration is:   char iqual_nam[][STRING_32]
      iqual_fmt   Image point qualifier data format specifications.
                  (input, an array of Niqual strings)
                  The declaration is:   char iqual_fmt[][IFMT_SIZE]
                  (See under gqual_fmt for more information.)
      iqual_unit  Unit of the image point qualifier (e.g. pixels, m, cm ...).
                  (input, an array of Niqual strings)
                  The declaration is:   char iqual_unit[][STRING_32]
      nrow        Number of rows to be allocated.   (input, integer)
                  Make this somewhat greater than the largest you expect the
                  file to get.
                  
   zitiepnt_openr 
      unit        VICAR unit number of tiepoint file.  (input, integer)
                  (unit is passed by value for this routine.)
      ibis        IBIS file descriptor of tiepoint file.  (output, integer)
                   (This is returned just in case you need it.)
      Nimages     Number of images for which tiepoint file contains tiepoints.
                  (output, integer)   A tiepoint file with qualifiers contains
                  data for tiepoints from a user-specified set of n images.
      imgs_fnam   Name of the image files.
                  The declaration is:   char imgs_fnam[][FNAMLEN]
                  (FNAMLEN is defined in ibistiepnt.h) 
      Ngqual      Number of General qualifiers.     (output, integer)
      gqual_nam   Name of the general qualifier.
                  (input, an array of Ngqual strings)
                  The declaration is:   char gqual_nam[][STRING_32]
                  (STRING_32 is defined in ibistiepnt.h) 
      gqual_fmt   General qualifier data format specifications.
                  (output, an array of Ngqual strings)
                  The declaration is:   char gqual_fmt[][IFMT_SIZE]
                  (IFMT_SIZE is defined in ibisfile.h, which is included
                  by itiepointq.h.)  The valid format specifications are
                  "REAL" (for float), "FULL" (for integer), or for text,
                  "A1","A2",..., "A256".  Text columns must be assigned
                  a fixed size (field width).  For example, "A256" means
                  text with a field width of 256 characters.  The whole field
                  can be filled with characters; the last position is NOT
                  reserved for a null terminator.  The routines
                  zitiepnt_read and zitiepnt_write  provide an extra space
                  for a null terminator for each text field.  Thus the user
                  only needs to include a null terminator in the field if
                  they want to store a string shorter than the field width.
                  Thus, the calling application
                  may store null-terminated strings in such text fields
                  if desired, but the application should still reflect the
                  fact that zitiepnt_read and zitiepnt_write transfer
                  the fixed number of characters.
      gqual_unit  Unit of the general qualifier (e.g. pixels, m, cm ...).
                  (input, an array of Ngqual strings)
                  The declaration is:   char gqual_unit[][STRING_32]
      Niqual      Number of image point qualifiers per image. (output, integer)
      iqual_nam   Name of the image point qualifier.
                  (input, an array of Niqual strings)
                  The declaration is:   char iqual_nam[][STRING_32]
      iqual_fmt   Image point qualifier data format specifications.
                  (output, an array of Niqual strings)
                  The declaration is:   char iqual_fmt[][IFMT_SIZE]
                  (See under gqual_fmt for more information.)
      iqual_unit  Unit of the image point qualifier (e.g. pixels, m, cm ...).
                  (input, an array of Niqual strings)
                  The declaration is:   char iqual_unit[][STRING_32]
      nrow        Number of rows allocated.   (output, integer)

   zitiepnt_openu 
                  The arguments are the same as for zitiepnt_openr.

   zitiepnt_write 
                  For both zitiepnt_write and zitiepnt_read, it is helpful
                  to relate the arguments to the row diagram that was explained
                  above.  It is repeated here for the reader.
L1 S1 q11 q12 ... q1m  L2 S2 q21 q22 ... q2m ... Ln Sn qn1 qn2 ...qnm  Q0 Q1 ... 
                  The row contains several different types of values.  These
                  routines utilize a separate argument for each of the different
                  types of values.

      unit        VICAR unit number of tiepoint file.  (input, integer)
                  (unit and irow are passed by value for this routine.)
      irow        the row number (ordinal) at which to write data.  The
                  numbering starts with irow=1 for the first row in the file.
                  (input, integer)
      lbuf        the line coordinates, L1,L2,...Ln.  (input, array of floats
                  of size Nimages)
      sbuf        the sample coordinates, S1,S2,...Sn (input, array of floats
                  of size Nimages)
      gr_qbuf     the general qualifiers of type REAL, ordered left to right
                  as in row diagram.  The size of this array is the number of
                  corresponding (REAL) formats in the gqual_fmt argument to the
                  "open" routine.  (input, array of floats)
      gi_qbuf     the general qualifiers of type FULL, ordered left to right
                  as in row diagram.  The size of this array is the number of
                  corresponding (FULL) formats in the gqual_fmt argument to the
                  "open" routine.  (input, array of integers)
      ga_qbuf     the general qualifiers of type ASCII, ordered left to right
                  as in row diagram.  These are packed in adjacent elements
                  of one character array.  Each ASCII qualifier is allocated
                  space in this array according to the number of characters
                  (field width) specified in the corresponding (A..) formats 
                  in the gqual_fmt argument to the "open" routine.  
                  In addition this buffer must include one extra space
                  for a null terminator for each text field.  For example,
                  to store an A3 field and an A2 field, the buffer should
                  contain the three characters (A3), then a null terminator,
                  then the two characters (A2), and then a null terminator.
                  (input, array of characters)
      ir_qbuf     the image point qualifiers of type REAL, ordered left to right
                  as in row diagram.  The size of this array is Nimages times
                  the number of corresponding (REAL) formats in the 
                  iqual_fmt argument to the
                  "open" routine.  (input, array of floats)
      ii_qbuf     the image point qualifiers of type FULL, ordered left to right
                  as in row diagram.  The size of this array is Nimages times
                  the number of corresponding (FULL) formats in the 
                  iqual_fmt argument to the
                  "open" routine.  (input, array of integers)
      ia_qbuf     the general qualifiers of type ASCII, ordered left to right
                  as in row diagram.  These are packed in adjacent elements
                  of one character array.  Each ASCII qualifier is allocated
                  space in this array according to the number of characters
                  (field width) specified in the corresponding (A..) formats 
                  in the gqual_fmt argument to the "open" routine.  
                  In addition this buffer must include one extra space
                  for a null terminator for each text field.  For example,
                  to store an A3 field and an A2 field, the buffer should
                  contain the three characters (A3), then a null terminator,
                  then the two characters (A2), and then a null terminator.
                  (input, array of characters)

   zitiepnt_read 
                  uses the same set of arguments as zitiepnt_write, except
                  that all of the array arguments are outputs of this routine.

   zitiepnt_close
      unit        VICAR unit number of tiepoint file.  (input, integer)
                  (unit is passed by value for this routine.)

2  HISTORY

      Original Programmer: Steve Pohorsky     April 1997
      Current Cognizant Programmer: Steve Pohorsky
      Source Language: C


 Revision History
  4-97  ...SP.... Initial release is portable (VMS and UNIX).
  6-97  ...adapt to the DLR hwibis() specification (F. Wewel, DLR)
  
2  OPERATION

 zitiepnt_openw sets up an IBIS file with NCOL (number of columns) =
 Ngqual + Nimages * (2 + Niqual).   This routine stores Nimages, Ngqual, and
 Niqual in the VICAR property label.  These values are read when either
 zitiepnt_openr or zitiepnt_openu are called and are used to recompute
 the number of columns to be accessed.  (The latter two routines allow extra
 columns to be added by the user following the original columns.  This gives the
 user the option of storing additional data in the file.  Any extra columns
 in the file will not be altered by this module.)

 These "open" routines store information about the column formats so that
 zitiepnt_read and zitiepnt_write know the size of their array arguments.

2 REFERENCES

 Data Description: Mars 94/96 image point collection program design document,
                   Dr. Juergen Oberst, DLR, 31-Oct-1996, Appendix 3

 IBIS Software:    "IBIS Subroutine Library Programmers' Guide", 
                   Dr. Niles Ritter, JPL Document D-11944.

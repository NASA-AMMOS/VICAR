===========================================================================

VICAR SUBROUTINE		phoCorrect

===========================================================================

Purpose:		Returns the photometric correction factor of 
			a given photometric data object (containing a
			photometric function) to change radiance 
			values from measured viewing and illumination 
			conditions to new artificial target viewing 
			and illumination conditions.

===========================================================================

Function:		The routine calls twice the routine phoBidiRef 
			for the measured and the target illumination 
			condition and divides them.  In the case that a 
			failure occurs or the target point is not 
			illuminated or is not visible for the measured 
			or the target illumination conditions 
			the function returns the value 1.0 .

			The filled photometric data object is passed to this
			routine.  The input of the illumination conditions 
			is different for the Fortran- and the C-routine:
			FORTRAN :
				Two arrays and some "switch"-parameters are 
				passed to the routine.
			C :
				Two PHO_ILLUM unions (containing all 
				illumination conditions )will be filled before 
				directly.The union is defined in pho.h .
 
			phoCorrect accepts four different representations 
			of the measured illumination conditions and target
			ones independently : 
				a) cosine of the angles of incidence, 
				   emission, and phase;
				b) cosine of the angles of incidence, 
				   and emission in relation to the local 
				   ellipsoid normal and to the local 
				   surface narmal, and cosine of phase;
				c) directions of incidence(directed to 
				   the planet), emission(directed away 
				   from the planet) and of ellipsoid 
				   normal(directed away from the 
				   planet);
				d) directions of incidence(directed to 
				   the planet), emission(directed away 
				   from the planet) and of ellipsoid 
				   normal(directed away from the planet) 
				   and of surface normal (directed back 
				   from the planet) 

			To do a kind of atmospheric correction together 
			with the photometric correction :
			You have to select for the Parameter 
			PHO_FUNC the keyword ATMO_CORR_REGNER. 
			Then the routine computes the bidirectional 
			reflectance of the Regner-1990 approximation for the 
			measured illumination condition and the 
			bidirectional reflectance of the 
			Hapke-1968-1Therm-Henyey-Greenstein 
			approximation for the target illumination 
			condition and divide these.

			For the supported functions of the  
			bidirectional reflectance (additional to the 
			ATMO_CORR_REGNER) see the help of the
			pho-routine phoBidiRef.

===========================================================================

Requirements and Dependencies:

Libraries and subroutines
required to run routine:	VICAR RTL, phoInit, phoSetFunc, 
				phoGetFunc, phoGetKeys, phoSetVal, 
				phoGetVal, phoBidiRef 

Necessary include files
for calling routine 
or program:			pho.h (for C routines )
				PHO.FIN (for FORTRAN routines )

Other requirements: 		need to run routine phoInit, phoSetFunc, 
				phoSetVal (or other higher-level 
				subroutine calling phoSetFunc and 
				phoSetVal) first and to fill both PHO_ILLUM 
				unions for (in C-programs) or both illuArrays 
				(in FORTRAN programs) the first.

Main programs from which
subroutine will be called:	general application software and 
				higher-level subroutines;
				hwphoco.

===========================================================================

Interfaces: Input / Output Parameters:

Calling Sequence:		

calling from C :	include "pho.h"
			PHO PHO_DATA;
			PHO_ILLUM Millum, Tillum;
			int status;
			double phoCoVal;
			...
			status = phoCorrect( PHO_DATA, &Millum, &Tillum,
			&phoCorVal );

calling from FORTRAN :	INCLUDE 'pho'
			INTEGER MillMode, MSunShadow, MViewShadow, 
			DOUBLE PRECISION MilluArray(*) 
			INTEGER TillMode, TSunShadow, TViewShadow,
			DOUBLE PRECISION TilluArray(*) 
			DOUBLE PRECISION phoCorVal
			INTEGER PHO_DATA status
				...
			call pho_correct( PHO_DATA, 
		+	MillMode, MSunShadow, MViewShadow,MilluArray, 
		+	TillMode, TSunShadow, TViewShadow,TilluArray, 
		+	phoCorVal, status )

Necessary include files
from calling routine 
or program:		pho.h (for C routines )
			PHO.FIN ( for FORTRAN routines )


Parameters:
	
Name		Type	In/Out	Description
	

PHO_DATA	PHO	Input	Address of the photometric data object

MillMode	 int	Input	The illMode parameter indicates how 
TillMode	 int	Input	illumination is entered in the routine for the 
				measured(MillMode) and for the target(TillMode).
				phoCorrect accepts four different 
				representations of the measured and 
				independently target illumination conditions : 
					illEllCos --> case a);
					illDTMCos --> case b);
					illEllDir --> case c);
					illDTMDir --> case d)


MSunShadow	 int	Input	The parameter indicates if the point is in the 
				"Sun Shadow"(for measured illumination )

TSunShadow	 int	Input	The parameter indicates if the point is 
				in the "Sun Shadow"(for target illumination )

MViewShadow  int	Input	The parameter indicates if the point is in the 
				"View Shadow"(for measured emission direction )

TViewShadow  int	Input	The parameter indicates if the point is in the 
				"View Shadow"(for target emission direction )

MilluArray   double	Input	These arrays contain the measured and 
TilluArray   double	Input	target illumination and viewing geometry
				respectively.  The contence belongs to 
				the *illMode :

				illEllCos --> case a :

				DOUBLE PRECISION MilluArray(3) 
				DOUBLE PRECISION TilluArray(3)
				MilluArray(1)=cos(incidenceAngle) 
				MilluArray(2)=cos(emissionAngle) 
				MilluArray(3)=cos(phaseAngle) 
				analogous for TilluArray

				illDTMCos --> case b :

				DOUBLE PRECISION MilluArray(5) 
				DOUBLE PRECISION MilluArray(5)
				MilluArray(1)=cos(incidenceAngle2Ellips) 
				MilluArray(2)=cos(emissionAngle2Ellips) 
				MilluArray(3)=cos(phaseAngle) 
				MilluArray(4)=cos(incidenceAngle2Surf) 
				MilluArray(5)=cos(emissionAngle2Surface)
				analogous for TilluArray

				illEllDir --> case c :

				DOUBLE PRECISION MilluArray(9) 
				DOUBLE PRECISION MilluArray(9)
				MilluArray(1)=incidenceDirection(1) 
				MilluArray(2)=incidenceDirection(2) 
				MilluArray(3)=incidenceDirection(3) 
				MilluArray(4)=emissionDirection(1) 
				MilluArray(5)=emissionDirection(2) 
				MilluArray(6)=emissionDirection(2) 
				MilluArray(7)=EllipsNormalDirection(1) 
				MilluArray(8)=EllipsNormalDirection(2) 
				MilluArray(9)=EllipsNormalDirection(3) 
				analogous for TilluArray

				illDTMDir --> case d :

				DOUBLE PRECISION MilluArray(12) 
				DOUBLE PRECISION MilluArray(12)
				MilluArray(1)=incidenceDirection(1) 
				MilluArray(2)=incidenceDirection(2) 
				MilluArray(3)=incidenceDirection(3) 
				MilluArray(4)=emissionDirection(1) 
				MilluArray(5)=emissionDirection(2) 
				MilluArray(6)=emissionDirection(2) 
				MilluArray(7)=EllipsNormalDirection(1) 
				MilluArray(8)=EllipsNormalDirection(2) 
				MilluArray(9)=EllipsNormalDirection(3) 
				MilluArray(10)=SurfNormalDirection(1) 
				MilluArray(11)=SurfNormalDirection(2) 
				MilluArray(12)=SurfNormalDirection(3) 
				analogous for TilluArray


Millum	 PHO_ILLUM	Input	These unions contain the measured and 
Tillum	 PHO_ILLUM	Input	target illumination and viewing geometry
				respectively :
						
				For all representations of the illumination 
				geometry one of the makro illShadow or 
				illNoShadow is to be filled in the union:

				Millum.type.sunshadow=...
				Millum.type.viewshadow=...
				analogous for Tillum

				In relation to the case of the 
				representation of the illumination geometry :

				illEllCos --> case a) .
				...
				double incidAngle2Ellips;
				double emAngle2Ellips;
				double phaseAngle;,
				...
				Millum.mode=illEllCos;
				Millum.cos.inc=cos(incidAngle2Ellips);
				Millum.cos.em=cos(emAngle2Ellips);
				Millum.cos.phas=cos(phaseAngle);
				analogous for Tillum

				illDTMCos --> case b) :
				...
				double inciAngle2Ellips;
				double emAngle2Ellips;
				double inciAngle2Surf;
				double emAngle2Surf;
				double phaseAngle;
				...
				Millum.mode=illDTMCos;
				Millum.cos.inc=cos(inciAngle2Ellips);
				Millum.cos.em=cos(emAngle2Ellips);
				Millum.cos.phas=cos(phaseAngle);
				Millum.cos.inc_surf=cos(inciAngle2Surf);
				Millum.cos.em_surf=cos(emAngle2Surf);
				analogous for Tillum

				illEllDir --> case c) .
				....
				double incidDir(3);
				double emDir(3);
				double ellDir(3);
				....
				Millum.mode=illEllDir;
				memcpy(&(Millum.direction.inc), 
				incidDir, 3*sizeof(double));
				memcpy(&(Millum.direction.em), 
				emDir, 3*sizeof(double));
				memcpy(&(Millum.direction.ellips), 
				ellDir, 3*sizeof(double));
				analogous for Tillum

				illDTMDir --> case d) .
				...
				double incidDir(3);
				double emDir(3);
				double ellDir(3);
				double surfDir(3);
				...
				Millum.mode=illDTMDir;
				memcpy(&(Millum.direction.inc), 
				incidDir, 3*sizeof(double));
				memcpy(&(Millum.direction.em), 
				emDir, 3*sizeof(double));
				memcpy(&(Millum.direction.ellips), 
				ellDir, 3*sizeof(double));
				memcpy(&(Millum.direction.surf), 
				surfDir, 3*sizeof(double));
				analogous for Tillum

phoCorVal	double	Output	Photometric correction value 

status		int	Output	Error status:
				phoSUCCESS - success
				phoFAILURE - failed
				phoFUNC_NOT_SET - failed : 
					photometric function not set in the PHO
				phoKEYWD_NOT_SET - failed :
					one of the required parameter values has
					not been set in the PHO
				phoINVALID_KEYWD - failed :
					one of the parameter keywords is invalid
				phoINVALID_ILL_MODE - failed :
					invalid illMode
				phoARGUMENT_OUT_OF_RANGE-failed:
					one of the arguments is out of the valid
					range

===========================================================================

Background and References:

===========================================================================

Other Information:

Software Platforms:		VICAR 13 / TAE 5.2

Hardware Platforms:		No particular hardware required;
				tested on (SUN_OS,SUN_SOLARIS,VAX,AXP)

Programming Language:		ANSI-C, 
				ANSI-FORTRAN bridge

Specification by:		Friedel Oschuetz, DLR

Date of specification:		Jul '94

Cognizant Programmer:		Friedel Oschuetz
				Institute of Planetary Exploration
				DLR
				12484 Berlin (FRG)

History:			Jan '94, L. Kamp, JPL, initial version
				Jul '94, F. Oschuetz, preliminary version

===========================================================================

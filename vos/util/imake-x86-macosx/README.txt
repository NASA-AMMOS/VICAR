This is a modification of version 1.0.4 of imake.  All the configure cruft
has been stripped out, leaving a very simple make process.  More precisely,
what remains is the result of running configure on the mac.  It exists
because imake is not by default available on the mac.

-Bob Deen 2013-05-16


Update rgd 2013-06-19:

The standard build uses cpp which does not behave well with imake.
The imake templates need to allow # at the beginning of a line.  In order
to pass this through, an empty comment /**/ is put in front of the #.  For
example:

/**/ # This makefile is automatically generated by imake.  If you need to change

The mac cpp deletes the comment and then tries to interpret the #, which is
bad.  So I switched it to using gcc -E -traditional instead.  This seems to
work.  This is accomplished by:

edit imakemdep.h, look for DEFAULT_CC.  This is "Step 4" according to the
comments.  The first section has:

#   if defined(__APPLE__)
...
#   endif

change it to:

#   if defined(__APPLE__)
#    define USE_CC_E
#    define DEFAULT_CC "gcc"
#   endif

I could not see how to get this change through the vile configure mechanism,
so I had to edit it directly.  I did this on a fresh 1.0.5, found it worked,
then simply imported the change to this existing (already stripped down) 1.0.4
version.


Update rgd 2014-05-21;

The mac cpp is eating tabs.  So we need to turn on FIXUP_CPP_WHITESPACE.

In imakemdep.h...

Look for this section (around line 231):

/*
 * Step 3:  FIXUP_CPP_WHITESPACE
 *     If your cpp collapses tabs in macro expansions into a single space and
 *     replaces escaped newlines with a space, define this symbol.  This will
 *     cause imake to attempt to patch up the generated Makefile by looking
 *     for lines that have colons in them (this is why the rules file escapes
 *     all colons).  One way to tell if you need this is to see whether or not
 *     your Makefiles have no tabs in them and lots of @@ strings.
 */
#  if defined(sun) || defined(SYSV) || defined(SVR4) || defined(hcx) || defined(WIN32) || defined(__SCO__) || (defined(AMOEBA) && defined(CROSS_COMPILE)) || defined(__QNX__) || defined(__sgi) || defined(__UNIXOS2__) || defined(__UNIXWARE__)
#   define FIXUP_CPP_WHITESPACE
#  endif


Add:
	|| defined(__APPLE__)
to the end of the "if" line.


Update rgd 2014-05-22:

This is truly ugly.

The mac (at least current versions, e.g. 10.7.3, unknown when this started)
does not support token pasting.  Period.  With -traditional, it ignores ##
token pasting, and puts a space in for /**/ .  Meaning there is no way to
implement it.  And without -traditional, it chokes on # being used for
comments (saying unknown preprocessor directive, even when protected).  So,
we implement our own token pasting in imake.c, by looking for ## (no spaces)
and eliminating them.  We also turn on -DIMAKE_TOKEN_PASTING_HACK (in imake.c)
so imake files know whether to use ## or the empty comment.

Changes were made to both imakemdep.h, and imake.c.  For imakemdep.h, the
following was added just before the "Step 4":


/* Step 3a.  Added rgd 2014-05-22.
 * The mac does not support token pasting.  Period.  With -traditional, it
 * ignores # # token pasting, and puts a space in for / * * / .  Meaning there
 * is no way to implement it.  And without -traditional, it chokes on # being
 * used for comments (saying unknown preprocessor directive, even when
 * protected).  So, we implement our own token pasting in imake.c, by looking
 * for # # (no spaces) and eliminating them.  We also turn on
 * -DIMAKE_TOKEN_PASTING_HACK (in imake.c) so imake files know whether to
 * use # # or the empty comment.
 * Ugly ugly ugly ugly ugly.
 */

#if defined(__APPLE__)
#define IMAKE_TOKEN_PASTING_HACK
#endif


In imake.c, the following was added near the end of init() (just before
the signal() call):

#ifdef IMAKE_TOKEN_PASTING_HACK
        AddCppArg("-DIMAKE_TOKEN_PASTING_HACK");
#endif

Then the following was added to CleanCppOutput(), after the first } else {
(before blankline = 0;  ):

#ifdef IMAKE_TOKEN_PASTING_HACK
/* This total ugliness replaces ## with nothing, to implement token pasting */
                        char *p = input;
                        while (*p != '\0') {
                            if (*p == '#' && *(p+1) == '#') {
                                char *pp = p+2;
                                char *ppp = p;
                                while (*pp != '\0') {
                                    *ppp++ = *pp++;
                                }
                                *ppp = '\0';
                            }
                            p++;
                        }
#endif



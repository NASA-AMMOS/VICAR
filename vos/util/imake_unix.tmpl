/************************************************************************/
/* IMAKE template for VICAR applications				*/
/* Unix version								*/
/* Written by: Bob Deen, July 1991					*/
/*									*/
/* *ALL* VICAR applications should use IMAKE and this template to	*/
/* create a build file.  Under VMS, a DCL COM file is created that	*/
/* builds the program.  Under Unix, a Makefile is created.  Both come	*/
/* from the exact same Imake source file.				*/
/*									*/
/* This file contains *NO* platform-specific information.  All tests	*/
/* based on platform type are in the companion file imake.config (which	*/
/* this includes).							*/
/************************************************************************/

/* Include a warning comment in the generated makefile */

/**/ #***********************************************************************
/**/ #
/**/ # This makefile is automatically generated by imake.  If you need to change
/**/ # the makefile, edit the .imake file and re-run imake, or contact the VICAR
/**/ # system programmer to change the imake templates.
/**/ #
/**/ # *** DO NOT EDIT THIS FILE!! ***
/**/ #
/**/ #***********************************************************************

/* Include the project-specific rules */

/* #include "Imake.rules" */		/* Not needed for this imake template */

/* Include the RTL's xvmaininc.h, in case the imake file needs to do	*/
/* different things based on the machine type.				*/

#include "xvmaininc.h"

/* Include the local Imakefile */

#include INCLUDE_IMAKEFILE

#ifndef MODULE_LIST			/* Just in case */
#ifdef PROCEDURE			/* backwards compatibility */
#define MODULE_LIST PROCEDURE.pdf
#define USES_PDF
#else
#define NO_MODULE_LIST
#define MODULE_LIST
#endif
#endif
#ifndef MODULE_LIST2
#define MODULE_LIST2
#endif
#ifndef MODULE_LIST3
#define MODULE_LIST3
#endif
#ifndef MODULE_LIST4
#define MODULE_LIST4
#endif

#ifndef LOCAL_LIBRARY
#define LOCAL_LIBRARY sublib.a
#endif

#if defined(SHARED_LIBRARY)
#define USES_C_PLUS_PLUS
#endif

#if defined(USES_C) || defined(USES_ANSI_C)
#define USES_ANY_C
#endif

/************************************************************************/
/* Get the unit's name (i.e. name of program, procedure, or major sub)	*/
/************************************************************************/

/**/ #
#ifdef PROGRAM
UNIT_NAME = PROGRAM
/**/ # VICAR program PROGRAM
#endif
#ifdef SUBROUTINE
UNIT_NAME = SUBROUTINE
/**/ # VICAR subroutine SUBROUTINE
#endif
#ifdef PROCEDURE
UNIT_NAME = PROCEDURE
/**/ # VICAR procedure PROCEDURE
#endif
/**/ #
/**/ #***********************************************************************



/* All TAO services use TAO, so define LIB_TAO if LIB_TAO_* is defined. */

#if defined(LIB_TAO_COS_NAMING) || \
    defined(LIB_TAO_COS_NOTIFICATION) || \
    defined(LIB_TAO_PORTABLE_SERVER)
#define LIB_TAO
#endif

/* TAO depends on ACE, so define ACE if TAO is defined. */

#ifdef LIB_TAO
#define LIB_ACE_WRAPPERS
#endif



/************************************************************************/
/* Include the configuration file that sets up differences between make's */
/************************************************************************/

#include "imake.config"

/************************************************************************/
/* Define macros based on preprocessor #define's			*/
/************************************************************************/

/* Options */

#ifdef PROGRAM
#ifdef SHARED_LIBRARY
#define ShareLink SharedLinkOpts
#else
#define ShareLink
#endif
#ifdef DEBUG
LDFLAGS = LinkDebugFlags ShareLink
#else
#if defined(PROFILE)
LDFLAGS = LinkProfileFlags ShareLink
#else
#if defined(V2_COVERAGE)
LDFLAGS = LinkCoverageFlags ShareLink
#else
LDFLAGS = LinkDefaultFlags ShareLink
#endif
#endif
#endif
#endif

#if defined(PROGRAM) || defined(SUBROUTINE)

#ifdef SHARED_LIBRARY		/* They're the same for all compilers(!) */
#define ShareComp SharedCompileOpts
#else
#define ShareComp
#endif

#ifdef DEBUG
#ifdef USES_ANY_C
CFLAGS = CDebugFlags ShareComp
#endif
#ifdef USES_C_PLUS_PLUS
CCCFLAGS = CCCDebugFlags ShareComp
#endif
#ifdef USES_FORTRAN
FFLAGS = F77DebugFlags ShareComp
#endif
#else /* not DEBUG */
#if defined(PROFILE)
#ifdef USES_ANY_C
CFLAGS = CProfileFlags ShareComp
#endif
#ifdef USES_C_PLUS_PLUS
CCCFLAGS = CCCProfileFlags ShareComp
#endif
#ifdef USES_FORTRAN
FFLAGS = F77ProfileFlags ShareComp
#endif
#else /* not PROFILE */
#if defined(V2_COVERAGE)
#ifdef USES_ANY_C
CFLAGS = CCoverageFlags ShareComp
#endif
#ifdef USES_C_PLUS_PLUS
CCCFLAGS = CCCCoverageFlags ShareComp
#endif
#ifdef USES_FORTRAN
FFLAGS = F77DefaultFlags ShareComp
#endif
#else /* not V2_COVERAGE */
#ifdef USES_ANY_C
CFLAGS = CDefaultFlags ShareComp
#endif
#ifdef USES_C_PLUS_PLUS
CCCFLAGS = CCCDefaultFlags ShareComp
#endif
#ifdef USES_FORTRAN
FFLAGS = F77DefaultFlags ShareComp
#endif
#endif /* V2_COVERAGE */
#endif /* PROFILE */
#endif /* DEBUG */

#if defined(USES_ANY_C) || defined(USES_C_PLUS_PLUS)

/* Figure out which include directories to use */

#if defined(LOCAL_INCLUDE)
#define INC_LOCAL LOCAL_INCLUDE
#else
#define INC_LOCAL
#endif

#if defined(LIB_GUISUB)||defined(LIB_GUISUB_DEBUG)||defined(GUILIB)||defined(GUI_SUBLIB)
#define INC_GUISUB -I$(GUIINC)/gui
#else
#define INC_GUISUB
#endif

#if defined(LIB_UPLINKSUB)||defined(UPLINKLIB)||defined(UPLINK_SUBLIB)
#define INC_UPLINKSUB -I$(UPLINKINC)
#else
#define INC_UPLINKSUB
#endif

#if defined(LIB_UPLINKTOURSUB)||defined(UPLINKTOURLIB)||defined(UPLINKTOUR_SUBLIB)
#define INC_UPLINKTOURSUB -I$(UPLINKTOURINC)
#else
#define INC_UPLINKTOURSUB
#endif

#if defined(LIB_SSVSUB)||defined(SSVLIB)||defined(SSV_SUBLIB)
#define INC_SSVSUB -I$(SSVINC)
#else
#define INC_SSVSUB
#endif

#if defined(LIB_NEATSUB)||defined(NEATLIB)||defined(NEAT_SUBLIB)
#define INC_NEATSUB -I$(NEATINC)
#else
#define INC_NEATSUB
#endif

#if defined(LIB_DIVSUB)||defined(DIVLIB)||defined(DIV_SUBLIB)
#define INC_DIVSUB -I$(DIVINC)
#else
#define INC_DIVSUB
#endif

#if defined(LIB_P3SUB)||defined(LIB_P3SUB_DEBUG)||defined(R3LIB)||defined(P3_SUBLIB)
#define USES_P3
#define INC_P3SUB -I$(P3INC)
#else
#define INC_P3SUB
#endif

#if defined(LIB_P2SUB)||defined(LIB_P2SUB_DEBUG)||defined(R2LIB)||defined(P2_SUBLIB)||defined(USES_P3)
#define USES_P2
#define INC_P2SUB -I$(P2INC) -I$(P2GENINC)
#else
#define INC_P2SUB
#endif

#if defined(LIB_MROSUB)||defined(MROLIB)||defined(MRO_SUBLIB)
#define INC_MROSUB -I$(MROINC)
#else
#define INC_MROSUB
#endif


#if defined(LIB_GLLSUB)||defined(GLLLIB)||defined(GLL_SUBLIB)
#define INC_GLLSUB -I$(GLLINC)
#else
#define INC_GLLSUB
#endif

#if defined(LIB_CASSUB)||defined(CASLIB)||defined(CAS_SUBLIB)
#define INC_CASSUB -I$(CASINC)
#else
#define INC_CASSUB
#endif

#if defined(LIB_P1SUB)||defined(LIB_P1SUB_DEBUG)||defined(R1LIB)||defined(P1_SUBLIB)||defined(USES_P2)
#define INC_P1SUB -I$(P1INC)
#else
#define INC_P1SUB
#endif

/* Automatically turn on LIB_EXCLUDE_MER_IDD if MSL_FSW is on */
#if defined(LIB_MSL_FSW)
#define INC_MSLFSW -I$(MSLFSWLIB)/src -DTGT_LINUX_SSIM
#define LIB_EXCLUDE_MER_IDD
#else
#define INC_MSLFSW
#endif

/* Automatically turn on LIB_EXCLUDE_MER_IDD if M20_SSIM is on */
#if defined(LIB_M20_SSIM)
#define INC_M20SSIM -I$(M20SSIMLIB)/../src/ssim/core/ -I$(M20SSIMLIB)/../src/ssim/core/m20fsw/src -DTGT_LINUX_SSIM
#define LIB_EXCLUDE_MER_IDD
#else
#define INC_M20SSIM
#endif

/* Note: turning on MARS automatically turns on MER_IDD now...		*/
/* unless LIB_EXCLUDE_MER_IDD is turned on.  Using LIB_EXCLUDE_MER_IDD	*/
/* is likely to lead to link errors unless you stub out the necessary	*/
/* routines.  See mslreach.com.						*/

#if defined(LIB_MARSSUB)||defined(LIB_MARSSUB_DEBUG)||defined(MARSLIB)||defined(MARS_SUBLIB)
#ifndef LIB_EXCLUDE_MER_IDD
#define IDD_inc_auto
#endif
#define INC_MARSSUB -I$(MARSINC)
#else
#define INC_MARSSUB
#endif

#if defined(LIB_MER_IDD) || defined(IDD_inc_auto)
#define INC_MERIDD -I$(MERIDDLIB) -I$(MERIDDLIB)/merfsw_stubs -I$(MERIDDLIB)/idd
#else
#define INC_MERIDD
#endif

#if defined(LIB_JNI_GEN)
#define INC_JNI -I$(V2HTML)/inc
#else
#define INC_JNI
#endif

/* Note:  there is currently no link library for LIB_JAVA... */
/* This is used for native code called BY java. */
#if defined(LIB_JAVA)
#define INC_JAVA -I$(V2JAVA_SYS_INC) -I$(V2JAVA_SYS_PLAT_INC)
#else
#define INC_JAVA
#endif

#if defined(LIB_VRDI)||defined(LIB_VRDI_NOSHR)||defined(LIB_VRDI_DEBUG)
#define INC_VRDI -I$(VRDIINC)
#else
#define INC_VRDI
#endif

#if defined(LIB_CAS_ISS_LOSSY)||defined(LIB_CAS_ISS_LOSSY_DEBUG)
#define INC_CILY -I$(CASSISS)/inc
#else
#define INC_CILY
#endif

#if defined(LIB_CSPICE)
#define INC_CSPICE -I$(SPICEROOT)/c/$(VICCPU)/include
#else
#define INC_CSPICE
#endif

#if defined(LIB_TAE) || defined(LIB_TAE_NOSHR)
#if TAE_VERSION == 4 || TAE_VERSION == -1
#define INC_TAE -I$(TINC)
#else
#define INC_TAE -I$(TAEINC)
#endif
#else
#define INC_TAE
#endif

#if defined(LIB_MDMS_FEI)
#define INC_FEI -I$(MDMSINC)/feiinc
#else
#define INC_FEI
#endif

#if defined(LIB_MDMS) || defined(LIB_MDMS_FEI_3) || defined(LIB_MDMS_FEI_3_MISC) || defined(FEI3_MISC_SUBLIB) || defined(LIB_MDMS_DBI) || defined(MDMS_DBI_SUBLIS)
/* ADDED FOR RHE7 BUILD */
#define LIB_MDMS
#define INC_MDMS -I$(MDMSINC)/glbinc -I$(MDMSINC)
#else
#define INC_MDMS
#endif

#if defined(LIB_SYBASE) || defined(LIB_SYBASE_NOSHR)
#define INC_SYBASE -I$(SYBASE)/$(SYBASE_OCS)/include SYBASE_OPT
#else
#define INC_SYBASE
#endif

#if defined(LIB_ACE_WRAPPERS)
/* #define INC_ACEW -I$(ACE_ROOT)/ */
/* Added for RHE7 BUILD */
#define INC_ACEW -I$(ACE_TAO_INSTALL_PREFIX)/include
/* #define INC_ACEW -I$(ACE_ROOT)/ */
#else
#define INC_ACEW
#endif

#if defined(LIB_TAO)
/* #define INC_TAO -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs */
/* Added for RHE7 BUILD */
#define INC_TAO -I$(ACE_TAO_INSTALL_PREFIX)/include
/* #define INC_TAO -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs */
#else
#define INC_TAO
#endif

#if defined(LIB_XERCES)
#define INC_XERCES -I$(XERCES_C_ROOT)/include
#else
#define INC_XERCES
#endif

#if defined(LIB_KERBEROS5) && !defined(LIB_KERBEROS)
#define LIB_KERBEROS
#endif

#if defined (LIB_KERBEROS)
#define INC_KRB -I$(KERBEROSINC)
#else
#define INC_KRB
#endif

#if defined(LIB_KERBEROS4)
#define INC_KRB4 -I$(KERBEROS4INC) KERBcomp
#else
#define INC_KRB4
#endif

#if defined(LIB_PDS_LABEL)
#define INC_PDSL -I$(PDS_LABEL_LIB)
#else
#define INC_PDSL
#endif

#if defined(LIB_PDS)
#define INC_PDS -I$(PDS_LIBRARY)/src/lablib3 -I$(PDS_LIBRARY)/src/oal
#else
#define INC_PDS
#endif

#if defined(LIB_ISIS)
#define INC_ISIS -I$(ISISINC)
#else
#define INC_ISIS
#endif

#if defined(LIB_HDF)
#define INC_HDF -I$(HDFLIB)/include -I$(HDFEOSLIB)/include
#else
#define INC_HDF
#endif

#if defined(LIB_GEOTRANS)
#define INC_GEOTRANS -I$(GEOTRANSLIB)
#else
#define INC_GEOTRANS
#endif

#if defined(LIB_NATGRID)
#define INC_NATGRID -I$(NATGRID_INCL)
#else
#define INC_NATGRID
#endif

#if defined(LIB_TIFF)
#define INC_TIFF -I$(TIFFLIB)/include -DBSDTYPES -DZIP_SUPPORT
#else
#define INC_TIFF
#endif

#if defined(LIB_JPEG)
#define INC_JPEG -I$(JPEGLIB)/include
#else
#define INC_JPEG
#endif

#if defined(LIB_PNG)
#define INC_PNG -I/usr/include 
#else
#define INC_PNG 
#endif

#if defined(LIB_FFTW)
#define INC_FFTW -I$(FFTWLIB)/include
#else
#define INC_FFTW
#endif

#if defined(LIB_GDAL)
#define INC_GDAL -I$(GDALLIB)/include
#else
#define INC_GDAL
#endif

#if defined(LIB_GSL)
#define INC_GSL -I$(GSLLIB)/include
#else
#define INC_GSL
#endif

#if defined(LIB_SIMBAD)
#define INC_SIMBAD -I$(SIMBADLIB)
#else
#define INC_SIMBAD
#endif

#if defined(LIB_EMBREE)
#define INC_EMBREE -I$(EMBREE_LIB)/include/embree3
#else
#define INC_EMBREE
#endif

#if defined(LIB_TINYOBJLOADER)
#define INC_TINYOBJLOADER -I$(TINYOBJLOADER_LIB)
#else
#define INC_TINYOBJLOADER
#endif

#if defined(LIB_PGPLOT)
#define INC_PGPLOT -I$(PGPLOTLIB)
#else
#define INC_PGPLOT
#endif

#if defined(LIB_SIFT)
#define INC_SIFT -I$(SIFT_LIB)
#else
#define INC_SIFT
#endif

#if defined(LIB_CRUMBS)
#define INC_CRUMBS -I$(CRUMBS_INC) -I$(CRUMBS_LIT_INC)
#else
#define INC_CRUMBS
#endif

#if defined(LIB_CERES)
#define LIB_EIGEN
#define LIB_GLOG
#define INC_CERES -I$(CERES_LIB)/include
#else
#define INC_CERES
#endif

#if defined(LIB_EIGEN)
#define INC_EIGEN -I$(EIGEN_LIB)
#else
#define INC_EIGEN
#endif

/*!!!! GLOG doesn't build on solaris, should use mini-glog instead.	*/
/*!!!! Which means defining symbols in imake.config (because we	can't	*/
/*!!!! put platform-specific stuff in here) and then using it in the	*/
/*!!!! below definitions and in the link part too.			*/
#if defined(LIB_GLOG)
#define INC_GLOG -I$(GLOG_LIB)/include
#else
#define INC_GLOG
#endif

#if defined(LIB_MYSQL)
#define INC_MYSQL -I$(MYSQLINC)
#else
#define INC_MYSQL 
#endif

#if defined(LIB_MYSQLCONCPP)
#define INC_MYSQLCONCPP -I${MYSQLCONCPP_LIB}/include
#else
#define INC_MYSQLCONCPP
#endif

#if defined(LIB_PVM)
#define INC_PVM -I$(PVM_INCL)
#else
#define INC_PVM
#endif

#if defined(LIB_MPI)
#define INC_MPI MPIdefs
#else
#define INC_MPI
#endif

#if defined(LIB_MOTIFAPP)
#define INC_MA -I$(MOTIFAPPINC)
#else
#define INC_MA
#endif

#if defined(LIB_MOTIF) || defined(LIB_XMU) || defined(LIB_XPM) || defined(LIB_XEXT)
#define INC_MOTIF Xinc
#else
#define INC_MOTIF
#endif

#if defined(LIB_XRT_GRAPH) || defined(LIB_XRT_3D)
#define INC_XRT XRTinc
#else
#define INC_XRT
#endif

#if defined(LIB_CANDELA)
#define INC_CANDELA -I$(CANDELAHOME)
#else
#define INC_CANDELA
#endif

#if defined(LIB_TCL_TK)
#define INC_TK -I$(TCLINC)
#else
#define INC_TK
#endif

#if defined(LIB_ROGUEWAVE)
#define INC_RW -I$(ROGUEINC)
#else
#define INC_RW
#endif

#if defined(LIB_SIRTF_PHE)
#define INC_SIRTF -I$(SIRTF_PHE_LIB)/$(VICCPU)/phe
#else
#define INC_SIRTF
#endif

#if defined(LIB_EXPAT)
#define INC_EXPAT EXPATinc
#else
#define INC_EXPAT
#endif

#if defined(LIB_CPPUNIT)
#define INC_CPPUNIT -I$(CPPUNIT_ROOT)/include
#else
#define INC_CPPUNIT
#endif

#if defined(LIB_BOOST)
#define INC_BOOST -I$(BOOST_ROOT)/include/boost -I$(BOOST_ROOT)/include
#else
#define INC_BOOST
#endif

#if defined(LIB_TINYOBJLOADER)
#define INC_TINYOBJLOADER -I$(TINYOBJLOADER_LIB)
#else
#define INC_TINYOBJLOADER
#endif

CPPFLAGS = INC_LOCAL -I$(V2INC) INC_TAE INC_VRDI INC_CILY INC_GUISUB INC_P1SUB INC_UPLINKSUB INC_UPLINKTOURSUB INC_SSVSUB INC_NEATSUB INC_P2SUB INC_CRUMBS INC_GLLSUB INC_CASSUB INC_P3SUB INC_MARSSUB INC_MROSUB INC_DIVSUB INC_MERIDD INC_MSLFSW INC_M20SSIM INC_JNI INC_JAVA INC_FEI INC_MDMS INC_KRB INC_KRB4 INC_SYBASE INC_MYSQL INC_ACEW INC_TAO INC_XERCES INC_CSPICE INC_PDSL INC_PDS INC_ISIS INC_HDF INC_GEOTRANS INC_NATGRID INC_TIFF INC_JPEG INC_FFTW INC_GDAL INC_GSL INC_SIMBAD INC_PGPLOT INC_EIGEN INC_GLOG INC_SIFT INC_CERES INC_PVM INC_MPI INC_TK INC_MA INC_MOTIF INC_XRT INC_CANDELA INC_RW INC_SIRTF INC_EXPAT INC_CPPUNIT INC_MYSQLCONCPP INC_BOOST INC_TINYOBJLOADER INC_EMBREE INC_PNG

#endif

#endif		/* PROGRAM || SUBROUTINE */

/* OBJS */

#ifdef PROGRAM
#if !defined(LINK_LIST) && defined(NO_MODULE_LIST)
#define NO_OBJS
#endif
#ifndef LINK_LIST
#ifdef USES_ANY_C
#define c o
#endif
#ifdef USES_C_PLUS_PLUS
#define cc o
#endif
#ifdef USES_FORTRAN
#define f o
#endif
#ifdef USES_EXTRACT
#define EXTRACT(x,lib) x
#define EXTRACT_TAE(x,lib) x
#endif
#define LINK_LIST MODULE_LIST
#define LINK_LIST2 MODULE_LIST2
#define LINK_LIST3 MODULE_LIST3
#define LINK_LIST4 MODULE_LIST4
#else
#ifndef LINK_LIST2
#define LINK_LIST2
#endif
#ifndef LINK_LIST3
#define LINK_LIST3
#endif
#ifndef LINK_LIST4
#define LINK_LIST4
#endif
#endif
OBJS = LINK_LIST LINK_LIST2 LINK_LIST3 LINK_LIST4
#undef c
#undef cc
#undef f
#undef EXTRACT
#undef EXTRACT_TAE
#endif /* #ifdef PROGRAM */

#ifdef SUBROUTINE
#if !defined(LIB_LIST) && defined(NO_MODULE_LIST)
#define NO_OBJS
#endif
#ifndef LIB_LIST
#ifdef USES_ANY_C
#define c o
#endif
#ifdef USES_C_PLUS_PLUS
#define cc o
#endif
#ifdef USES_FORTRAN
#define f o
#endif
#ifdef USES_EXTRACT
#define EXTRACT(x,lib) x
#define EXTRACT_TAE(x,lib) x
#endif
#ifdef USES_TAO_IDL
/* For TAO/IDL, we need to generate two lists because the input	.idl	*/
/* file expands into 9 files, two of which must be compiled.  We must	*/
/* also define a separate target to force the IDL compile.		*/
#define IDL_generated
#define idl idlgen
IDL_OBJS_TARGET = MODULE_LIST MODULE_LIST2 MODULE_LIST3 MODULE_LIST4
#undef idl
#define idl S.o
IDL_S_OBJS = MODULE_LIST MODULE_LIST2 MODULE_LIST3 MODULE_LIST4
#undef idl
#define idl C.o
#endif
#define LIB_LIST MODULE_LIST
#define LIB_LIST2 MODULE_LIST2
#define LIB_LIST3 MODULE_LIST3
#define LIB_LIST4 MODULE_LIST4
#else
#ifndef LIB_LIST2
#define LIB_LIST2
#endif
#ifndef LIB_LIST3
#define LIB_LIST3
#endif
#ifndef LIB_LIST4
#define LIB_LIST4
#endif
#endif
#ifdef IDL_generated
OBJS = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4 $(IDL_S_OBJS)
#else
OBJS = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4
#endif
#undef c
#undef cc
#undef f
#undef EXTRACT
#undef EXTRACT_TAE
#undef idl
#endif /* #ifdef SUBROUTINE */

/* SCRIPT_LIST should not be set by the user since VMS ignores it */

#ifdef PROCEDURE
#if !defined(SCRIPT_LIST) && defined(NO_MODULE_LIST)
#define NO_OBJS
#endif
#ifndef SCRIPT_LIST
#ifdef USES_PDF
#define pdf script
#endif
#ifdef USES_SH
#define sh script
#endif
#ifdef USES_CSH
#define csh script
#endif
#ifdef USES_KSH
#define ksh script
#endif
#ifdef USES_BASH
#define bash script
#endif
#ifdef USES_PERL
#define perl script
#define pl script
#endif
#ifdef USES_PYTHON
#define py script
#endif
#ifdef USES_TCL_TK
#define tcl script
#endif
/* USES_DCL is ignored for Unix */
#define SCRIPT_LIST MODULE_LIST
#define SCRIPT_LIST2 MODULE_LIST2
#define SCRIPT_LIST3 MODULE_LIST3
#define SCRIPT_LIST4 MODULE_LIST4
#else
#ifndef SCRIPT_LIST2
#define SCRIPT_LIST2
#endif
#ifndef SCRIPT_LIST3
#define SCRIPT_LIST3
#endif
#ifndef SCRIPT_LIST4
#define SCRIPT_LIST4
#endif
#endif
OBJS = SCRIPT_LIST SCRIPT_LIST2 SCRIPT_LIST3 SCRIPT_LIST4
#undef pdf
#undef sh
#undef csh
#undef ksh
#undef bash
#undef perl
#undef pl
#undef tcl
#undef py
#endif /* #ifdef PROCEDURE */

#ifndef INCLUDE_LIST
#define NO_INCLUDE_LIST
#define INCLUDE_LIST
#endif
#ifndef INCLUDE_LIST2
#define INCLUDE_LIST2
#endif
#ifndef INCLUDE_LIST3
#define INCLUDE_LIST3
#endif
#ifndef INCLUDE_LIST4
#define INCLUDE_LIST4
#endif

#if defined(PROGRAM) || defined(SUBROUTINE)

/* for dependencies */
INCLUDES = INCLUDE_LIST INCLUDE_LIST2 INCLUDE_LIST3 INCLUDE_LIST4

/* CLEANOBJ */

#ifndef CLEAN_OBJ_LIST
#ifdef NO_MODULE_LIST
#define NO_CLEAN_OBJ_LIST
#endif
#define CLEAN_OBJ_LIST MODULE_LIST
#define CLEAN_OBJ_LIST2 MODULE_LIST2
#define CLEAN_OBJ_LIST3 MODULE_LIST3
#define CLEAN_OBJ_LIST4 MODULE_LIST4
#else
#ifndef CLEAN_OBJ_LIST2
#define CLEAN_OBJ_LIST2
#endif
#ifndef CLEAN_OBJ_LIST3
#define CLEAN_OBJ_LIST3
#endif
#ifndef CLEAN_OBJ_LIST4
#define CLEAN_OBJ_LIST4
#endif
#endif
#ifdef USES_ANY_C
#define c o
#endif
#ifdef USES_C_PLUS_PLUS
#define cc o
#endif
#ifdef USES_FORTRAN
#define f o
#endif
#ifdef USES_EXTRACT
#define EXTRACT(x,lib) x
#define EXTRACT_TAE(x,lib) x
#endif
/* See LIB_LIST section for TAO/IDL explanation (why we need 2 lists)	*/
#ifdef USES_TAO_IDL
#define idl S.o
CLEAN_IDLS_OBJS = CLEAN_OBJ_LIST CLEAN_OBJ_LIST2 CLEAN_OBJ_LIST3 CLEAN_OBJ_LIST4
#undef idl
#define idl C.o
#endif
#ifdef IDL_generated
CLEANOBJS = CLEAN_OBJ_LIST CLEAN_OBJ_LIST2 CLEAN_OBJ_LIST3 CLEAN_OBJ_LIST4 $(CLEAN_IDLS_OBJS)
#else
CLEANOBJS = CLEAN_OBJ_LIST CLEAN_OBJ_LIST2 CLEAN_OBJ_LIST3 CLEAN_OBJ_LIST4
#endif
#undef c
#undef cc
#undef f
#undef EXTRACT
#undef EXTRACT_TAE
#undef idl
#endif /* #if defined(PROGRAM) || defined(SUBROUTINE) */

/* CLEANSRC, CLEANINC, CLEANOTHER */

#ifndef CLEAN_SRC_LIST
#ifdef NO_MODULE_LIST
#define NO_CLEAN_SRC_LIST
#endif
#if defined(PROCEDURE) && defined(USES_PDF)	/* pdf's don't get renamed */
#define pdf pdf_notcleaned
#endif
#if defined(PROCEDURE) && defined(USES_TCL_TK)	/* tcl's don't get renamed */
#define tcl tcl_notcleaned
#endif
#define CLEAN_SRC_LIST MODULE_LIST
#define CLEAN_SRC_LIST2 MODULE_LIST2
#define CLEAN_SRC_LIST3 MODULE_LIST3
#define CLEAN_SRC_LIST4 MODULE_LIST4
#else
#ifndef CLEAN_SRC_LIST2
#define CLEAN_SRC_LIST2
#endif
#ifndef CLEAN_SRC_LIST3
#define CLEAN_SRC_LIST3
#endif
#ifndef CLEAN_SRC_LIST4
#define CLEAN_SRC_LIST4
#endif
#endif
#ifdef USES_EXTRACT
#define EXTRACT(x,lib)
#define EXTRACT_TAE(x,lib)
#endif
/* TAO/IDL needs lots of generated files cleaned... */
#ifdef USES_TAO_IDL
#define idl C.cc
CLEANSRC_IDL_CC = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
#define idl C.h
CLEANSRC_IDL_CH = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
#define idl C_I.h
CLEANSRC_IDL_CI = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
#define idl S.cc
CLEANSRC_IDL_SC = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
#define idl S.h
CLEANSRC_IDL_SH = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
#define idl S_I.h
CLEANSRC_IDL_SI = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#undef idl
CLEANSRC_IDL = $(CLEANSRC_IDL_CC) $(CLEANSRC_IDL_CH) $(CLEANSRC_IDL_CI) $(CLEANSRC_IDL_SC) $(CLEANSRC_IDL_SH) $(CLEANSRC_IDL_SI)
#endif
#ifndef CLEAN_OTHER_LIST
#define NO_CLEAN_OTHER_LIST
#define CLEAN_OTHER_LIST
#endif
#ifdef IDL_generated
CLEANSRC = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4 $(CLEANSRC_IDL)
#else
CLEANSRC = CLEAN_SRC_LIST CLEAN_SRC_LIST2 CLEAN_SRC_LIST3 CLEAN_SRC_LIST4
#endif
CLEANOTHER = CLEAN_OTHER_LIST
#undef pdf
#undef tcl
#undef EXTRACT
#undef EXTRACT_TAE

CLEANINC = INCLUDE_LIST INCLUDE_LIST2 INCLUDE_LIST3 INCLUDE_LIST4

/* LOCAL_LIBRARY & SYSTEM_LIB */

/**/ # Note that SYSTEMINC is used only for includes that are installed,
/**/ # e.g. from a TAO/IDL build.

#ifdef SUBROUTINE
LOCALLIB = LOCAL_LIBRARY
#ifdef GUI_SUBLIB
SYSTEMLIB = $(V2OLB)/libguisub.a
SYSTEMINC = $(GUIINC)/gui
#endif
#ifdef P1_SUBLIB
SYSTEMLIB = $(V2OLB)/libp1sub.a
SYSTEMINC = $(P1INC)
#endif
#ifdef P2_SUBLIB
SYSTEMLIB = $(V2OLB)/libp2sub.a
SYSTEMINC = $(P2GENINC)
#endif
#ifdef MRO_SUBLIB
SYSTEMLIB = $(V2OLB)/libmrosub.a
SYSTEMINC = $(MROINC)
#endif
#ifdef GLL_SUBLIB
SYSTEMLIB = $(V2OLB)/libgllsub.a
SYSTEMINC = $(GLLINC)
#endif
#ifdef CAS_SUBLIB
SYSTEMLIB = $(V2OLB)/libcassub.a
SYSTEMINC = $(CASINC)
#endif
#ifdef UPLINKTOUR_SUBLIB
SYSTEMLIB = $(V2OLB)/libuplinktoursub.a
SYSTEMINC = $(UPLINKTOURINC)
#endif
#ifdef SSV_SUBLIB
SYSTEMLIB = $(V2OLB)/libssvsub.a
SYSTEMINC = $(SSVINC)
#endif
#ifdef NEAT_SUBLIB
SYSTEMLIB = $(V2OLB)/libneatsub.a
SYSTEMINC = $(NEATINC)
#endif
#ifdef DIV_SUBLIB
SYSTEMLIB = $(V2OLB)/libdivsub.a
SYSTEMINC = $(DIVINC)
#endif
#ifdef P3_SUBLIB
SYSTEMLIB = $(V2OLB)/libp3sub.a
SYSTEMINC = $(P3INC)
#endif
#ifdef MARS_SUBLIB
SYSTEMLIB = $(V2OLB)/libmarssub.a
SYSTEMINC = $(MARSINC)
#endif

/* For now, $(MDMSOLB) is where all MDMS object libraries are residing. */
#ifdef FEI3_MISC_SUBLIB
SYSTEMLIB = $(MDMSOLB)/libfeimisc.a
SYSTEMINC = $(MDMSINC)
#endif

#ifdef MDMS_DBI_SUBLIB
SYSTEMLIB = $(MDMSOLB)/libdbi.a
SYSTEMINC = $(MDMSINC)
#endif

/*!!!!!!! what about debug versions? */
#endif /* #ifdef SUBROUTINE */

/* DOCS */

#ifdef TAE_ERRMSG
ERRFILE = TAE_ERRMSG.msg
#endif

/************************************************************************/
/* Define linker libraries based on which are needed			*/
/************************************************************************/

#if defined(PROGRAM) || (defined(CCC_TEMPLATES) && !defined(NO_TEMPLATE_LINK))

#ifdef MAIN_LANG_C
#define LINKER $(LINK.c)
#endif
#ifdef MAIN_LANG_C_PLUS_PLUS
#define LINKER $(LINK.ccc)
#endif
#if defined(SUBROUTINE) && defined(CCC_TEMPLATES)
#define LINKER $(LINK.ccc)
#endif
#ifdef MAIN_LANG_FORTRAN
#define LINKER $(LINK.f)
#endif

#ifdef LIB_LOCAL
#define LOCL LOCAL_LIBRARY
#else
#define LOCL
#endif

#ifdef LIB_GUISUB
#define GUISL GUISUBlib
#else
#ifdef LIB_GUISUB_DEBUG
#define GUISL -lguisub_debug
#else
#define GUISL
#endif
#endif

#ifdef LIB_P3SUB
#define USES_P3L
#define P3SL P3SUBlib
#else
#ifdef LIB_P3SUB_DEBUG
#define USES_P3L
#define P3SL -lp3sub_debug
#else
#define P3SL
#endif
#endif

#if defined(LIB_UPLINKTOURSUB)||defined(UPLINKTOURLIB)||defined(UPLINKTOUR_SUBLIB)
#define UPLINKTOURL -luplinktoursub
#else
#define UPLINKTOURL
#endif

#if defined(LIB_SSVSUB)||defined(SSVLIB)||defined(SSV_SUBLIB)
#define SSVL -lssvsub
#else
#define SSVL
#endif

#if defined(LIB_NEATSUB)||defined(NEATLIB)||defined(NEAT_SUBLIB)
#define NEATL -lneatsub
#else
#define NEATL
#endif

#if defined(LIB_DIVSUB)||defined(DIVLIB)||defined(DIV_SUBLIB)
#define DIVL -ldivsub
#else
#define DIVL
#endif

#if defined(LIB_GLLSUB)||defined(GLLLIB)||defined(GLL_SUBLIB)
#define GLLL -lgllsub
#else
#define GLLL
#endif

#if defined(LIB_CASSUB)||defined(CASLIB)||defined(CAS_SUBLIB)
#define CASL -lcassub
#else
#define CASL
#endif

#if defined(LIB_P2SUB)||defined(USES_P3L)
#define USES_P2L
#define P2SL P2SUBlib
#else
#ifdef LIB_P2SUB_DEBUG
#define USES_P2L
#define P2SL -lp2sub_debug
#else
#define P2SL
#endif
#endif

#if defined(LIB_MROSUB)||defined(MROLIB)||defined(MRO_SUBLIB)
#define MROL -lmrosub
#else
#define MROL
#endif

#if defined(LIB_P1SUB)||defined(USES_P2L)
#define P1SL P1SUBlib
#else
#ifdef LIB_P1SUB_DEBUG
#define P1SL -lp1sub_debug
#else
#define P1SL
#endif
#endif

#if defined(LIB_CAS_ISS_LOSSY)
#define CILYL -L$(CASSISS)/$(VICCPU) -lcasisslossy
#else
#if defined(LIB_CAS_ISS_LOSSY_DEBUG)
#define CILYL -L$(CASSISS)/$(VICCPU) -lcasisslossy_debug
#else
#define CILYL
#endif
#endif

/* Note: turning on MARS automatically turns on MER_IDD now...	*/
/* unless LIB_EXCLUDE_MER_IDD is on (see above).		*/

#ifdef LIB_MARSSUB
#define MARSSL MARSSUBlib
#ifndef LIB_EXCLUDE_MER_IDD
#define IDD_lib_auto
#endif
#else
#ifdef LIB_MARSSUB_DEBUG
#define MARSSL -lmarssub_debug
#define IDD_lib_auto
#else
#define MARSSL
#endif
#endif

#if defined(LIB_MER_IDD) || defined(IDD_lib_auto)
#define MERIDDL $(MERIDDLIB)/idd_gds/libidd_gds.a $(MERIDDLIB)/merfsw_stubs/libmerfsw_stubs.a
#else
#define MERIDDL
#endif

/* Note, we need the .o's too, not just the libraries */
#if defined(LIB_MSL_FSW)
/* Avoid mipl slash star .o looking like a comment below */
#define LIBMIPL $(MSLFSWLIB)/lib/mipl/
#define MSLFSWL LIBMIPL*.o -L$(MSLFSWLIB)/lib/mipl -larm -lfm -lmath -lssal -lgbl -lipc -ldrive -lpie -lhsm -lmot -lmem -lacm -lmathf -lddi -lchimra -larb -lseq -lcmod -ldrt -ldrill -lrsm -lsgnc -lic -lspam
#else
#define MSLFSWL
#endif

/* Note, we need the .o's too, not just the libraries */
#if defined(LIB_M20_SSIM)
/* Avoid mipl slash star .o looking like a comment below */
#define LIBMIPL $(M20SSIMLIB)/lib/mipl/
#define M20SSIML LIBMIPL*.o -L$(M20SSIMLIB)/lib/mipl -lsurface_sim -lrover_sim   -Wl,--start-group -lrcm  -lmath  -lipc  -lddi  -lrsm  -lsgnc  -lhsm  -lipc  -lmot  -lrm  -limf  -lcore  -lgbl  -lnav  -lplan  -lplanc  -lmom  -lnavlib  -lvtt  -lscsvis  -ldrill  -lgdrt -laca  -ldrive  -lhga  -larm  -lfm  -lacm  -larb  -lseq  -lpie  -lmem  -lscam  -lspam  -lcmod -lcbm   -Wl,--end-group     -lmathf   -ltimeline
#else
#define M20SSIML
#endif

#if defined(LIB_VRDI)
#define VRDIL -lvrdi
#else
#if defined(LIB_VRDI_NOSHR)
#define VRDIL EXP -lvrdi
#else
#ifdef LIB_VRDI_DEBUG
#define VRDIL -lvrdi_debug
#else
#define VRDIL
#endif
#endif
#endif

#ifdef LIB_MATH77
#define MATH77L MATH77lib
#else
#define MATH77L
#endif

#ifdef LIB_EXPAT
#define EXPL EXPATlib
#else
#define EXPL
#endif

#ifdef LIB_CPPUNIT
#define CPPUNITL $(CPPUNIT_ROOT)/lib/libcppunit.a
#else
#define CPPUNITL
#endif

#ifdef LIB_BOOST
#define BOOSTL $(BOOST_ROOT)/lib
#else
#define BOOSTL
#endif

/*
 *  Add link declarations for the externally developed Pointing
 *  History Engine libraries.
 */
#ifdef LIB_SIRTF_PHE
#define SIRTFPHEL $(SIRTF_PHE_LIB)/$(VICCPU)/phe/ph2.o $(SIRTF_PHE_LIB)/$(VICCPU)/utl/libutl.a
#else
#define SIRTFPHEL
#endif

/*                                                                  *
 *  Users may define LIB_SPICE or LIB_CSPICE but not both.          *
 *                                                                  *
 *  This is because the FORTRAN and C versions of the SPICE toolkit *
 *  are not guaranteed to work together.  Programs may link both    *
 *  and run happily in certain scenerios, but will certainly        *
 *  fail under other scenerios.                                     *
 */
#define SPICEL

#ifdef LIB_SPICE
#undef SPICEL
#define SPICEL $(SPICEROOT)/fortran/$(VICCPU)/lib/spicelib.a
#endif

#ifdef LIB_CSPICE
#undef SPICEL
#define SPICEL $(SPICEROOT)/c/$(VICCPU)/lib/cspice.a
#endif

#if defined(LIB_SPICE) && defined(LIB_CSPICE)
#undef SPICEL
#define SPICEL **********You_may_not_define_both_'LIB_SPICE'_and_'LIB_CSPICE'\
_in_a_single_imake_file*************
#endif


#ifdef LIB_MDMS_FEI
#define FEIL $(MDMSOLB)/libmdms_feiClient.a
#else
#define FEIL
#endif


#if defined(LIB_TAO_COS_NAMING) || \
    defined(LIB_TAO_COS_NOTIFICATION) || \
    defined(LIB_TAO_PORTABLE_SERVER)
#define TSVCL -L$(TAO_ROOT)/orbsvcs/orbsvcs
#else
#define TSVCL
#endif

#ifdef LIB_TAO_COS_NAMING
#define TNAML -lTAO_CosNaming
#else
#define TNAML
#endif

#ifdef LIB_TAO_COS_NOTIFICATION
#define TNOTL -lTAO_CosNotification
#else
#define TNOTL
#endif

#ifdef LIB_TAO_PORTABLE_SERVER
#define TPORL -lTAO_PortableServer
#else
#define TPORL
#endif

#ifdef LIB_TAO
/* #define INC_TAO -I$(TAO_ROOT) -I$(TAO_ROOT)/orbsvcs */
/* Added for RHE7 BUILD */
/* #define TAOL -L$(TAO_ROOT)/tao -lTAO_IORTable -lTAO */
#define TAOL -L$(ACE_TAO_INSTALL_PREFIX)/lib -lTAO_IORTable -lTAO
#else
#define TAOL
#endif


#ifdef LIB_ACE_WRAPPERS
/* #define ACEWL -L$(ACE_ROOT)/lib -lACE CCCACE_EXTRAlib */
/* Add for RHE7 BUILD */
/* #define ACEWL -L$(ACE_ROOT)/lib -lACE CCCACE_EXTRAlib */
#define ACEWL -L$(ACE_TAO_INSTALL_PREFIX)/lib -lACE CCCACE_EXTRAlib
#else
#define ACEWL
#endif

#ifdef LIB_PTHREAD
#define PTHRL -lpthread
#else
#define PTHRL
#endif

#ifdef LIB_PNG
#define PNGL -lpng
#else
#define PNGL
#endif

#ifndef LibFei3Path
#define LibFei3Path -L$(MDMSOLB)
#endif

#ifdef LIB_MDMS_FEI_3
#define Fei3Lib -lFEI
#else
#define Fei3Lib
#endif

#ifdef LIB_MDMS_FEI_3_MISC
#define Fei3Misc -lfeimisc
#else
#define Fei3Misc
#endif

#ifdef LIB_MDMS_FEI_3
#define FEI3L LibFei3Path Fei3Misc Fei3Lib
#else
#define FEI3L
#endif

#ifdef LIB_MDMS_DBI
#define DBIL $(MDMSOLB)/libdbi.a
#else
#define DBIL
#endif


/* Note: libmdmspwd1.a is for kerb V4 / pasword server V1 compatibility */
/* 02/20/02 TXH Removed linking with libmdmspwd1.a to use Kerberos 5 auth. */
#ifdef LIB_MDMS
#define MDMSL $(MDMSOLB)/libmdms.a
#else
#define MDMSL
#endif

/*
** Sybase 12.5.1 client is not fully supported on Red Hat Enterprise Linux 3
** See details in imake.config
** T. Huang, Feb. 10, 2004
*/
#if defined(LIB_SYBASE) || defined(LIB_SYBASE_NOSHR)
#if defined(LIB_PTHREAD) || defined(LIB_ACE_WRAPPERS) || defined(LIB_MDMS_DBI)
#define SYBASEL SYBlib
/** $(SYBASE)/$(SYBASE_OCS)/lib/libsybdb.a $(SYBASE)/$(SYBASE_OCS)/lib/libct_r.a $(SYBASE)/$(SYBASE_OCS)/lib/libcs_r.a $(SYBASE)/$(SYBASE_OCS)/lib/libcomn_r.a $(SYBASE)/$(SYBASE_OCS)/lib/libintl_r.a SYBlib
**/
#else
#define SYBASEL SYBlib
/** $(SYBASE)/$(SYBASE_OCS)/lib/libsybdb.a $(SYBASE)/$(SYBASE_OCS)/lib/libct.a $(SYBASE)/$(SYBASE_OCS)/lib/libcs.a $(SYBASE)/$(SYBASE_OCS)/lib/libcomn.a $(SYBASE)/$(SYBASE_OCS)/lib/libintl.a SYBlib
**/
#endif
#else
#define SYBASEL
#endif

/* Note: Kerberos defines a symbol called "log".  Duuuh.  Guess what	*/
/* that conflicts with?  The math library!!!  #$#@ idiots.  So KRBL	*/
/* must go after -lm.  Fortunately, Kerberos' log() function does not	*/
/* appear to be needed.  If it is, you're just outta luck.		*/

#if defined(LIB_KERBEROS)
#define KRBL KERBLib
#else
#define KRBL
#endif

#if defined( LIB_KERBEROS4)
#ifndef LIB_KERBEROS
#define KRB4L KERB4Lib
#else
#define KRB4L KERB4LibShort
#endif
#else
#define KRB4L
#endif

#ifdef LIB_XERCES
#define XERL XERCESlib
#else
#define XERL
#endif

#ifdef LIB_PDS_LABEL
#define PDSLL $(PDS_LABEL_LIB)/pdslabel.a
#else
#define PDSLL
#endif

#ifdef LIB_PDS
#define PDSL -L$(PDS_LIBRARY)/src/lib -loal_others_c
#else
#define PDSL
#endif

#if defined(LIB_ISIS)
#define ISISL $(ISISLIB)/libisismap.a $(ISISLIB)/libisis.a $(ISISLIB)/libisistae.a $(ISISLIB)/libisisbind.a
#else
#define ISISL
#endif

#if defined(LIB_HDF)
#define HDFL $(HDFLIB)/lib/libmfhdf.a $(HDFLIB)/lib/libdf.a $(HDFEOSLIB)/src/libhdfeos.a -lz
#else
#define HDFL
#endif

#ifdef LIB_GEOTRANS
#define GEOTRANSL $(GEOTRANSLIB)/libdtcc.a
#else
#define GEOTRANSL
#endif

#ifdef LIB_NATGRID
#define NATGRIDL $(NATGRID_LIB)/libngmath.a 
#else
#define NATGRIDL
#endif

#if defined(LIB_TIFF)
#define TIFFL $(TIFFLIB)/lib/libgeotiff.a $(TIFFLIB)/lib/libtiff.a -lz
#else
#define TIFFL
#endif

/* Note: -ljpeg is required when building with TIFFLIB (vtiff3o) on
Linux, but not on MacOS, though libjpeg is typically available on
Linux, but not on MacOS. So libjpeg.a is found only for MacOS in
external, yet it is not used, apparently (!) */
#if defined(LIB_JPEG)
#define JPEGL -L $(JPEGLIB)/lib -ljpeg
#else
#define JPEGL
#endif

#if defined(LIB_FFTW)
#define FFTWL -L $(FFTWLIB)/lib -lfftw3
#else
#define FFTWL
#endif

#if defined(LIB_GDAL)
#define GDALL $(GDALLIB)/lib/libgdal.a
#else
#define GDALL
#endif

#if defined(LIB_GSL)
#define GSLL $(GSLLIB)/lib/libgsl.a $(GSLLIB)/lib/libgslcblas.a
#else
#define GSLL
#endif

#if defined(LIB_SIMBAD)
#define SIMBADL $(SIMBADLIB)/libsimcli.a
#else
#define SIMBADL
#endif

#if defined(LIB_PGPLOT)
#define PGPLOTL $(PGPLOTLIB)/libcpgplot.a $(PGPLOTLIB)/libpgplot.a
#else
#define PGPLOTL
#endif

#if defined LIB_SIFT
#define SIFTL -L$(SIFT_LIB) -lSift 
#else
#define SIFTL
#endif

#if defined LIB_CRUMBS
#define CRUMBSL $(CRUMBS_LIB)/libgrape.a $(CRUMBS_LIB)/libimage.a $(CRUMBS_LIB)/libvsl.a $(CRUMBS_LIB)/libds.a $(CRUMBS_LIB)/libpath.a $(CRUMBS_LIT_LIB)/libcahvor.a
#else
#define CRUMBSL
#endif

#if defined LIB_CERES
#define CERESL -L$(CERES_LIB)/lib -lceres
#else
#define CERESL
#endif

/* Note: there's no link for LIB_EIGEN.  It's all include. */

#if defined LIB_GLOG
#define GLOGL $(GLOG_LIB)/lib/libglog.a
#else
#define GLOGL
#endif

#if defined(LIB_MYSQLCONCPP)
#define MYSQLCONCPPL -L${MYSQLCONCPP_LIB}/lib -lmysqlcppconn
#else
#define MYSQLCONCPPL
#endif

#if defined(LIB_MYSQL)
#define MYSQLL -L${MYSQLLIB} -lmysqlclient -lz 
#else
#define MYSQLL
#endif

#if defined(LIB_MATRACOMP) 
#define MCL $(MATRACOMP_LIB)/libmatracomp.a
#else
#define MCL
#endif

#if defined(LIB_MATRADCOMP)
#define MDCL $(MATRADCOMP_LIB)/libmatradcomp.a
#else
#define MDCL
#endif

#ifdef LIB_PVM
#ifdef USES_FORTRAN
#define PVML $(PVM_FLIB) $(PVM_CLIB)
#else
#define PVML $(PVM_CLIB)
#endif
#else
#define PVML
#endif

#ifdef LIB_MPI
#define MPIL MPIlib
#else
#define MPIL
#endif

#ifdef LIB_ROGUEWAVE
#define RWL ROGUElib
#else
#define RWL
#endif

#if defined(LIB_RTL) && defined(RTL_HAS_SO)
#if defined(MAIN_LANG_FORTRAN)
#define V2L -lrtlf RTLlib
#else
#define V2L RTLlib
#endif
#else
#if defined(LIB_RTL_NOSHR) || (defined(LIB_RTL) && !defined(RTL_HAS_SO))
#define V2L EXP RTLlib_noshr EXP -lshvic
#else
#ifdef LIB_RTL_DEBUG
#define V2L -lrtl_debug -lshvic
#else
#define V2L
#endif
#endif
#endif

#if defined(LIB_NETWORK) || defined(LIB_NETWORK_NOSHR)
#define NETL NETlib
#else
#define NETL
#endif

/* Curses library definitions */
#ifdef LIB_CURSES
#define CRSL CURSESlib
#else
#define CRSL
#endif

/* The $(TAELIB)/libtaec.o thing below is a horrible hack.  It was simply */
/* -ltaec.  But the library is not a library, it's a .o file, designed to */
/* override symbols in libtae.a for C programs (see libtaec's source).    */
/* Unfortunately, it really needs to be a .o to force the linker to load  */
/* it; .a's don't get loaded if no symbols are resolved.  The real problem*/
/* is that Sun's Forte 6 compiler suddenly started choking on this in     */
/* certain circumstances) after DECADES of working.  So, we simply make   */
/* sure there's a .o as well as a .a in the TAE build, then use the .o    */
/* instead here.  It was too risky to try to take out the Fortran version */
/* of the routine (in the main library), even though it appears that it   */
/* is never used.  Yuck and double yuck.				  */

#if defined(LIB_TAE) || defined(LIB_TAE_NOSHR)
#if defined(LIB_RTL) && defined(RTL_HAS_SO)
#define TAEL  /* If RTL SO is used, no TAE library is needed (it's included) */
#else
#ifdef LIB_TAE_NOSHR		/* Only use EXP for no-share version */
#define TEXP EXP
#else
#define TEXP
#endif
#if TAE_VERSION == 4
#define TAEL $(TOLB)/clib.a TEXP $(TOLB)/lib.a TERMlib
#else
#if TAE_VERSION == -1		/* Standalone version */
#define TAEL TEXP $(TOLB)/lib.a
#else
#define TAEL -L$(TAELIB) $(TAELIB)/libtaec.o TEXP -ltae TERMlib
#endif
#endif
#endif
#else
#define TAEL
#endif

#if defined(LIB_MOTIFAPP)
#define MAL -L$(MOTIFAPPLIB) EXP -lMotifApp
#else
#define MAL
#endif

#if defined(LIB_MOTIF) || defined(LIB_XMU) || defined(LIB_XPM) || defined(LIB_XEXT)
#define MOTIFL Xlib
#else
#define MOTIFL
#endif

#if defined(LIB_XRT_GRAPH)
#define XRTGRL XRTGRlib
#else
#define XRTGRL
#endif

#if defined(LIB_XRT_3D)
#define XRT3DL XRT3Dlib
#else
#define XRT3DL
#endif

#if defined(LIB_CANDELA)
#define CANDELAL CANDELAlib
#else
#define CANDELAL
#endif

#if defined(LIB_FORTRAN)
#define FTNL FTNlib
#else
#define FTNL
#endif

#if defined(LIB_C_PLUS_PLUS)
#define CCCL CCClib
#else
#define CCCL
#endif

#if defined(LIB_TCL_TK)
#define TCLL -L$(TCLLIB) -ltk -ltcl
#else
#define TCLL
#endif

/* Note: there are currently no includes for this. */
/* This is used by applications *calling* Java (starting a VM) */
#if defined(LIB_CALLABLE_JAVA)
#define CJL CallableJavaLib
#else
#define CJL
#endif

#if defined(LIB_OMP)
#define OMPL OMPlib
#else
#define OMPL
#endif

#if defined(LIB_EMBREE)
#define EMBREEL $(EMBREE_LIB)/libembree3.a $(EMBREE_LIB)/libembree_avx.a $(EMBREE_LIB)/libembree_avx2.a $(EMBREE_LIB)/libembree_sse42.a $(EMBREE_LIB)/liblexers.a $(EMBREE_LIB)/libmath.a $(EMBREE_LIB)/libsimd.a $(EMBREE_LIB)/libsys.a $(EMBREE_LIB)/libtasking.a
#else
#define EMBREEL
#endif

LIBS = -L$(V2OLB) LOCL CJL P3SL MARSSL MROL MERIDDL MSLFSWL M20SSIML UPLINKTOURL SSVL NEATL GLLL CASL P2SL CRUMBSL GUISL P1SL DIVL CILYL VRDIL MATH77L SIRTFPHEL SPICEL FEI3L DBIL TSVCL TNAML TNOTL TPORL TAOL ACEWL PTHRL FEIL MDMSL SYBASEL MYSQLL XERL PDSLL PDSL HDFL GEOTRANSL NATGRIDL TIFFL JPEGL FFTWL GDALL GSLL SIMBADL PGPLOTL SIFTL CERESL GLOGL MCL MDCL PVML MPIL EXPL RWL THRL V2L ISISL NETL CRSL TAEL TCLL MAL XRTGRL XRT3DL MOTIFL CANDELAL CPPUNITL MYSQLCONCPPL BOOSTL EMBREEL FTNL CCCL MATHlib KRB4L KRBL OMPL PNGL SPECIALlib

#endif			/* PROGRAM || CCC_TEMPLATES */

/************************************************************************/
/* Generate makefile targets						*/
/************************************************************************/

#ifdef USES_EXTRACT
#define EXTRACT_TARGET extract
#else
#define EXTRACT_TARGET
#endif

#ifdef PROGRAM

std: PROGRAM

all: PROGRAM doc

#ifdef MakeHasConditionalMacros

debug profile: PROGRAM

#ifdef USES_ANY_C
debug := CFLAGS = CDebugFlags
profile := CFLAGS = CProfileFlags
#endif
#ifdef USES_C_PLUS_PLUS
debug := CCCFLAGS = CCCDebugFlags
profile := CCCFLAGS = CCCProfileFlags
#endif
#ifdef USES_FORTRAN
debug := FFLAGS = F77DebugFlags
profile := FFLAGS = F77ProfileFlags
#endif

#endif		/* MakeHasConditionalMacros */

system: PROGRAM doc clean.obj clean.src

compile: EXTRACT_TARGET $(OBJS)

#if defined(LIB_XRT_GRAPH) || defined(LIB_XRT_3D) || defined(LIB_XRT_TABLE)
PROGRAM: EXTRACT_TARGET $(OBJS)
	LINKER -o PROGRAM $(OBJS) $(LIBS)
	-$(XRTHOME)/bin/xrt_auth PROGRAM
#else

#ifdef SHARED_LIBRARY

#define SYMBOL(x) LD_SYMBOL(x)
#define FSYMBOL(x) LD_FSYMBOL(x)
#ifndef SYMBOL_LIST
#define SYMBOL_LIST
#endif
#ifdef SO_SOFTLINK_NEEDED
#ifdef REVERSE_SO_NAMES		/* libx.1.2.so rather than libx.so.1.2 */
#ifdef IMAKE_TOKEN_PASTING_HACK
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM##MAJ_V##MIN_V##SO $(OBJS) $(LIBS)
	-$(RM) PROGRAM##SO
	$(LN) PROGRAM##MAJ_V##MIN_V##SO PROGRAM##SO
#else
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM/**/MAJ_V/**/MIN_V/**/SO $(OBJS) $(LIBS)
	-$(RM) PROGRAM/**/SO
	$(LN) PROGRAM/**/MAJ_V/**/MIN_V/**/SO PROGRAM/**/SO
#endif
#else
#ifdef IMAKE_TOKEN_PASTING_HACK
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM##SO##MAJ_V##MIN_V SONAME_OPT PROGRAM##SO##MAJ_V##MIN_V SYMBOL_LIST $(OBJS) $(LIBS)
	-$(RM) PROGRAM##SO
	$(LN) PROGRAM##SO##MAJ_V##MIN_V PROGRAM##SO
#else
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM/**/SO/**/MAJ_V/**/MIN_V SONAME_OPT PROGRAM/**/SO/**/MAJ_V/**/MIN_V SYMBOL_LIST $(OBJS) $(LIBS)
	-$(RM) PROGRAM/**/SO
	$(LN) PROGRAM/**/SO/**/MAJ_V/**/MIN_V PROGRAM/**/SO
#endif
#endif
#else
#ifdef IMAKE_TOKEN_PASTING_HACK
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM##SO##MAJ_V##MIN_V SONAME_OPT PROGRAM##SO##MAJ_V##MIN_V SYMBOL_LIST $(OBJS) $(LIBS)
#else
PROGRAM: EXTRACT_TARGET $(OBJS)
	SharedLinker -o PROGRAM/**/SO/**/MAJ_V/**/MIN_V SONAME_OPT PROGRAM/**/SO/**/MAJ_V/**/MIN_V SYMBOL_LIST $(OBJS) $(LIBS)
#endif
#endif

#else
#ifdef SOFTLINK_TO
PROGRAM: EXTRACT_TARGET $(OBJS)
	-$(RM) SOFTLINK_TO
	LINKER -o PROGRAM $(OBJS) $(LIBS)
	-$(LN) PROGRAM SOFTLINK_TO
#else
PROGRAM: EXTRACT_TARGET $(OBJS)
	LINKER -o PROGRAM $(OBJS) $(LIBS)
#endif
#endif
#endif

/* Note: EXTRACT_TAE files might be missing if we're using the stae	*/
/* library instead.  So, if the file didn't get extracted, just create	*/
/* a dummy one.  The linker should find any errors if this isn't the	*/
/* right thing to do.							*/

#ifdef USES_EXTRACT
#ifdef IMAKE_TOKEN_PASTING_HACK
#define EXTRACT(x,libname) >/dev/null@@	$(ARX) $$V2OLB/lib##libname##.a x@@	echo
#define EXTRACT_TAE(x,libname) >/dev/null@@	-$(ARX) $$TAELIB/lib##libname##.a x@@	-if [ ! -f x ]; then echo "static int q;">tmp.c;CC_MACRO -c -o x tmp.c;$(RM) -f tmp.c;fi@@	echo
#else
#define EXTRACT(x,libname) >/dev/null@@	$(ARX) $$V2OLB/lib/**/libname/**/.a x@@	echo
#define EXTRACT_TAE(x,libname) >/dev/null@@	-$(ARX) $$TAELIB/lib/**/libname/**/.a x@@	-if [ ! -f x ]; then echo "static int q;">tmp.c;CC_MACRO -c -o x tmp.c;$(RM) -f tmp.c;fi@@	echo
#endif
extract:
	echo LINK_LIST LINK_LIST2 LINK_LIST3 LINK_LIST4 >/dev/null
#endif

#endif		/* #ifdef PROGRAM */

/************************************************************************/

#ifdef SUBROUTINE

std: library.local

all: library.local doc

#ifdef MakeHasConditionalMacros

debug profile: library.local

#ifdef USES_ANY_C
debug := CFLAGS = CDebugFlags
profile := CFLAGS = CProfileFlags
#endif
#ifdef USES_C_PLUS_PLUS
debug := CCCFLAGS = CCCDebugFlags
profile := CCCFLAGS = CCCProfileFlags
#endif
#ifdef USES_FORTRAN
debug := FFLAGS = F77DebugFlags
profile := FFLAGS = F77ProfileFlags
#endif

#endif		/* MakeHasConditionalMacros */

#ifdef IDL_generated
#define OBJS_target $(IDL_OBJS_TARGET) $(OBJS)
#else
#define OBJS_target $(OBJS)
#endif

#ifdef IDL_generated
#define INCLUDE_target include.system
#else
#define INCLUDE_target
#endif
system: library.system INCLUDE_target doc clean.obj clean.src

compile: EXTRACT_TARGET OBJS_target

#if defined(CCC_TEMPLATES) && !defined(NO_TEMPLATE_LINK)
#define TMPL_TARGET_LOCAL templates.local
#define TMPL_TARGET_SYSTEM templates.system
#else
#define TMPL_TARGET_LOCAL
#define TMPL_TARGET_SYSTEM
#endif

library.local: library.local.only TMPL_TARGET_LOCAL

#ifdef NoRanlibAvail
library.local.only: EXTRACT_TARGET OBJS_target
	-$(AR) $(LOCALLIB) $(OBJS)
#else
library.local.only: EXTRACT_TARGET OBJS_target
	-$(AR) $(LOCALLIB) $(OBJS)
	$(RANLIB) $(LOCALLIB)
#endif

library.system: library.system.only TMPL_TARGET_SYSTEM

#ifdef NoRanlibAvail
library.system.only: EXTRACT_TARGET OBJS_target
	-$(AR) $(SYSTEMLIB) $(OBJS)
#else
library.system.only: EXTRACT_TARGET OBJS_target
	-$(AR) $(SYSTEMLIB) $(OBJS)
	$(RANLIB) $(SYSTEMLIB)
#endif

#ifdef IDL_generated

/* For IDL generated code, we have a number of include files that must	*/
/* be installed.  But we only need to do this for the system build;	*/
/* there is no "install" for a local build.				*/
/* All but the .C.cc and .S.cc files get installed.			*/
#define idl C.h
INC_IDL_CH = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4
#undef idl
#define idl C_I.h
INC_IDL_CI = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4
#undef idl
#define idl S.h
INC_IDL_SH = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4
#undef idl
#define idl S_I.h
INC_IDL_SI = LIB_LIST LIB_LIST2 LIB_LIST3 LIB_LIST4
#undef idl

include.system: EXTRACT_TARGET OBJS_target
	-$(CP) $(INC_IDL_CH) $(SYSTEMINC)
	-$(CP) $(INC_IDL_CI) $(SYSTEMINC)
	-$(CP) $(INC_IDL_SH) $(SYSTEMINC)
	-$(CP) $(INC_IDL_SI) $(SYSTEMINC)
#endif			/* end IDL_generated */

/* C++ templates must be instantiated.  We do this by running the	*/
/* linker on the object files, telling it to ignore undefined's (so	*/
/* no errors are issued) and route the output to /dev/null.  Any	*/
/* libraries that might have template instantiations in them already	*/
/* (including our own library) should be included in this link		*/
/* statement so that you don't get multiple instantiations.  The	*/
/* practical upshot of this is that a subroutine must include any LIB_	*/
/* macros that applications will also link with, which might have	*/
/* template instantiations in them.  Terribly messy.			*/

#if defined(CCC_TEMPLATES) && !defined(NO_TEMPLATE_LINK)

templates.local: EXTRACT_TARGET $(OBJS)
	-$(RM) ptrepository/?*.o  /* don't use slash-star - it's a comment! */
	-LINKER TMPL_INST_OPTS $(OBJS) $(LOCALLIB) $(LIBS) TMPL_INST_POST_OPTS
	set ptrepository/?*.o; if [ "$$1" != "ptrepository/?*.o" ] ; then $(AR) $(LOCALLIB) ptrepository/?*.o; fi;
	-$(RANLIB) $(LOCALLIB)

templates.system: EXTRACT_TARGET $(OBJS)
	-$(RM) ptrepository/?*.o  /* don't use slash-star - it's a comment! */
	-LINKER TMPL_INST_OPTS $(OBJS) $(SYSTEMLIB) $(LIBS) TMPL_INST_POST_OPTS
	set ptrepository/?*.o; if [ "$$1" != "ptrepository/?*.o" ] ; then $(AR) $(SYSTEMLIB) ptrepository/?*.o; fi;
	-$(RANLIB) $(SYSTEMLIB)

#endif		/* CCC_TEMPLATES */

#endif		/* #ifdef SUBROUTINE */

/************************************************************************/

#ifdef PROCEDURE

std: $(OBJS)

all: $(OBJS) doc

system: $(OBJS) doc clean.obj clean.src

#endif		/* #ifdef PROCEDURE */

/************************************************************************/

/* Generate targets for docs */

#ifdef TAE_ERRMSG
#if TAE_VERSION <= 0		/* No TAE, don't build the message file */
#undef TAE_ERRMSG
#endif
#endif

#if defined(TAE_ERRMSG)			/* || other doc types */
doc: doc.errmsg

#ifdef TAE_ERRMSG
doc.errmsg: TAE_ERRMSG.inx

TAE_ERRMSG.inx: TAE_ERRMSG.msg
	$(RUN_TM) '$(MSGBLD) $(ERRFILE)'

#endif

/* Other doc builds go here */

#else					/* No docs available */
doc:

#endif

/************************************************************************/

/* Generate targets for cleans */

#if defined(PROGRAM) || defined(SUBROUTINE)

#ifdef NO_CLEAN_OBJ_LIST
clean.obj:

#else
clean.obj:
	-$(RM) $(CLEANOBJS)
#endif

#else
clean.obj:

#endif

#if defined(NO_CLEAN_SRC_LIST) && defined(NO_CLEAN_OTHER_LIST) && defined(NO_INCLUDE_LIST)
clean.src:
	-$(RM) $(UNIT_NAME).make $(UNIT_NAME).bld $(UNIT_NAME).imake
#else
clean.src:
	-$(RM) $(CLEANSRC) $(CLEANINC) $(CLEANOTHER)
	-$(RM) $(UNIT_NAME).make $(UNIT_NAME).bld $(UNIT_NAME).imake
#endif

/************************************************************************/

/* Dependencies for includes.  These should be generated by "makedepend" */
/* eventually.  For now, just make all source depend on all includes.    */

#if (defined(PROGRAM) || defined(SUBROUTINE)) && !defined(NO_OBJS)
$(OBJS): $(INCLUDES)
#endif


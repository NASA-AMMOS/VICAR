Documentation file for xsnapwidget.com/xsnapwidget_h.com

XImage to VICAR File Converter
------------------------------

The two modules, XImageHandler.h/.cc and XImageToVicar.h/.cc, allow conversion
from an arbitrary XImage structure (such as that returned by XGetImage() or
XRT's getImage()) into a VICAR file or other such medium.

The data can be returned either "raw" (the values are unsigned longs that are
actually in the pixel buffer), or as "color" (the values are unsigned bytes
representing the RGB color of the pixel.

In order to use these functions, you first create an instance of XImageHandler,
passing the XImage structure in the constructor.  NOTE:  The destructor does
*not* delete the XImage structure, that's up to you.

If you want to get the XImage data in color, you must supply the colormap
and visual type (setVisual(), setColormap()) that the XImage used to be
displayed.  This can be simplified by providing a widget instead (setWidget());
the colormap and visual type are derived from this widget (assming it's
realized!).

Once you've set up the XImageHandler, separate calls allow you to get at a
line of data either as raw pixels (getLine()), or converted into color using
the colormap (getColorLine()).

XImageHandler also provides the capability to manage overlaying child XImage
structures, which is used by the Widget Snapshot capability.  It is not further
discussed here.

The writeXImageToVicarFile() function (NOTE:  NOT a class member function!)
uses the public interface of XImageHandler to write a color VICAR file triplet.
This subroutine is in a separate module in order to reduce and isolate the
dependencies on VICAR.  Zeros may be provided for height and width to represent
the entire image, and the first pixel is at (0,0).

Example of call:

ximage = _graph->getImage();	// _graph is XRT
XImageHandler h(ximage);
h.setWidget(_graph->getWidget());
writeXImageToVicarFile(&h, "tmp.red","tmp.grn","tmp.blu", 0, 0, 0, 0);

Widget Snapshot
---------------

The Widget Snapshot provides the capability to get a "screen dump" of a
widget tree without necessarily rendering it on screen.  In order to use
this, the widgets in the tree must be managed and realized, but they do
not have to be mapped (set mappedWhenManaged to False, or simply create a
dialog or main window (e.g. MotifApp MainWindow) but don't pop it up.
For a MotifApp MainWindow, this means overriding manage() so as to not
call XtPopup() or XMapRaised().

The snapshot function (not class!) takeWidgetSnapshot() creates a tree
of XImageHandler objects with the rendering of each item in the widget
tree.  In a nutshell, it does this by temporarily replacing each widget's
window field with an off-screen pixmap, and forcing a redisplay (by directly
calling the widget's redisplay method).  This involves lots of illegal
accesses to X Toolkit internals, and is not guaranteed to work with all
widgets.

If you have widgets which cannot be rendered in this way, an optional
second argument to takeWidgetSnapshot() allows you to supply a pointer to
a function to render special widgets.  This function is called at the
beginning of takeWidgetSnapshot().  If it returns an XImageHandler object,
that is simply returned.  If it returns NULL (or doesn't exist), the
standard processing described above is performed.  For example, the XRT
graph widget cannot be rendered using the above method (for unknown reasons).
However, XRT does provide a XrtGetImage() function to return the XImage
for their widget, which can be called instead.  See below for an example.
takeWidgetSnapshot() does no more processing on the returned XImageHandler
object, so it must be completely set up.  Also, the special function is
called before the widget state (IsWidget, IsRealized, IsManaged) is checked,
so those should be checked (if relevant) in the special function.  This
functionality is provided via a function pointer rather than being built
in so there is no dependency on the XRT widget set (a commercial product)
in this package.

takeWidgetSnapshot() should be called after all widgets are managed and
realized.  If this function is invoked via a menu, this is not a problem.
However, an automated, no-display application needs to get control back after
the event loop is started to ensure everything is ready.  A WorkProc should
be sufficient for this; however, it does not seem to work well in all
cases.  A TimeOut can be used instead, or another method could be found.

The returned XImageHandler object can then be used to extract the image
data as described above, or can be used with writeXImageToVicarFile().
The XImageHandler children are transparent; the getLine() and getColorLine()
functions take care of overlaying the children.  It is not necessary to
(actually, it's better not to) set the colormap, visual, or widget in
the XImageHandler class; takeWidgetSnapshot does this automatically.

The returned XImageHandler object can be freed (with all its children
and XImage structures) via freeWidgetSnapshot().

Example of call:

void timer_proc(XtPointer client_data, XtIntervalId *)
{
   Widget w = (Widget)client_data;

   XImageHandler *h = takeWidgetSnapshot(w);
   writeXImageToVicarFile(h, "tmp.red", "tmp.grn", "tmp.blu", 0,0,0,0);
   freeWidgetSnapshot(h);
}

Example of call handling special widgets:

#include <Xm/XrtGraph.h>
#include <Xm/Xrt3d.h>
XImageHandler *getXrtWidgets(Widget w)
{
   XImageHandler *xh = NULL;
   XImage *xi;
   if (!XtIsXrtGraph(w) && !XtIsXrt3d(w)) return NULL;
   if (!XtIsRealized(w)) return NULL;	// don't need IsWidget()
   if (!XtIsManaged(w)) return NULL;
   if (XtIsXrt3d(w))
      xi = Xrt3dGetImage(w);
   else
      xi = XrtGetImage(w);
   if (xi != NULL) {
      xh = new XImageHandler(xi);
      xh->setWidget(w);
   }
   return xh;
}

...
   XImageHandler *h = takeWidgetSnapshot(w, &getXrtWidgets);
...


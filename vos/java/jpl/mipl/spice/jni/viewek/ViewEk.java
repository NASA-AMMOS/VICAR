/*
 * ViewEk.java
 *
 * Created on August 21, 2000, 8:54 AM
 */

package jpl.mipl.spice.jni.viewek;

import jpl.mipl.spice.jni.*;

import javax.swing.JFileChooser;
import java.util.ArrayList;

import java.io.FileWriter;

import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.BoxLayout;
import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import java.awt.event.ActionListener;

/**
 *  Main class for application ViewEk.
 *
 *  ViewEk lets you view the contents of ekernels, and to perform SQL
 *  queries against them, in a GUI environment.
 *
 * @author  Mcihael Brady
 */
public class ViewEk extends javax.swing.JFrame {

  private static final String VERSION = "0.02";
  
  private static String s_table = null;
  private static String s_query = null;

  /** The number of rows the user wants to see. */
  private static int s_numRows = 100;

  /** The first row the user wants to see. */
  private static int s_beginRow = 0;

  private static KernelPool s_kernelPool = new KernelPool();
  JFileChooser m_fileChooser = new JFileChooser();
  private static ViewEk s_mainFrame = null;

  /** Creates new form ViewEk */
  private ViewEk()
  {
    s_mainFrame = this;
    initComponents ();
    pack ();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
      menuBar = new javax.swing.JMenuBar();
      fileMenu = new javax.swing.JMenu();
      loadEKernelMenuItem = new javax.swing.JMenuItem();
      unloadEKernelMenuItem = new javax.swing.JMenuItem();
      jSeparator1 = new javax.swing.JSeparator();
      loadTextKernel = new javax.swing.JMenuItem();
      unloadTextKernel = new javax.swing.JMenuItem();
      jSeparator2 = new javax.swing.JSeparator();
      exportMenuItem = new javax.swing.JMenuItem();
      exitMenuItem = new javax.swing.JMenuItem();
      helpMenu = new javax.swing.JMenu();
      aboutMenuItem = new javax.swing.JMenuItem();
      tablePanel = new javax.swing.JPanel();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      TablePanel = new javax.swing.JPanel();
      tableLabel = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      tableList = new javax.swing.JList();
      showButton = new javax.swing.JButton();
      QueryPanel = new javax.swing.JPanel();
      queryLabel = new javax.swing.JLabel();
      queryScrollPanel = new javax.swing.JScrollPane();
      query = new javax.swing.JTextArea();
      executeButton = new javax.swing.JButton();
      numRowsPanel = new javax.swing.JPanel();
      Show = new javax.swing.JLabel();
      numRows = new javax.swing.JTextField();
      Starting = new javax.swing.JLabel();
      beginRow = new javax.swing.JTextField();
      dataScroll = new javax.swing.JScrollPane();
      dataTable = new javax.swing.JTable();
      
      fileMenu.setText("File");
        
        loadEKernelMenuItem.setText("Load E Kernel...");
          loadEKernelMenuItem.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  loadMenuItemActionPerformed(evt);
              }
          }
          );
          fileMenu.add(loadEKernelMenuItem);
          
        unloadEKernelMenuItem.setText("Unload All E Kernels");
          unloadEKernelMenuItem.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  unloadMenuItemActionPerformed(evt);
              }
          }
          );
          fileMenu.add(unloadEKernelMenuItem);
          
        fileMenu.add(jSeparator1);
          
        loadTextKernel.setText("Load Text Kernel...");
          loadTextKernel.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  loadTextKernelActionPerformed(evt);
              }
          }
          );
          fileMenu.add(loadTextKernel);
          
        unloadTextKernel.setText("Unload All Text Kernels");
          unloadTextKernel.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  unloadTextKernelActionPerformed(evt);
              }
          }
          );
          fileMenu.add(unloadTextKernel);
          
        fileMenu.add(jSeparator2);
          
        exportMenuItem.setText("Export...");
          exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  exportMenuItemActionPerformed(evt);
              }
          }
          );
          fileMenu.add(exportMenuItem);
          
        exitMenuItem.setText("Exit");
          exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  exitMenuItemActionPerformed(evt);
              }
          }
          );
          fileMenu.add(exitMenuItem);
          menuBar.add(fileMenu);
        
      helpMenu.setText("Help");
        
        aboutMenuItem.setText("About");
          aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  aboutMenuItemActionPerformed(evt);
              }
          }
          );
          helpMenu.add(aboutMenuItem);
          menuBar.add(helpMenu);
        setTitle("ViewEk - E kernel viewer");
      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent evt) {
              exitForm(evt);
          }
      }
      );
      
      tablePanel.setLayout(new javax.swing.BoxLayout(tablePanel, 1));
      
      
        TablePanel.setLayout(new javax.swing.BoxLayout(TablePanel, 1));
          
          tableLabel.setText("Tables");
            TablePanel.add(tableLabel);
            
            
          
            tableList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
              jScrollPane1.setViewportView(tableList);
              
              TablePanel.add(jScrollPane1);
            
            
          showButton.setText("Show");
            showButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    showButtonActionPerformed(evt);
                }
            }
            );
            TablePanel.add(showButton);
            
            jTabbedPane1.addTab("Table", TablePanel);
          
          
        QueryPanel.setLayout(new javax.swing.BoxLayout(QueryPanel, 1));
          
          queryLabel.setText("Query");
            QueryPanel.add(queryLabel);
            
            
          
            query.setWrapStyleWord(true);
              query.setLineWrap(true);
              queryScrollPanel.setViewportView(query);
              
              QueryPanel.add(queryScrollPanel);
            
            
          executeButton.setText("Execute");
            executeButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    executeButtonActionPerformed(evt);
                }
            }
            );
            QueryPanel.add(executeButton);
            
            jTabbedPane1.addTab("Query", QueryPanel);
          
          tablePanel.add(jTabbedPane1);
        
        
      numRowsPanel.setLayout(new javax.swing.BoxLayout(numRowsPanel, 1));
        numRowsPanel.setBorder(new javax.swing.border.TitledBorder("How many rows?"));
        
        Show.setText("Show");
          numRowsPanel.add(Show);
          
          
        numRows.setMaximumSize(new java.awt.Dimension(2147483647, 21));
          numRows.setText("100");
          numRows.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  numRowsActionPerformed(evt);
              }
          }
          );
          numRows.addFocusListener(new java.awt.event.FocusAdapter() {
              public void focusLost(java.awt.event.FocusEvent evt) {
                  numRowsFocusLost(evt);
              }
          }
          );
          numRowsPanel.add(numRows);
          
          
        Starting.setText("rows starting at row");
          numRowsPanel.add(Starting);
          
          
        beginRow.setMaximumSize(new java.awt.Dimension(2147483647, 21));
          beginRow.setText("0");
          beginRow.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  beginRowActionPerformed(evt);
              }
          }
          );
          beginRow.addFocusListener(new java.awt.event.FocusAdapter() {
              public void focusLost(java.awt.event.FocusEvent evt) {
                  beginRowFocusLost(evt);
              }
          }
          );
          numRowsPanel.add(beginRow);
          
          tablePanel.add(numRowsPanel);
        
        
      getContentPane().add(tablePanel, java.awt.BorderLayout.WEST);
      
      
      
      dataScroll.setViewportView(dataTable);
        
        
      getContentPane().add(dataScroll, java.awt.BorderLayout.CENTER);
      
      setJMenuBar(menuBar);
      
  }//GEN-END:initComponents

  private void unloadTextKernelActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unloadTextKernelActionPerformed

    try
    {
      s_kernelPool.clear();
    }
    catch (Exception e)
    {
      javax.swing.JOptionPane.showMessageDialog(this,
        "Error unloading kernels: " + e.toString());
    }    
  }//GEN-LAST:event_unloadTextKernelActionPerformed

  private void loadTextKernelActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTextKernelActionPerformed

    int returnVal = m_fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
      String fileName = m_fileChooser.getSelectedFile().getAbsolutePath();
      try
      {
        s_kernelPool.load(new TextKernel(fileName));
      }
      catch (SpiceException e)
      {
        javax.swing.JOptionPane.showMessageDialog(this,
        "File couldn't be loaded: " + e.toString());
      }
    }
  }//GEN-LAST:event_loadTextKernelActionPerformed

  private void unloadMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unloadMenuItemActionPerformed

    try
    {
      s_kernelPool.unloadAll();
    }
    catch (Exception e)
    {
      javax.swing.JOptionPane.showMessageDialog(this,
        "Error unloading kernels: " + e.toString());
    }    
    tableList.setListData(new Object[0]);
  }//GEN-LAST:event_unloadMenuItemActionPerformed

  private void executeButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
    
    s_query = query.getText();    
  }//GEN-LAST:event_executeButtonActionPerformed


  private void exportMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItemActionPerformed

    int returnVal = m_fileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
      try
      {
        FileWriter file = new FileWriter(m_fileChooser.getSelectedFile());
        DatabaseTableModel model = ((DatabaseTableModel)dataTable.getModel());
        int numColumns = model.getColumnCount();
        int numRows = model.getRowCount();
        for (int i=0; i < numRows; ++i)
        {
          for (int j=0; j < numColumns; ++j)
          {
            if (j != 0)
              file.write('\t');
            file.write(model.getValueAt(i, j).toString());
          }
          file.write('\n');
        }
        file.close();
      }
      catch (Exception e)
      {
        javax.swing.JOptionPane.showMessageDialog(this,
        "File couldn't be saved: " + e.toString());
      }
    }
  }//GEN-LAST:event_exportMenuItemActionPerformed

  private void selectFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectFocusLost
  }//GEN-LAST:event_selectFocusLost

  private void whereFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_whereFocusLost
  }//GEN-LAST:event_whereFocusLost


  private void numRowsFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numRowsFocusLost
    updateNumRows();
  }//GEN-LAST:event_numRowsFocusLost

  private void beginRowFocusLost (java.awt.event.FocusEvent evt) {//GEN-FIRST:event_beginRowFocusLost
    updateBeginRow();
  }//GEN-LAST:event_beginRowFocusLost

  private void beginRowActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginRowActionPerformed
    updateBeginRow();
  }//GEN-LAST:event_beginRowActionPerformed

  private void numRowsActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numRowsActionPerformed
    updateNumRows();
  }//GEN-LAST:event_numRowsActionPerformed


  private void updateNumRows ()
  {
    try
    {
      s_numRows = Integer.parseInt(numRows.getText());
    }
    catch (NumberFormatException e)
    {
      numRows.setText(String.valueOf(s_numRows));
    }
  }

  private void updateBeginRow ()
  {
    try
    {
      s_beginRow = Integer.parseInt(beginRow.getText());
    }
    catch (NumberFormatException e)
    {
      beginRow.setText(String.valueOf(s_beginRow));
    }
  }

  JDialog m_aboutBox = null;
  private void aboutMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
    if (m_aboutBox == null)
    {
      m_aboutBox = new JDialog(s_mainFrame, "About ViewEk", true);
      JPanel panel = new JPanel();
      panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
      JLabel label = new JLabel("ViewEK v" + VERSION);
      panel.add(label);
      label = new JLabel("By Michael Brady");
      panel.add(label);
      label = new JLabel("Copyright 2000");
      panel.add(label);
      panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 0, 20));
      m_aboutBox.getContentPane().add(panel, BorderLayout.CENTER);

      panel = new JPanel();
      JButton button = new JButton("OK");
      button.addActionListener(new ActionListener()
      {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
          m_aboutBox.setVisible(false);
        }
      }
      );
      panel.add(button);
      panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
      m_aboutBox.getContentPane().add(panel, BorderLayout.SOUTH);
      m_aboutBox.getRootPane().setDefaultButton(button);

      m_aboutBox.pack();
      m_aboutBox.setLocationRelativeTo(s_mainFrame);
    }
    m_aboutBox.setVisible(true);
  }//GEN-LAST:event_aboutMenuItemActionPerformed

  private void showButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed

    s_table = tableList.getSelectedValue().toString();
  }//GEN-LAST:event_showButtonActionPerformed

  private void loadMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed

    int returnVal = m_fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
      String fileName = m_fileChooser.getSelectedFile().getAbsolutePath();
      EKernel kernel = new EKernel(fileName);
      try
      {
        s_kernelPool.load(kernel);

        ArrayList tables = new ArrayList();
        
        // Keep the tables currently in the list.
        
        for (int i=0; i < tableList.getModel().getSize(); ++i)
        {
          tables.add(tableList.getModel().getElementAt(i));
        }
        
        // Add the tables from this new kernel.
        
        for (int i=0; i < kernel.getNumSegments(); ++i)
        {
          if (tables.indexOf(kernel.getTable(i).getName()) == -1)
          {
            tables.add(kernel.getTable(i).getName());
          }
        }
        tableList.setListData(tables.toArray());
      }
      catch (SpiceException e)
      {
        javax.swing.JOptionPane.showMessageDialog(this,
        "File couldn't be loaded: " + e.toString());
      }
    }
  }//GEN-LAST:event_loadMenuItemActionPerformed

    private void exitMenuItemActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit (0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      System.exit (0);
    }//GEN-LAST:event_exitForm

    private static void showTable()
    {
      String table = s_table;
      s_table = null;

      try
      {
        JdbcStatement statement = s_kernelPool.createStatement();
        java.sql.ResultSet resultSet = 
          statement.executeSelectAll("FROM " + table);
 
        DatabaseTableModel model = new DatabaseTableModel(resultSet,
          s_beginRow,
          s_numRows);
        s_mainFrame.dataTable.setModel (model);
        java.awt.Rectangle bounds = s_mainFrame.getBounds();
        s_mainFrame.pack();
        s_mainFrame.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
      }
      catch (Exception e)
      {
        javax.swing.JOptionPane.showMessageDialog(s_mainFrame,
        "Error: " + e.toString());
      }      
    }
    
    private static void showQuery()
    {
      String query = s_query;
      s_query = null;

      // Remove all newlines from the string.
      
      StringBuffer buf = new StringBuffer(query);
      int newlineIndex = -1;
      while ((newlineIndex = buf.toString().indexOf('\n')) > -1)
      {
        buf.replace(newlineIndex, newlineIndex + 1, " ");
      }
      query = buf.toString();
      
      try
      {   
        JdbcStatement statement = s_kernelPool.createStatement();
              
        java.sql.ResultSet resultSet = statement.executeQuery(query);
        
        DatabaseTableModel model = new DatabaseTableModel(resultSet,
          s_beginRow,
          s_numRows);
        s_mainFrame.dataTable.setModel (model);
        java.awt.Rectangle bounds = s_mainFrame.getBounds();
        s_mainFrame.pack();
        s_mainFrame.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
      }
      catch (Exception e)
      {
        javax.swing.JOptionPane.showMessageDialog(s_mainFrame,
          "Error: " + e.toString());
      }      
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main (String args[])
    throws SpiceException, QueryException, ResultNotFoundException
    {
      new ViewEk ().show ();

      while (true)
      {
        if (s_table != null)
        {
            showTable();
        }
        
        if (s_query != null)
        {
          showQuery();
        }
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem loadEKernelMenuItem;
    private javax.swing.JMenuItem unloadEKernelMenuItem;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem loadTextKernel;
    private javax.swing.JMenuItem unloadTextKernel;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList tableList;
    private javax.swing.JButton showButton;
    private javax.swing.JPanel QueryPanel;
    private javax.swing.JLabel queryLabel;
    private javax.swing.JScrollPane queryScrollPanel;
    private javax.swing.JTextArea query;
    private javax.swing.JButton executeButton;
    private javax.swing.JPanel numRowsPanel;
    private javax.swing.JLabel Show;
    private javax.swing.JTextField numRows;
    private javax.swing.JLabel Starting;
    private javax.swing.JTextField beginRow;
    private javax.swing.JScrollPane dataScroll;
    private javax.swing.JTable dataTable;
    // End of variables declaration//GEN-END:variables

  }

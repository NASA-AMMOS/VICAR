## This template is made up of usable macros for PDS4 Velocity Templates.
## This file must be placed in the same directory as the Velocity Templates
## to be used, otherwise the VelocityEngine will not be able to find it.
##
## To include this file in your template and use the macros, add the following
## at the top of your Velocity template:
##
##		#parse ( "pds_velocity_macros.txt" )
##


#################################
## PDS3 to PDS4 Data Type Mapping
## 
## This macro will return a PDS4 data type based on a PDS3 data type
## More specifically, this macro provides a mapping from the PDS3 Keywords
## DATA_TYPE, SAMPLE_TYPE, among others, to PDS4 data_type attribute in
## accordance with the number of BITS for the data_type (i.e. SAMPLE_BITS).
## The values in PDS4 are based on PDS SCH 1.4.0.0

## The following mappings are TBD
##	"ComplexLSB16",
##	"ComplexLSB8",
##	"ComplexMSB16",
##	"ComplexMSB8",
##	"IEEE754LSBDouble",
##	"IEEE754LSBSingle",
##	"IEEE754MSBDouble",
##	"IEEE754MSBSingle",
##	"SignedBitString",
##	"SignedByte",
##	"UnsignedBitString",
##	"UnsignedByte",
#set ($PDS3_PDS4_DTYPE_MAP = {
	"LSB_SIGNED_INTEGER" : "SignedLSB",
	"MSB_SIGNED_INTEGER" : "SignedMSB",
	"LSB_UNSIGNED_INTEGER" : "UnsignedLSB",
	"MSB_UNSIGNED_INTEGER" : "UnsignedMSB"
})
#macro(getPds4DataType $pds3_dtype $bits)
#if ( $bits == 16 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)2##
#elseif( $bits == 32 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)4##
#elseif( $bit == 64 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)8##
#end
#end
#################################

#################################
## PDS3 Bit Mask Trimmer
##
## In PDS3, the value for BIT_MASK and SAMPLE_BIT_MASK look like the following:
## 		SAMPLE_BIT_MASK              = 2#0000111111111111#
##
## In PDS4, these values should be just the binary portion "0000111111111111"
##
## This macro extracts the binary portion of the bit mask string. Dependent on the
## the number of bits for the array/sample/object.
##
#macro(trimBitMask $bit_mask $bits_str)
$bit_mask.substring(2,$convert.toInteger($bits_str))##
#end
#################################

##
#macro(substringM $bit_mask $bits_str)
$bit_mask.substring(2,$convert.toInteger($bits_str))##
#end
#################################

##################################
## Target vs. Target Type Mapping
##
## These are explicit mappings between target names and target types
## These may need to be applied at a mission-specific level, but for now
## will just leave in here.
##
##
#set ($TARGET_MAP = {
	"ALTAIR" : "Star",
	"APXSSITE" : "Equipment",
	"ARCTURUS" : "Star",
	"CALIMG" : "Calibration",
	"DEIMOS" : "Satellite",
	"LANDER" : "Equipment",
	"MAG" : "Equipment",
	"MARS" : "Planet",
	"PHOBOS" : "Satellite",
	"ROVER" : "Equipment",
	"SKY" : "null",
	"SUN" : "Sun",
	"VEGA" : "Star",
	"WINDSOCK" : "null"
})
#macro(getTargetType $target)
$TARGET_MAP.get($target)##
#end
##################################

##################################
## Check NA
##
## Simple macro that checks if value is equal to "NULL" string
## or "N/A" and if so, returns default value given as second argument
##
#macro(checkNA $value $default)
#set ($val = $value.toLowerCase())
##
#if (!$default.exists())
#set ($default = "")
#end
#if ( $val.equals("null") or $val.equals("n/a") or $val.equals("unk") )
$default##
#else
$value##
#end
#end
##################################

